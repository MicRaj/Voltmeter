

Microchip MPLAB XC8 Assembler V2.41 build 20230208172133 
                                                                                               Tue May 02 14:58:25 2023

Microchip MPLAB XC8 C Compiler v2.41 (Free license) build 20230208172133 Og9 
     1                           	processor	16F84A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2,noexec
     5                           	psect	strings,global,class=STRING,delta=2,noexec
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    11                           	psect	maintext,global,class=CODE,split=1,delta=2
    12                           	psect	text1,local,class=CODE,merge=1,delta=2
    13                           	psect	text2,local,class=CODE,merge=1,delta=2,group=2
    14                           	psect	text3,local,class=CODE,merge=1,delta=2
    15                           	psect	text4,local,class=CODE,merge=1,delta=2
    16                           	psect	text5,local,class=CODE,merge=1,delta=2
    17                           	psect	text6,local,class=CODE,merge=1,delta=2
    18                           	psect	text7,local,class=CODE,merge=1,delta=2
    19                           	psect	text8,local,class=CODE,merge=1,delta=2,group=1
    20                           	psect	text9,local,class=CODE,merge=1,delta=2
    21                           	psect	text10,local,class=CODE,merge=1,delta=2,group=2
    22                           	psect	text11,local,class=CODE,merge=1,delta=2,group=1
    23                           	psect	text12,local,class=CODE,merge=1,delta=2,group=1
    24                           	psect	text13,local,class=CODE,merge=1,delta=2
    25                           	psect	text14,local,class=CODE,merge=1,delta=2
    26                           	psect	text15,local,class=CODE,merge=1,delta=2
    27                           	psect	text16,local,class=CODE,merge=1,delta=2
    28                           	psect	text17,local,class=CODE,merge=1,delta=2
    29                           	psect	text18,local,class=CODE,merge=1,delta=2
    30                           	psect	intentry,global,class=CODE,delta=2
    31                           	psect	text19,local,class=CODE,merge=1,delta=2
    32                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    33                           	dabs	1,0x4E,2
    34     0000                     
    35                           ; Version 2.20
    36                           ; Generated 12/02/2020 GMT
    37                           ; 
    38                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    39                           ; All rights reserved.
    40                           ; 
    41                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    42                           ; 
    43                           ; Redistribution and use in source and binary forms, with or without modification, are
    44                           ; permitted provided that the following conditions are met:
    45                           ; 
    46                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    47                           ;        conditions and the following disclaimer.
    48                           ; 
    49                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    50                           ;        of conditions and the following disclaimer in the documentation and/or other
    51                           ;        materials provided with the distribution.
    52                           ; 
    53                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    54                           ;        software without specific prior written permission.
    55                           ; 
    56                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    57                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    58                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    59                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    60                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    61                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    62                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    63                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    64                           ; 
    65                           ; 
    66                           ; Code-generator required, PIC16F84A Definitions
    67                           ; 
    68                           ; SFR Addresses
    69     0000                     	;# 
    70     0001                     	;# 
    71     0002                     	;# 
    72     0003                     	;# 
    73     0004                     	;# 
    74     0005                     	;# 
    75     0006                     	;# 
    76     0008                     	;# 
    77     0009                     	;# 
    78     000A                     	;# 
    79     000B                     	;# 
    80     0081                     	;# 
    81     0085                     	;# 
    82     0086                     	;# 
    83     0088                     	;# 
    84     0089                     	;# 
    85     0000                     	;# 
    86     0001                     	;# 
    87     0002                     	;# 
    88     0003                     	;# 
    89     0004                     	;# 
    90     0005                     	;# 
    91     0006                     	;# 
    92     0008                     	;# 
    93     0009                     	;# 
    94     000A                     	;# 
    95     000B                     	;# 
    96     0081                     	;# 
    97     0085                     	;# 
    98     0086                     	;# 
    99     0088                     	;# 
   100     0089                     	;# 
   101     0000                     	;# 
   102     0001                     	;# 
   103     0002                     	;# 
   104     0003                     	;# 
   105     0004                     	;# 
   106     0005                     	;# 
   107     0006                     	;# 
   108     0008                     	;# 
   109     0009                     	;# 
   110     000A                     	;# 
   111     000B                     	;# 
   112     0081                     	;# 
   113     0085                     	;# 
   114     0086                     	;# 
   115     0088                     	;# 
   116     0089                     	;# 
   117     0000                     	;# 
   118     0001                     	;# 
   119     0002                     	;# 
   120     0003                     	;# 
   121     0004                     	;# 
   122     0005                     	;# 
   123     0006                     	;# 
   124     0008                     	;# 
   125     0009                     	;# 
   126     000A                     	;# 
   127     000B                     	;# 
   128     0081                     	;# 
   129     0085                     	;# 
   130     0086                     	;# 
   131     0088                     	;# 
   132     0089                     	;# 
   133                           
   134                           	psect	idataBANK0
   135     0334                     __pidataBANK0:
   136                           
   137                           ;initializer for welcomeMessage@F330
   138     0334  3457               	retlw	87
   139     0335  3465               	retlw	101
   140     0336  346C               	retlw	108
   141     0337  3463               	retlw	99
   142     0338  346F               	retlw	111
   143     0339  346D               	retlw	109
   144     033A  3465               	retlw	101
   145     033B  3400               	retlw	0
   146     000B                     _INTCONbits	set	11
   147     0036                     _RB6	set	54
   148     002A                     _RA2	set	42
   149     0028                     _RA0	set	40
   150     0034                     _RB4	set	52
   151     0033                     _RB3	set	51
   152     0032                     _RB2	set	50
   153     0031                     _RB1	set	49
   154     0029                     _RA1	set	41
   155     0035                     _RB5	set	53
   156     0037                     _RB7	set	55
   157     0081                     _OPTION_REGbits	set	129
   158     0085                     _TRISA	set	133
   159     0086                     _TRISB	set	134
   160                           
   161                           	psect	strings
   162     0314                     __pstrings:
   163     0314                     stringtab:
   164     0314                     __stringtab:
   165     0314                     stringcode:	
   166                           ;	String table - string pointers are 1 byte each
   167                           
   168     0314                     stringdir:
   169     0314  3003               	movlw	high stringdir
   170     0315  008A               	movwf	10
   171     0316  0804               	movf	4,w
   172     0317  0A84               	incf	4,f
   173     0318  0782               	addwf	2,f
   174     0319                     __stringbase:
   175     0319  3400               	retlw	0
   176     031A                     __end_of__stringtab:
   177     031A                     STR_1:
   178     031A  3430               	retlw	48	;'0'
   179     031B  342D               	retlw	45	;'-'
   180     031C  3435               	retlw	53	;'5'
   181     031D  3456               	retlw	86	;'V'
   182     031E  3400               	retlw	0
   183                           
   184                           	psect	cinit
   185     000C                     start_initialization:	
   186                           ; #config settings
   187                           
   188     000C                     __initialization:
   189                           
   190                           ; Initialize objects allocated to BANK0
   191     000C  2334               	fcall	__pidataBANK0	;fetch initializer
   192     000D  00BA               	movwf	__pdataBANK0& (0+127)
   193     000E  2335               	fcall	__pidataBANK0+1	;fetch initializer
   194     000F  00BB               	movwf	(__pdataBANK0+1)& (0+127)
   195     0010  2336               	fcall	__pidataBANK0+2	;fetch initializer
   196     0011  00BC               	movwf	(__pdataBANK0+2)& (0+127)
   197     0012  2337               	fcall	__pidataBANK0+3	;fetch initializer
   198     0013  00BD               	movwf	(__pdataBANK0+3)& (0+127)
   199     0014  2338               	fcall	__pidataBANK0+4	;fetch initializer
   200     0015  00BE               	movwf	(__pdataBANK0+4)& (0+127)
   201     0016  2339               	fcall	__pidataBANK0+5	;fetch initializer
   202     0017  00BF               	movwf	(__pdataBANK0+5)& (0+127)
   203     0018  233A               	fcall	__pidataBANK0+6	;fetch initializer
   204     0019  00C0               	movwf	(__pdataBANK0+6)& (0+127)
   205     001A  233B               	fcall	__pidataBANK0+7	;fetch initializer
   206     001B  00C1               	movwf	(__pdataBANK0+7)& (0+127)
   207                           
   208                           ; Clear objects allocated to BANK0
   209     001C  01C2               	clrf	__pbssBANK0& (0+127)
   210     001D  01C3               	clrf	(__pbssBANK0+1)& (0+127)
   211     001E  01C4               	clrf	(__pbssBANK0+2)& (0+127)
   212     001F  01C5               	clrf	(__pbssBANK0+3)& (0+127)
   213     0020                     end_of_initialization:	
   214                           ;End of C runtime variable initialization code
   215                           
   216     0020                     __end_of__initialization:
   217     0020  0183               	clrf	3
   218     0021  2822               	ljmp	_main	;jump to C main() function
   219                           
   220                           	psect	bssBANK0
   221     0042                     __pbssBANK0:
   222     0042                     _toggleHold:
   223     0042                     	ds	2
   224     0044                     _adcVal:
   225     0044                     	ds	2
   226                           
   227                           	psect	dataBANK0
   228     003A                     __pdataBANK0:
   229     003A                     welcomeMessage@F330:
   230     003A                     	ds	8
   231                           
   232                           	psect	cstackCOMMON
   233     0000                     __pcstackCOMMON:
   234     0000                     ??_strcpy:
   235     0000                     ??_Lcd_Write_Int:	
   236                           ; 1 bytes @ 0x0
   237                           
   238     0000                     ??_utoa:	
   239                           ; 1 bytes @ 0x0
   240                           
   241     0000                     ??_delay_1000ms:	
   242                           ; 1 bytes @ 0x0
   243                           
   244     0000                     ??_main:	
   245                           ; 1 bytes @ 0x0
   246                           
   247     0000                     ??_Lcd_Port:	
   248                           ; 1 bytes @ 0x0
   249                           
   250     0000                     ??___wmul:	
   251                           ; 1 bytes @ 0x0
   252                           
   253     0000                     ??___lwdiv:	
   254                           ; 1 bytes @ 0x0
   255                           
   256     0000                     ??___lwmod:	
   257                           ; 1 bytes @ 0x0
   258                           
   259                           
   260                           	psect	cstackBANK0
   261     000C                     __pcstackBANK0:	
   262                           ; 1 bytes @ 0x0
   263                           
   264     000C                     ?_Lcd_Clear:
   265     000C                     ?_Lcd_Write_String:	
   266                           ; 1 bytes @ 0x0
   267                           
   268     000C                     ?_Lcd_Init:	
   269                           ; 1 bytes @ 0x0
   270                           
   271     000C                     ?_Lcd_Write_Char:	
   272                           ; 1 bytes @ 0x0
   273                           
   274     000C                     ?_delay_100ms:	
   275                           ; 1 bytes @ 0x0
   276                           
   277     000C                     ?_delay_1000ms:	
   278                           ; 1 bytes @ 0x0
   279                           
   280     000C                     ?_isr:	
   281                           ; 1 bytes @ 0x0
   282                           
   283     000C                     ?_welcomeMessage:	
   284                           ; 1 bytes @ 0x0
   285                           
   286     000C                     ?_main:	
   287                           ; 1 bytes @ 0x0
   288                           
   289     000C                     ?_Lcd_Port:	
   290                           ; 1 bytes @ 0x0
   291                           
   292     000C                     ?_Lcd_Cmd:	
   293                           ; 1 bytes @ 0x0
   294                           
   295     000C                     ?i1_delay_100ms:	
   296                           ; 1 bytes @ 0x0
   297                           
   298     000C                     ??i1_delay_100ms:	
   299                           ; 1 bytes @ 0x0
   300                           
   301                           
   302                           ; 1 bytes @ 0x0
   303     000C                     	ds	2
   304     000E                     ??_isr:
   305                           
   306                           ; 1 bytes @ 0x2
   307     000E                     	ds	2
   308     0010                     ?_strcpy:
   309     0010                     ??_delay_100ms:	
   310                           ; 1 bytes @ 0x4
   311                           
   312     0010                     ?_readADC:	
   313                           ; 1 bytes @ 0x4
   314                           
   315     0010                     ?___lwmod:	
   316                           ; 2 bytes @ 0x4
   317                           
   318     0010                     Lcd_Port@a:	
   319                           ; 2 bytes @ 0x4
   320                           
   321     0010                     strcpy@from:	
   322                           ; 1 bytes @ 0x4
   323                           
   324     0010                     ___lwmod@divisor:	
   325                           ; 1 bytes @ 0x4
   326                           
   327                           
   328                           ; 2 bytes @ 0x4
   329     0010                     	ds	1
   330     0011                     ??_Lcd_Write_Char:
   331     0011                     ??_Lcd_Cmd:	
   332                           ; 1 bytes @ 0x5
   333                           
   334     0011                     strcpy@to:	
   335                           ; 1 bytes @ 0x5
   336                           
   337                           
   338                           ; 1 bytes @ 0x5
   339     0011                     	ds	1
   340     0012                     ??_readADC:
   341     0012                     Lcd_Write_Char@temp:	
   342                           ; 1 bytes @ 0x6
   343                           
   344     0012                     strcpy@cp:	
   345                           ; 1 bytes @ 0x6
   346                           
   347     0012                     delay_1000ms@i:	
   348                           ; 1 bytes @ 0x6
   349                           
   350     0012                     ___lwmod@dividend:	
   351                           ; 2 bytes @ 0x6
   352                           
   353                           
   354                           ; 2 bytes @ 0x6
   355     0012                     	ds	1
   356     0013                     Lcd_Cmd@a:
   357     0013                     Lcd_Write_Char@y:	
   358                           ; 1 bytes @ 0x7
   359                           
   360                           
   361                           ; 1 bytes @ 0x7
   362     0013                     	ds	1
   363     0014                     ??_Lcd_Clear:
   364     0014                     ?_Lcd_Set_Cursor:	
   365                           ; 1 bytes @ 0x8
   366                           
   367     0014                     ??_Lcd_Init:	
   368                           ; 1 bytes @ 0x8
   369                           
   370     0014                     Lcd_Set_Cursor@b:	
   371                           ; 1 bytes @ 0x8
   372                           
   373     0014                     Lcd_Write_Char@a:	
   374                           ; 1 bytes @ 0x8
   375                           
   376     0014                     ___lwmod@counter:	
   377                           ; 1 bytes @ 0x8
   378                           
   379     0014                     readADC@volt:	
   380                           ; 1 bytes @ 0x8
   381                           
   382                           
   383                           ; 2 bytes @ 0x8
   384     0014                     	ds	1
   385     0015                     ??_Lcd_Set_Cursor:
   386     0015                     ??_Lcd_Write_String:	
   387                           ; 1 bytes @ 0x9
   388                           
   389     0015                     ?___lwdiv:	
   390                           ; 1 bytes @ 0x9
   391                           
   392     0015                     ___lwdiv@divisor:	
   393                           ; 2 bytes @ 0x9
   394                           
   395                           
   396                           ; 2 bytes @ 0x9
   397     0015                     	ds	1
   398     0016                     Lcd_Set_Cursor@a:
   399     0016                     readADC@bits:	
   400                           ; 1 bytes @ 0xA
   401                           
   402     0016                     Lcd_Write_String@i:	
   403                           ; 1 bytes @ 0xA
   404                           
   405                           
   406                           ; 2 bytes @ 0xA
   407     0016                     	ds	1
   408     0017                     Lcd_Set_Cursor@z:
   409     0017                     readADC@rxData:	
   410                           ; 1 bytes @ 0xB
   411                           
   412     0017                     ___lwdiv@dividend:	
   413                           ; 1 bytes @ 0xB
   414                           
   415                           
   416                           ; 2 bytes @ 0xB
   417     0017                     	ds	1
   418     0018                     Lcd_Set_Cursor@y:
   419     0018                     Lcd_Write_String@a:	
   420                           ; 1 bytes @ 0xC
   421                           
   422                           
   423                           ; 1 bytes @ 0xC
   424     0018                     	ds	1
   425     0019                     Lcd_Set_Cursor@temp:
   426     0019                     ___lwdiv@quotient:	
   427                           ; 1 bytes @ 0xD
   428                           
   429                           
   430                           ; 2 bytes @ 0xD
   431     0019                     	ds	1
   432     001A                     ??_welcomeMessage:
   433                           
   434                           ; 1 bytes @ 0xE
   435     001A                     	ds	1
   436     001B                     ___lwdiv@counter:
   437                           
   438                           ; 1 bytes @ 0xF
   439     001B                     	ds	1
   440     001C                     ?_utoa:
   441     001C                     ?___wmul:	
   442                           ; 1 bytes @ 0x10
   443                           
   444     001C                     ___wmul@multiplier:	
   445                           ; 2 bytes @ 0x10
   446                           
   447     001C                     utoa@val:	
   448                           ; 2 bytes @ 0x10
   449                           
   450                           
   451                           ; 2 bytes @ 0x10
   452     001C                     	ds	2
   453     001E                     ___wmul@multiplicand:
   454     001E                     utoa@base:	
   455                           ; 2 bytes @ 0x12
   456                           
   457     001E                     welcomeMessage@msg:	
   458                           ; 2 bytes @ 0x12
   459                           
   460                           
   461                           ; 8 bytes @ 0x12
   462     001E                     	ds	2
   463     0020                     ___wmul@product:
   464     0020                     utoa@v:	
   465                           ; 2 bytes @ 0x14
   466                           
   467                           
   468                           ; 2 bytes @ 0x14
   469     0020                     	ds	2
   470     0022                     utoa@c:
   471                           
   472                           ; 1 bytes @ 0x16
   473     0022                     	ds	1
   474     0023                     utoa@buf:
   475                           
   476                           ; 1 bytes @ 0x17
   477     0023                     	ds	1
   478     0024                     ?_Lcd_Write_Int:
   479     0024                     Lcd_Write_Int@a:	
   480                           ; 1 bytes @ 0x18
   481                           
   482                           
   483                           ; 2 bytes @ 0x18
   484     0024                     	ds	2
   485     0026                     Lcd_Write_Int@temp:
   486                           
   487                           ; 16 bytes @ 0x1A
   488     0026                     	ds	16
   489     0036                     main@d1:
   490                           
   491                           ; 2 bytes @ 0x2A
   492     0036                     	ds	2
   493     0038                     main@d2:
   494                           
   495                           ; 2 bytes @ 0x2C
   496     0038                     	ds	2
   497                           
   498                           	psect	maintext
   499     0022                     __pmaintext:	
   500 ;;
   501 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   502 ;;
   503 ;; *************** function _main *****************
   504 ;; Defined at:
   505 ;;		line 71 in file "main.c"
   506 ;; Parameters:    Size  Location     Type
   507 ;;		None
   508 ;; Auto vars:     Size  Location     Type
   509 ;;  d2              2   44[BANK0 ] unsigned short 
   510 ;;  d1              2   42[BANK0 ] unsigned short 
   511 ;; Return value:  Size  Location     Type
   512 ;;                  1    wreg      void 
   513 ;; Registers used:
   514 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   515 ;; Tracked objects:
   516 ;;		On entry : B00/0
   517 ;;		On exit  : 0/0
   518 ;;		Unchanged: 0/0
   519 ;; Data sizes:     COMMON   BANK0
   520 ;;      Params:         0       0
   521 ;;      Locals:         0       4
   522 ;;      Temps:          0       0
   523 ;;      Totals:         0       4
   524 ;;Total ram usage:        4 bytes
   525 ;; Hardware stack levels required when called: 6
   526 ;; This function calls:
   527 ;;		_Lcd_Clear
   528 ;;		_Lcd_Init
   529 ;;		_Lcd_Set_Cursor
   530 ;;		_Lcd_Write_Char
   531 ;;		_Lcd_Write_Int
   532 ;;		___lwdiv
   533 ;;		___lwmod
   534 ;;		___wmul
   535 ;;		_delay_100ms
   536 ;;		_readADC
   537 ;;		_welcomeMessage
   538 ;; This function is called by:
   539 ;;		Startup code after reset
   540 ;; This function uses a non-reentrant model
   541 ;;
   542                           
   543     0022                     _main:	
   544                           ;psect for function _main
   545                           
   546                           
   547                           ;main.c: 73:     TRISB = 0b01000001;
   548                           
   549                           ;incstack = 0
   550                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   551     0022  3041               	movlw	65
   552     0023  1683               	bsf	3,5	;RP0=1, select bank1
   553     0024  0086               	movwf	6	;volatile
   554                           
   555                           ;main.c: 74:     TRISA = 0b00000;
   556     0025  0185               	clrf	5	;volatile
   557                           
   558                           ;main.c: 76:     RB7 = 1;
   559     0026  1283               	bcf	3,5	;RP0=0, select bank0
   560     0027  1786               	bsf	6,7	;volatile
   561                           
   562                           ;main.c: 77:     RB5 = 0;
   563     0028  1286               	bcf	6,5	;volatile
   564                           
   565                           ;main.c: 79:     RA1 = 0;
   566     0029  1085               	bcf	5,1	;volatile
   567                           
   568                           ;main.c: 83:     OPTION_REGbits.INTEDG = 1;
   569     002A  1683               	bsf	3,5	;RP0=1, select bank1
   570     002B  1701               	bsf	1,6	;volatile
   571                           
   572                           ;main.c: 85:     INTCONbits.INTE = 1;
   573     002C  160B               	bsf	11,4	;volatile
   574                           
   575                           ;main.c: 87:     INTCONbits.GIE = 1;
   576     002D  178B               	bsf	11,7	;volatile
   577                           
   578                           ;main.c: 89:     Lcd_Init();
   579     002E  21DA               	fcall	_Lcd_Init
   580                           
   581                           ;main.c: 90:     welcomeMessage();
   582     002F  220B               	fcall	_welcomeMessage
   583     0030                     l1398:
   584                           
   585                           ;main.c: 94:         while(toggleHold){
   586     0030  1283               	bcf	3,5	;RP0=0, select bank0
   587     0031  0842               	movf	_toggleHold,w
   588     0032  0443               	iorwf	_toggleHold+1,w
   589     0033  1903               	btfsc	3,2
   590     0034  284E               	goto	l1400
   591                           
   592                           ;main.c: 95:             Lcd_Set_Cursor(1, 1);
   593     0035  0194               	clrf	Lcd_Set_Cursor@b
   594     0036  0A94               	incf	Lcd_Set_Cursor@b,f
   595     0037  3001               	movlw	1
   596     0038  2176               	fcall	_Lcd_Set_Cursor
   597                           
   598                           ;main.c: 96:             Lcd_Write_Int(d1);
   599     0039  0837               	movf	main@d1+1,w
   600     003A  00A5               	movwf	Lcd_Write_Int@a+1
   601     003B  0836               	movf	main@d1,w
   602     003C  00A4               	movwf	Lcd_Write_Int@a
   603     003D  22FB               	fcall	_Lcd_Write_Int
   604                           
   605                           ;main.c: 97:             Lcd_Set_Cursor(1, 2);
   606     003E  3002               	movlw	2
   607     003F  0094               	movwf	Lcd_Set_Cursor@b
   608     0040  3001               	movlw	1
   609     0041  2176               	fcall	_Lcd_Set_Cursor
   610                           
   611                           ;main.c: 98:             Lcd_Write_Char('.');
   612     0042  302E               	movlw	46
   613     0043  2238               	fcall	_Lcd_Write_Char
   614                           
   615                           ;main.c: 99:             Lcd_Set_Cursor(1, 3);
   616     0044  3003               	movlw	3
   617     0045  0094               	movwf	Lcd_Set_Cursor@b
   618     0046  3001               	movlw	1
   619     0047  2176               	fcall	_Lcd_Set_Cursor
   620                           
   621                           ;main.c: 100:             Lcd_Write_Int(d2);
   622     0048  0839               	movf	main@d2+1,w
   623     0049  00A5               	movwf	Lcd_Write_Int@a+1
   624     004A  0838               	movf	main@d2,w
   625     004B  00A4               	movwf	Lcd_Write_Int@a
   626     004C  22FB               	fcall	_Lcd_Write_Int
   627     004D  2830               	goto	l1398
   628     004E                     l1400:
   629                           
   630                           ;main.c: 105:         adcVal = readADC();
   631     004E  20EF               	fcall	_readADC
   632     004F  0811               	movf	?_readADC+1,w
   633     0050  00C5               	movwf	_adcVal+1
   634     0051  0810               	movf	?_readADC,w
   635     0052  00C4               	movwf	_adcVal
   636                           
   637                           ;main.c: 110:         d1 = adcVal / 204;
   638     0053  30CC               	movlw	204
   639     0054  0095               	movwf	___lwdiv@divisor
   640     0055  3000               	movlw	0
   641     0056  0096               	movwf	___lwdiv@divisor+1
   642     0057  0845               	movf	_adcVal+1,w
   643     0058  0098               	movwf	___lwdiv@dividend+1
   644     0059  0844               	movf	_adcVal,w
   645     005A  0097               	movwf	___lwdiv@dividend
   646     005B  213A               	fcall	___lwdiv
   647     005C  0816               	movf	?___lwdiv+1,w
   648     005D  00B7               	movwf	main@d1+1
   649     005E  0815               	movf	?___lwdiv,w
   650     005F  00B6               	movwf	main@d1
   651                           
   652                           ;main.c: 111:         d2= ((adcVal % 204)/51) *25;
   653     0060  3033               	movlw	51
   654     0061  0095               	movwf	___lwdiv@divisor
   655     0062  3000               	movlw	0
   656     0063  0096               	movwf	___lwdiv@divisor+1
   657     0064  0845               	movf	_adcVal+1,w
   658     0065  0093               	movwf	___lwmod@dividend+1
   659     0066  0844               	movf	_adcVal,w
   660     0067  0092               	movwf	___lwmod@dividend
   661     0068  30CC               	movlw	204
   662     0069  0090               	movwf	___lwmod@divisor
   663     006A  3000               	movlw	0
   664     006B  0091               	movwf	___lwmod@divisor+1
   665     006C  21A8               	fcall	___lwmod
   666     006D  0811               	movf	?___lwmod+1,w
   667     006E  0098               	movwf	___lwdiv@dividend+1
   668     006F  0810               	movf	?___lwmod,w
   669     0070  0097               	movwf	___lwdiv@dividend
   670     0071  213A               	fcall	___lwdiv
   671     0072  0816               	movf	?___lwdiv+1,w
   672     0073  009D               	movwf	___wmul@multiplier+1
   673     0074  0815               	movf	?___lwdiv,w
   674     0075  009C               	movwf	___wmul@multiplier
   675     0076  3019               	movlw	25
   676     0077  009E               	movwf	___wmul@multiplicand
   677     0078  3000               	movlw	0
   678     0079  009F               	movwf	___wmul@multiplicand+1
   679     007A  225B               	fcall	___wmul
   680     007B  081D               	movf	?___wmul+1,w
   681     007C  00B9               	movwf	main@d2+1
   682     007D  081C               	movf	?___wmul,w
   683     007E  00B8               	movwf	main@d2
   684                           
   685                           ;main.c: 116:         Lcd_Clear();
   686     007F  22ED               	fcall	_Lcd_Clear
   687                           
   688                           ;main.c: 117:         Lcd_Set_Cursor(1, 1);
   689     0080  1283               	bcf	3,5	;RP0=0, select bank0
   690     0081  0194               	clrf	Lcd_Set_Cursor@b
   691     0082  0A94               	incf	Lcd_Set_Cursor@b,f
   692     0083  3001               	movlw	1
   693     0084  2176               	fcall	_Lcd_Set_Cursor
   694                           
   695                           ;main.c: 118:         Lcd_Write_Int(d1);
   696     0085  0837               	movf	main@d1+1,w
   697     0086  00A5               	movwf	Lcd_Write_Int@a+1
   698     0087  0836               	movf	main@d1,w
   699     0088  00A4               	movwf	Lcd_Write_Int@a
   700     0089  22FB               	fcall	_Lcd_Write_Int
   701                           
   702                           ;main.c: 119:         Lcd_Set_Cursor(1, 2);
   703     008A  3002               	movlw	2
   704     008B  0094               	movwf	Lcd_Set_Cursor@b
   705     008C  3001               	movlw	1
   706     008D  2176               	fcall	_Lcd_Set_Cursor
   707                           
   708                           ;main.c: 120:         Lcd_Write_Char('.');
   709     008E  302E               	movlw	46
   710     008F  2238               	fcall	_Lcd_Write_Char
   711                           
   712                           ;main.c: 121:         Lcd_Set_Cursor(1, 3);
   713     0090  3003               	movlw	3
   714     0091  0094               	movwf	Lcd_Set_Cursor@b
   715     0092  3001               	movlw	1
   716     0093  2176               	fcall	_Lcd_Set_Cursor
   717                           
   718                           ;main.c: 122:         Lcd_Write_Int(d2);
   719     0094  0839               	movf	main@d2+1,w
   720     0095  00A5               	movwf	Lcd_Write_Int@a+1
   721     0096  0838               	movf	main@d2,w
   722     0097  00A4               	movwf	Lcd_Write_Int@a
   723     0098  22FB               	fcall	_Lcd_Write_Int
   724                           
   725                           ;main.c: 126:         delay_100ms();
   726     0099  231F               	fcall	_delay_100ms
   727     009A  2830               	goto	l1398
   728     009B                     __end_of_main:
   729                           
   730                           	psect	text1
   731     020B                     __ptext1:	
   732 ;; *************** function _welcomeMessage *****************
   733 ;; Defined at:
   734 ;;		line 49 in file "main.c"
   735 ;; Parameters:    Size  Location     Type
   736 ;;		None
   737 ;; Auto vars:     Size  Location     Type
   738 ;;  msg             8   18[BANK0 ] unsigned char [8]
   739 ;; Return value:  Size  Location     Type
   740 ;;                  1    wreg      void 
   741 ;; Registers used:
   742 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   743 ;; Tracked objects:
   744 ;;		On entry : 100/0
   745 ;;		On exit  : 0/0
   746 ;;		Unchanged: 0/0
   747 ;; Data sizes:     COMMON   BANK0
   748 ;;      Params:         0       0
   749 ;;      Locals:         0       8
   750 ;;      Temps:          0       4
   751 ;;      Totals:         0      12
   752 ;;Total ram usage:       12 bytes
   753 ;; Hardware stack levels used: 1
   754 ;; Hardware stack levels required when called: 5
   755 ;; This function calls:
   756 ;;		_Lcd_Clear
   757 ;;		_Lcd_Set_Cursor
   758 ;;		_Lcd_Write_String
   759 ;;		_delay_1000ms
   760 ;;		_strcpy
   761 ;; This function is called by:
   762 ;;		_main
   763 ;; This function uses a non-reentrant model
   764 ;;
   765                           
   766     020B                     _welcomeMessage:	
   767                           ;psect for function _welcomeMessage
   768                           
   769                           
   770                           ;main.c: 51:     char msg[] = "Welcome";
   771                           
   772                           ;incstack = 0
   773                           ; Regs used in _welcomeMessage: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   774     020B  301E               	movlw	welcomeMessage@msg& (0+255)
   775     020C  0084               	movwf	4
   776     020D  303A               	movlw	low welcomeMessage@F330
   777     020E  009A               	movwf	??_welcomeMessage
   778     020F  0804               	movf	4,w
   779     0210  009B               	movwf	??_welcomeMessage+1
   780     0211  3008               	movlw	8
   781     0212  009C               	movwf	??_welcomeMessage+2
   782     0213                     u660:
   783     0213  081A               	movf	??_welcomeMessage,w
   784     0214  0084               	movwf	4
   785     0215  1383               	bcf	3,7	;select IRP bank0
   786     0216  0800               	movf	0,w
   787     0217  009D               	movwf	??_welcomeMessage+3
   788     0218  0A9A               	incf	??_welcomeMessage,f
   789     0219  081B               	movf	??_welcomeMessage+1,w
   790     021A  0084               	movwf	4
   791     021B  081D               	movf	??_welcomeMessage+3,w
   792     021C  0080               	movwf	0
   793     021D  0A9B               	incf	??_welcomeMessage+1,f
   794     021E  0B9C               	decfsz	??_welcomeMessage+2,f
   795     021F  2A13               	goto	u660
   796                           
   797                           ;main.c: 52:     Lcd_Clear();
   798     0220  22ED               	fcall	_Lcd_Clear
   799                           
   800                           ;main.c: 53:     Lcd_Set_Cursor(1, 1);
   801     0221  1283               	bcf	3,5	;RP0=0, select bank0
   802     0222  0194               	clrf	Lcd_Set_Cursor@b
   803     0223  0A94               	incf	Lcd_Set_Cursor@b,f
   804     0224  3001               	movlw	1
   805     0225  2176               	fcall	_Lcd_Set_Cursor
   806                           
   807                           ;main.c: 54:     Lcd_Write_String(msg);
   808     0226  301E               	movlw	(low (welcomeMessage@msg| 0))& (0+255)
   809     0227  227C               	fcall	_Lcd_Write_String
   810                           
   811                           ;main.c: 55:     delay_1000ms();
   812     0228  22C5               	fcall	_delay_1000ms
   813                           
   814                           ;main.c: 56:     Lcd_Clear();
   815     0229  22ED               	fcall	_Lcd_Clear
   816                           
   817                           ;main.c: 57:     Lcd_Set_Cursor(1, 1);
   818     022A  1283               	bcf	3,5	;RP0=0, select bank0
   819     022B  0194               	clrf	Lcd_Set_Cursor@b
   820     022C  0A94               	incf	Lcd_Set_Cursor@b,f
   821     022D  3001               	movlw	1
   822     022E  2176               	fcall	_Lcd_Set_Cursor
   823                           
   824                           ;main.c: 58:     strcpy(msg, "0-5V");
   825     022F  3001               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   826     0230  0090               	movwf	strcpy@from
   827     0231  301E               	movlw	(low (welcomeMessage@msg| 0))& (0+255)
   828     0232  2296               	fcall	_strcpy
   829                           
   830                           ;main.c: 60:     Lcd_Write_String(msg);
   831     0233  301E               	movlw	(low (welcomeMessage@msg| 0))& (0+255)
   832     0234  227C               	fcall	_Lcd_Write_String
   833                           
   834                           ;main.c: 61:     delay_1000ms();
   835     0235  22C5               	fcall	_delay_1000ms
   836                           
   837                           ;main.c: 64:     Lcd_Clear();
   838     0236  22ED               	fcall	_Lcd_Clear
   839     0237  0008               	return
   840     0238                     __end_of_welcomeMessage:
   841                           
   842                           	psect	text2
   843     0296                     __ptext2:	
   844 ;; *************** function _strcpy *****************
   845 ;; Defined at:
   846 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\strcpy.c"
   847 ;; Parameters:    Size  Location     Type
   848 ;;  to              1    wreg     PTR unsigned char 
   849 ;;		 -> welcomeMessage@msg(8), 
   850 ;;  from            1    4[BANK0 ] PTR const unsigned char 
   851 ;;		 -> STR_1(5), 
   852 ;; Auto vars:     Size  Location     Type
   853 ;;  to              1    5[BANK0 ] PTR unsigned char 
   854 ;;		 -> welcomeMessage@msg(8), 
   855 ;;  cp              1    6[BANK0 ] PTR unsigned char 
   856 ;;		 -> welcomeMessage@msg(8), 
   857 ;; Return value:  Size  Location     Type
   858 ;;                  1    wreg      PTR unsigned char 
   859 ;; Registers used:
   860 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath
   861 ;; Tracked objects:
   862 ;;		On entry : 100/0
   863 ;;		On exit  : 900/0
   864 ;;		Unchanged: 0/0
   865 ;; Data sizes:     COMMON   BANK0
   866 ;;      Params:         0       1
   867 ;;      Locals:         0       2
   868 ;;      Temps:          0       0
   869 ;;      Totals:         0       3
   870 ;;Total ram usage:        3 bytes
   871 ;; Hardware stack levels used: 1
   872 ;; Hardware stack levels required when called: 2
   873 ;; This function calls:
   874 ;;		Nothing
   875 ;; This function is called by:
   876 ;;		_welcomeMessage
   877 ;; This function uses a non-reentrant model
   878 ;;
   879                           
   880     0296                     _strcpy:	
   881                           ;psect for function _strcpy
   882                           
   883                           
   884                           ;incstack = 0
   885                           ; Regs used in _strcpy: [wreg-fsr0h+status,2+status,0+btemp+1+pclath]
   886                           ;strcpy@to stored from wreg
   887     0296  0091               	movwf	strcpy@to
   888     0297  0811               	movf	strcpy@to,w
   889     0298  0092               	movwf	strcpy@cp
   890     0299                     l1226:
   891     0299  0810               	movf	strcpy@from,w
   892     029A  0084               	movwf	4
   893     029B  2314               	fcall	stringdir
   894     029C  00CF               	movwf	79
   895     029D  0812               	movf	strcpy@cp,w
   896     029E  0084               	movwf	4
   897     029F  084F               	movf	79,w
   898     02A0  1383               	bcf	3,7	;select IRP bank0
   899     02A1  0080               	movwf	0
   900     02A2  0800               	movf	0,w
   901     02A3  1903               	btfsc	3,2
   902     02A4  0008               	return
   903     02A5  3001               	movlw	1
   904     02A6  00CF               	movwf	79
   905     02A7  084F               	movf	79,w
   906     02A8  0792               	addwf	strcpy@cp,f
   907     02A9  3001               	movlw	1
   908     02AA  00CF               	movwf	79
   909     02AB  084F               	movf	79,w
   910     02AC  0790               	addwf	strcpy@from,f
   911     02AD  2A99               	goto	l1226
   912     02AE                     __end_of_strcpy:
   913                           
   914                           	psect	text3
   915     02C5                     __ptext3:	
   916 ;; *************** function _delay_1000ms *****************
   917 ;; Defined at:
   918 ;;		line 28 in file "main.c"
   919 ;; Parameters:    Size  Location     Type
   920 ;;		None
   921 ;; Auto vars:     Size  Location     Type
   922 ;;  i               2    6[BANK0 ] int 
   923 ;; Return value:  Size  Location     Type
   924 ;;                  1    wreg      void 
   925 ;; Registers used:
   926 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
   927 ;; Tracked objects:
   928 ;;		On entry : 900/0
   929 ;;		On exit  : 0/0
   930 ;;		Unchanged: 0/0
   931 ;; Data sizes:     COMMON   BANK0
   932 ;;      Params:         0       0
   933 ;;      Locals:         0       2
   934 ;;      Temps:          0       0
   935 ;;      Totals:         0       2
   936 ;;Total ram usage:        2 bytes
   937 ;; Hardware stack levels used: 1
   938 ;; Hardware stack levels required when called: 3
   939 ;; This function calls:
   940 ;;		_delay_100ms
   941 ;; This function is called by:
   942 ;;		_welcomeMessage
   943 ;; This function uses a non-reentrant model
   944 ;;
   945                           
   946     02C5                     _delay_1000ms:	
   947                           ;psect for function _delay_1000ms
   948                           
   949                           
   950                           ;main.c: 29:     for (int i = 0; i < 20; i++) {
   951                           
   952                           ;incstack = 0
   953                           ; Regs used in _delay_1000ms: [wreg+status,2+status,0+btemp+1+pclath+cstack]
   954     02C5  0192               	clrf	delay_1000ms@i
   955     02C6  0193               	clrf	delay_1000ms@i+1
   956     02C7                     l1184:
   957                           
   958                           ;main.c: 30:         delay_100ms();
   959     02C7  231F               	fcall	_delay_100ms
   960                           
   961                           ;main.c: 31:     }
   962     02C8  3001               	movlw	1
   963     02C9  1283               	bcf	3,5	;RP0=0, select bank0
   964     02CA  0792               	addwf	delay_1000ms@i,f
   965     02CB  1803               	skipnc
   966     02CC  0A93               	incf	delay_1000ms@i+1,f
   967     02CD  3000               	movlw	0
   968     02CE  0793               	addwf	delay_1000ms@i+1,f
   969     02CF  0813               	movf	delay_1000ms@i+1,w
   970     02D0  3A80               	xorlw	128
   971     02D1  00CF               	movwf	79
   972     02D2  3080               	movlw	128
   973     02D3  024F               	subwf	79,w
   974     02D4  1D03               	skipz
   975     02D5  2AD8               	goto	u565
   976     02D6  3014               	movlw	20
   977     02D7  0212               	subwf	delay_1000ms@i,w
   978     02D8                     u565:
   979     02D8  1803               	btfsc	3,0
   980     02D9  0008               	return
   981     02DA  2AC7               	goto	l1184
   982     02DB                     __end_of_delay_1000ms:
   983                           
   984                           	psect	text4
   985     031F                     __ptext4:	
   986 ;; *************** function _delay_100ms *****************
   987 ;; Defined at:
   988 ;;		line 24 in file "main.c"
   989 ;; Parameters:    Size  Location     Type
   990 ;;		None
   991 ;; Auto vars:     Size  Location     Type
   992 ;;		None
   993 ;; Return value:  Size  Location     Type
   994 ;;                  1    wreg      void 
   995 ;; Registers used:
   996 ;;		wreg
   997 ;; Tracked objects:
   998 ;;		On entry : 0/0
   999 ;;		On exit  : 0/0
  1000 ;;		Unchanged: 0/0
  1001 ;; Data sizes:     COMMON   BANK0
  1002 ;;      Params:         0       0
  1003 ;;      Locals:         0       0
  1004 ;;      Temps:          0       2
  1005 ;;      Totals:         0       2
  1006 ;;Total ram usage:        2 bytes
  1007 ;; Hardware stack levels used: 1
  1008 ;; Hardware stack levels required when called: 2
  1009 ;; This function calls:
  1010 ;;		Nothing
  1011 ;; This function is called by:
  1012 ;;		_delay_1000ms
  1013 ;;		_main
  1014 ;; This function uses a non-reentrant model
  1015 ;;
  1016                           
  1017     031F                     _delay_100ms:	
  1018                           ;psect for function _delay_100ms
  1019                           
  1020                           
  1021                           ;main.c: 25:     _delay((unsigned long)((100)*(4000000/4000.0)));
  1022                           
  1023                           ;incstack = 0
  1024                           ; Regs used in _delay_100ms: [wreg]
  1025     031F  3082               	movlw	130
  1026     0320  1283               	bcf	3,5	;RP0=0, select bank0
  1027     0321  0091               	movwf	??_delay_100ms+1
  1028     0322  30DD               	movlw	221
  1029     0323  0090               	movwf	??_delay_100ms
  1030     0324                     u757:
  1031     0324  0B90               	decfsz	??_delay_100ms,f
  1032     0325  2B24               	goto	u757
  1033     0326  0B91               	decfsz	??_delay_100ms+1,f
  1034     0327  2B24               	goto	u757
  1035     0328  2B29               	nop2
  1036     0329  0008               	return
  1037     032A                     __end_of_delay_100ms:
  1038                           
  1039                           	psect	text5
  1040     0176                     __ptext5:	
  1041 ;; *************** function _Lcd_Set_Cursor *****************
  1042 ;; Defined at:
  1043 ;;		line 52 in file "lcd.c"
  1044 ;; Parameters:    Size  Location     Type
  1045 ;;  a               1    wreg     unsigned char 
  1046 ;;  b               1    8[BANK0 ] unsigned char 
  1047 ;; Auto vars:     Size  Location     Type
  1048 ;;  a               1   10[BANK0 ] unsigned char 
  1049 ;;  temp            1   13[BANK0 ] unsigned char 
  1050 ;;  y               1   12[BANK0 ] unsigned char 
  1051 ;;  z               1   11[BANK0 ] unsigned char 
  1052 ;; Return value:  Size  Location     Type
  1053 ;;                  1    wreg      void 
  1054 ;; Registers used:
  1055 ;;		wreg, status,2, status,0, pclath, cstack
  1056 ;; Tracked objects:
  1057 ;;		On entry : 100/0
  1058 ;;		On exit  : 100/0
  1059 ;;		Unchanged: 0/0
  1060 ;; Data sizes:     COMMON   BANK0
  1061 ;;      Params:         0       1
  1062 ;;      Locals:         0       4
  1063 ;;      Temps:          0       1
  1064 ;;      Totals:         0       6
  1065 ;;Total ram usage:        6 bytes
  1066 ;; Hardware stack levels used: 1
  1067 ;; Hardware stack levels required when called: 4
  1068 ;; This function calls:
  1069 ;;		_Lcd_Cmd
  1070 ;; This function is called by:
  1071 ;;		_welcomeMessage
  1072 ;;		_main
  1073 ;; This function uses a non-reentrant model
  1074 ;;
  1075                           
  1076     0176                     _Lcd_Set_Cursor:	
  1077                           ;psect for function _Lcd_Set_Cursor
  1078                           
  1079                           
  1080                           ;incstack = 0
  1081                           ; Regs used in _Lcd_Set_Cursor: [wreg+status,2+status,0+pclath+cstack]
  1082                           ;Lcd_Set_Cursor@a stored from wreg
  1083     0176  0096               	movwf	Lcd_Set_Cursor@a
  1084                           
  1085                           ;lcd.c: 52: void Lcd_Set_Cursor(char a, char b);lcd.c: 53: {;lcd.c: 54:  char temp,z,y;;
      +                          lcd.c: 55:  if(a == 1)
  1086     0177  0316               	decf	Lcd_Set_Cursor@a,w
  1087     0178  1D03               	btfss	3,2
  1088     0179  298F               	goto	l1204
  1089                           
  1090                           ;lcd.c: 56:  {;lcd.c: 57:    temp = (char) (0x80 + b - 1);
  1091     017A  0814               	movf	Lcd_Set_Cursor@b,w
  1092     017B  3E7F               	addlw	127
  1093     017C  0099               	movwf	Lcd_Set_Cursor@temp
  1094                           
  1095                           ;lcd.c: 58:   z = temp>>4;
  1096     017D  0819               	movf	Lcd_Set_Cursor@temp,w
  1097     017E  0095               	movwf	??_Lcd_Set_Cursor
  1098     017F  3004               	movlw	4
  1099     0180                     u585:
  1100     0180  1003               	clrc
  1101     0181  0C95               	rrf	??_Lcd_Set_Cursor,f
  1102     0182  3EFF               	addlw	-1
  1103     0183  1D03               	skipz
  1104     0184  2980               	goto	u585
  1105     0185  0815               	movf	??_Lcd_Set_Cursor,w
  1106     0186  0097               	movwf	Lcd_Set_Cursor@z
  1107                           
  1108                           ;lcd.c: 59:   y = temp & 0x0F;
  1109     0187  0819               	movf	Lcd_Set_Cursor@temp,w
  1110     0188  390F               	andlw	15
  1111     0189  0098               	movwf	Lcd_Set_Cursor@y
  1112                           
  1113                           ;lcd.c: 60:   Lcd_Cmd(z);
  1114     018A  0817               	movf	Lcd_Set_Cursor@z,w
  1115     018B  22DB               	fcall	_Lcd_Cmd
  1116                           
  1117                           ;lcd.c: 61:   Lcd_Cmd(y);
  1118     018C  0818               	movf	Lcd_Set_Cursor@y,w
  1119     018D  22DB               	fcall	_Lcd_Cmd
  1120                           
  1121                           ;lcd.c: 62:  }
  1122     018E  0008               	return
  1123     018F                     l1204:
  1124     018F  3002               	movlw	2
  1125     0190  0616               	xorwf	Lcd_Set_Cursor@a,w
  1126     0191  1D03               	btfss	3,2
  1127     0192  0008               	return
  1128                           
  1129                           ;lcd.c: 64:  {;lcd.c: 65:   temp = 0xC0 + b - 1;
  1130     0193  0814               	movf	Lcd_Set_Cursor@b,w
  1131     0194  3EBF               	addlw	191
  1132     0195  0099               	movwf	Lcd_Set_Cursor@temp
  1133                           
  1134                           ;lcd.c: 66:   z = temp>>4;
  1135     0196  0819               	movf	Lcd_Set_Cursor@temp,w
  1136     0197  0095               	movwf	??_Lcd_Set_Cursor
  1137     0198  3004               	movlw	4
  1138     0199                     u605:
  1139     0199  1003               	clrc
  1140     019A  0C95               	rrf	??_Lcd_Set_Cursor,f
  1141     019B  3EFF               	addlw	-1
  1142     019C  1D03               	skipz
  1143     019D  2999               	goto	u605
  1144     019E  0815               	movf	??_Lcd_Set_Cursor,w
  1145     019F  0097               	movwf	Lcd_Set_Cursor@z
  1146                           
  1147                           ;lcd.c: 67:   y = temp & 0x0F;
  1148     01A0  0819               	movf	Lcd_Set_Cursor@temp,w
  1149     01A1  390F               	andlw	15
  1150     01A2  0098               	movwf	Lcd_Set_Cursor@y
  1151                           
  1152                           ;lcd.c: 68:   Lcd_Cmd(z);
  1153     01A3  0817               	movf	Lcd_Set_Cursor@z,w
  1154     01A4  22DB               	fcall	_Lcd_Cmd
  1155                           
  1156                           ;lcd.c: 69:   Lcd_Cmd(y);
  1157     01A5  0818               	movf	Lcd_Set_Cursor@y,w
  1158     01A6  22DB               	fcall	_Lcd_Cmd
  1159     01A7  0008               	return
  1160     01A8                     __end_of_Lcd_Set_Cursor:
  1161                           
  1162                           	psect	text6
  1163     02ED                     __ptext6:	
  1164 ;; *************** function _Lcd_Clear *****************
  1165 ;; Defined at:
  1166 ;;		line 44 in file "lcd.c"
  1167 ;; Parameters:    Size  Location     Type
  1168 ;;		None
  1169 ;; Auto vars:     Size  Location     Type
  1170 ;;		None
  1171 ;; Return value:  Size  Location     Type
  1172 ;;                  1    wreg      void 
  1173 ;; Registers used:
  1174 ;;		wreg, status,2, status,0, pclath, cstack
  1175 ;; Tracked objects:
  1176 ;;		On entry : 0/0
  1177 ;;		On exit  : 0/0
  1178 ;;		Unchanged: 0/0
  1179 ;; Data sizes:     COMMON   BANK0
  1180 ;;      Params:         0       0
  1181 ;;      Locals:         0       0
  1182 ;;      Temps:          0       2
  1183 ;;      Totals:         0       2
  1184 ;;Total ram usage:        2 bytes
  1185 ;; Hardware stack levels used: 1
  1186 ;; Hardware stack levels required when called: 4
  1187 ;; This function calls:
  1188 ;;		_Lcd_Cmd
  1189 ;; This function is called by:
  1190 ;;		_welcomeMessage
  1191 ;;		_main
  1192 ;; This function uses a non-reentrant model
  1193 ;;
  1194                           
  1195     02ED                     _Lcd_Clear:	
  1196                           ;psect for function _Lcd_Clear
  1197                           
  1198                           
  1199                           ;lcd.c: 46:  Lcd_Cmd(0x00);
  1200                           
  1201                           ;incstack = 0
  1202                           ; Regs used in _Lcd_Clear: [wreg+status,2+status,0+pclath+cstack]
  1203     02ED  3000               	movlw	0
  1204     02EE  22DB               	fcall	_Lcd_Cmd
  1205                           
  1206                           ;lcd.c: 47:  Lcd_Cmd(0x01);
  1207     02EF  3001               	movlw	1
  1208     02F0  22DB               	fcall	_Lcd_Cmd
  1209                           
  1210                           ;lcd.c: 48:     _delay((unsigned long)((2)*(4000000/4000.0)));
  1211     02F1  3003               	movlw	3
  1212     02F2  0095               	movwf	??_Lcd_Clear+1
  1213     02F3  3097               	movlw	151
  1214     02F4  0094               	movwf	??_Lcd_Clear
  1215     02F5                     u767:
  1216     02F5  0B94               	decfsz	??_Lcd_Clear,f
  1217     02F6  2AF5               	goto	u767
  1218     02F7  0B95               	decfsz	??_Lcd_Clear+1,f
  1219     02F8  2AF5               	goto	u767
  1220     02F9  2AFA               	nop2
  1221     02FA  0008               	return
  1222     02FB                     __end_of_Lcd_Clear:
  1223                           
  1224                           	psect	text7
  1225     00EF                     __ptext7:	
  1226 ;; *************** function _readADC *****************
  1227 ;; Defined at:
  1228 ;;		line 6 in file "adc.c"
  1229 ;; Parameters:    Size  Location     Type
  1230 ;;		None
  1231 ;; Auto vars:     Size  Location     Type
  1232 ;;  volt            2    8[BANK0 ] unsigned int 
  1233 ;;  rxData          1   11[BANK0 ] unsigned char 
  1234 ;;  bits            1   10[BANK0 ] unsigned char 
  1235 ;; Return value:  Size  Location     Type
  1236 ;;                  2    4[BANK0 ] unsigned int 
  1237 ;; Registers used:
  1238 ;;		wreg, status,2, status,0, btemp+1
  1239 ;; Tracked objects:
  1240 ;;		On entry : 100/0
  1241 ;;		On exit  : 100/0
  1242 ;;		Unchanged: 0/0
  1243 ;; Data sizes:     COMMON   BANK0
  1244 ;;      Params:         0       2
  1245 ;;      Locals:         0       4
  1246 ;;      Temps:          0       2
  1247 ;;      Totals:         0       8
  1248 ;;Total ram usage:        8 bytes
  1249 ;; Hardware stack levels used: 1
  1250 ;; Hardware stack levels required when called: 2
  1251 ;; This function calls:
  1252 ;;		Nothing
  1253 ;; This function is called by:
  1254 ;;		_main
  1255 ;; This function uses a non-reentrant model
  1256 ;;
  1257                           
  1258     00EF                     _readADC:	
  1259                           ;psect for function _readADC
  1260                           
  1261                           
  1262                           ;adc.c: 8:   unsigned char bits;;adc.c: 9:   unsigned char rxData = 0;
  1263                           
  1264                           ;incstack = 0
  1265                           ; Regs used in _readADC: [wreg+status,2+status,0+btemp+1]
  1266     00EF  0197               	clrf	readADC@rxData
  1267                           
  1268                           ;adc.c: 12:   RB7 = 0;
  1269     00F0  1386               	bcf	6,7	;volatile
  1270                           
  1271                           ;adc.c: 15:   for (bits = 0; bits < 3; bits++)
  1272     00F1  0196               	clrf	readADC@bits
  1273     00F2                     l1302:
  1274                           
  1275                           ;adc.c: 16:   {;adc.c: 17:       _delay((unsigned long)((100)*(4000000/4000000.0)));
  1276     00F2  3021               	movlw	33
  1277     00F3  0092               	movwf	??_readADC
  1278     00F4                     u777:
  1279     00F4  0B92               	decfsz	??_readADC,f
  1280     00F5  28F4               	goto	u777
  1281                           
  1282                           ;adc.c: 18:       RB5 = 1;
  1283     00F6  1283               	bcf	3,5	;RP0=0, select bank0
  1284     00F7  1686               	bsf	6,5	;volatile
  1285                           
  1286                           ;adc.c: 19:       _delay((unsigned long)((100)*(4000000/4000000.0)));
  1287     00F8  3021               	movlw	33
  1288     00F9  0092               	movwf	??_readADC
  1289     00FA                     u787:
  1290     00FA  0B92               	decfsz	??_readADC,f
  1291     00FB  28FA               	goto	u787
  1292                           
  1293                           ;adc.c: 20:       RB5 = 0;
  1294     00FC  1283               	bcf	3,5	;RP0=0, select bank0
  1295     00FD  1286               	bcf	6,5	;volatile
  1296                           
  1297                           ;adc.c: 21:   }
  1298     00FE  3001               	movlw	1
  1299     00FF  00CF               	movwf	79
  1300     0100  084F               	movf	79,w
  1301     0101  0796               	addwf	readADC@bits,f
  1302     0102  3003               	movlw	3
  1303     0103  0216               	subwf	readADC@bits,w
  1304     0104  1C03               	skipc
  1305     0105  28F2               	goto	l1302
  1306                           
  1307                           ;adc.c: 24:   for (bits = 0; bits < 8; bits++)
  1308     0106  0196               	clrf	readADC@bits
  1309     0107                     l1318:
  1310                           
  1311                           ;adc.c: 25:   {;adc.c: 27:     _delay((unsigned long)((100)*(4000000/4000000.0)));
  1312     0107  3021               	movlw	33
  1313     0108  0092               	movwf	??_readADC
  1314     0109                     u797:
  1315     0109  0B92               	decfsz	??_readADC,f
  1316     010A  2909               	goto	u797
  1317                           
  1318                           ;adc.c: 28:     RB5 = 1;
  1319     010B  1283               	bcf	3,5	;RP0=0, select bank0
  1320     010C  1686               	bsf	6,5	;volatile
  1321                           
  1322                           ;adc.c: 31:     rxData = rxData << 1;
  1323     010D  0817               	movf	readADC@rxData,w
  1324     010E  0092               	movwf	??_readADC
  1325     010F  0712               	addwf	??_readADC,w
  1326     0110  0097               	movwf	readADC@rxData
  1327                           
  1328                           ;adc.c: 34:     if(RB6 == 1)
  1329     0111  1F06               	btfss	6,6	;volatile
  1330     0112  2916               	goto	l1328
  1331                           
  1332                           ;adc.c: 35:       rxData = rxData | 0x01;
  1333     0113  0817               	movf	readADC@rxData,w
  1334     0114  3801               	iorlw	1
  1335     0115  2918               	goto	L1
  1336     0116                     l1328:
  1337                           
  1338                           ;adc.c: 37:       rxData = rxData & 0xfe;
  1339     0116  0817               	movf	readADC@rxData,w
  1340     0117  39FE               	andlw	254
  1341     0118                     L1:
  1342     0118  0097               	movwf	readADC@rxData
  1343                           
  1344                           ;adc.c: 39:     _delay((unsigned long)((100)*(4000000/4000000.0)));
  1345     0119  3021               	movlw	33
  1346     011A  0092               	movwf	??_readADC
  1347     011B                     u807:
  1348     011B  0B92               	decfsz	??_readADC,f
  1349     011C  291B               	goto	u807
  1350                           
  1351                           ;adc.c: 40:     RB5 = 0;
  1352     011D  1283               	bcf	3,5	;RP0=0, select bank0
  1353     011E  1286               	bcf	6,5	;volatile
  1354                           
  1355                           ;adc.c: 41:     }
  1356     011F  3001               	movlw	1
  1357     0120  00CF               	movwf	79
  1358     0121  084F               	movf	79,w
  1359     0122  0796               	addwf	readADC@bits,f
  1360     0123  3008               	movlw	8
  1361     0124  0216               	subwf	readADC@bits,w
  1362     0125  1C03               	skipc
  1363     0126  2907               	goto	l1318
  1364                           
  1365                           ;adc.c: 44:   RB7 = 1;
  1366     0127  1786               	bsf	6,7	;volatile
  1367                           
  1368                           ;adc.c: 47:   volt = (rxData << 2);
  1369     0128  0817               	movf	readADC@rxData,w
  1370     0129  0092               	movwf	??_readADC
  1371     012A  0193               	clrf	??_readADC+1
  1372     012B  1003               	clrc
  1373     012C  0D92               	rlf	??_readADC,f
  1374     012D  0D93               	rlf	??_readADC+1,f
  1375     012E  1003               	clrc
  1376     012F  0D92               	rlf	??_readADC,f
  1377     0130  0D93               	rlf	??_readADC+1,f
  1378     0131  0812               	movf	??_readADC,w
  1379     0132  0094               	movwf	readADC@volt
  1380     0133  0813               	movf	??_readADC+1,w
  1381     0134  0095               	movwf	readADC@volt+1
  1382                           
  1383                           ;adc.c: 48:   return volt;
  1384     0135  0815               	movf	readADC@volt+1,w
  1385     0136  0091               	movwf	?_readADC+1
  1386     0137  0814               	movf	readADC@volt,w
  1387     0138  0090               	movwf	?_readADC
  1388     0139  0008               	return
  1389     013A                     __end_of_readADC:
  1390                           
  1391                           	psect	text8
  1392     025B                     __ptext8:	
  1393 ;; *************** function ___wmul *****************
  1394 ;; Defined at:
  1395 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\Umul16.c"
  1396 ;; Parameters:    Size  Location     Type
  1397 ;;  multiplier      2   16[BANK0 ] unsigned int 
  1398 ;;  multiplicand    2   18[BANK0 ] unsigned int 
  1399 ;; Auto vars:     Size  Location     Type
  1400 ;;  product         2   20[BANK0 ] unsigned int 
  1401 ;; Return value:  Size  Location     Type
  1402 ;;                  2   16[BANK0 ] unsigned int 
  1403 ;; Registers used:
  1404 ;;		wreg, status,2, status,0
  1405 ;; Tracked objects:
  1406 ;;		On entry : 100/0
  1407 ;;		On exit  : 100/0
  1408 ;;		Unchanged: 0/0
  1409 ;; Data sizes:     COMMON   BANK0
  1410 ;;      Params:         0       4
  1411 ;;      Locals:         0       2
  1412 ;;      Temps:          0       0
  1413 ;;      Totals:         0       6
  1414 ;;Total ram usage:        6 bytes
  1415 ;; Hardware stack levels used: 1
  1416 ;; Hardware stack levels required when called: 2
  1417 ;; This function calls:
  1418 ;;		Nothing
  1419 ;; This function is called by:
  1420 ;;		_main
  1421 ;; This function uses a non-reentrant model
  1422 ;;
  1423                           
  1424     025B                     ___wmul:	
  1425                           ;psect for function ___wmul
  1426                           
  1427                           
  1428                           ;incstack = 0
  1429                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  1430     025B  01A0               	clrf	___wmul@product
  1431     025C  01A1               	clrf	___wmul@product+1
  1432     025D                     l1346:
  1433     025D  1C1C               	btfss	___wmul@multiplier,0
  1434     025E  2A65               	goto	l228
  1435     025F  081E               	movf	___wmul@multiplicand,w
  1436     0260  07A0               	addwf	___wmul@product,f
  1437     0261  1803               	skipnc
  1438     0262  0AA1               	incf	___wmul@product+1,f
  1439     0263  081F               	movf	___wmul@multiplicand+1,w
  1440     0264  07A1               	addwf	___wmul@product+1,f
  1441     0265                     l228:
  1442     0265  3001               	movlw	1
  1443     0266                     u715:
  1444     0266  1003               	clrc
  1445     0267  0D9E               	rlf	___wmul@multiplicand,f
  1446     0268  0D9F               	rlf	___wmul@multiplicand+1,f
  1447     0269  3EFF               	addlw	-1
  1448     026A  1D03               	skipz
  1449     026B  2A66               	goto	u715
  1450     026C  3001               	movlw	1
  1451     026D                     u725:
  1452     026D  1003               	clrc
  1453     026E  0C9D               	rrf	___wmul@multiplier+1,f
  1454     026F  0C9C               	rrf	___wmul@multiplier,f
  1455     0270  3EFF               	addlw	-1
  1456     0271  1D03               	skipz
  1457     0272  2A6D               	goto	u725
  1458     0273  081C               	movf	___wmul@multiplier,w
  1459     0274  041D               	iorwf	___wmul@multiplier+1,w
  1460     0275  1D03               	btfss	3,2
  1461     0276  2A5D               	goto	l1346
  1462     0277  0821               	movf	___wmul@product+1,w
  1463     0278  009D               	movwf	?___wmul+1
  1464     0279  0820               	movf	___wmul@product,w
  1465     027A  009C               	movwf	?___wmul
  1466     027B  0008               	return
  1467     027C                     __end_of___wmul:
  1468                           
  1469                           	psect	text9
  1470     02FB                     __ptext9:	
  1471 ;; *************** function _Lcd_Write_Int *****************
  1472 ;; Defined at:
  1473 ;;		line 121 in file "lcd.c"
  1474 ;; Parameters:    Size  Location     Type
  1475 ;;  a               2   24[BANK0 ] unsigned int 
  1476 ;; Auto vars:     Size  Location     Type
  1477 ;;  temp           16   26[BANK0 ] unsigned char [16]
  1478 ;; Return value:  Size  Location     Type
  1479 ;;                  1    wreg      void 
  1480 ;; Registers used:
  1481 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1482 ;; Tracked objects:
  1483 ;;		On entry : 100/0
  1484 ;;		On exit  : 900/0
  1485 ;;		Unchanged: 0/0
  1486 ;; Data sizes:     COMMON   BANK0
  1487 ;;      Params:         0       2
  1488 ;;      Locals:         0      16
  1489 ;;      Temps:          0       0
  1490 ;;      Totals:         0      18
  1491 ;;Total ram usage:       18 bytes
  1492 ;; Hardware stack levels used: 1
  1493 ;; Hardware stack levels required when called: 5
  1494 ;; This function calls:
  1495 ;;		_Lcd_Write_String
  1496 ;;		_utoa
  1497 ;; This function is called by:
  1498 ;;		_main
  1499 ;; This function uses a non-reentrant model
  1500 ;;
  1501                           
  1502     02FB                     _Lcd_Write_Int:	
  1503                           ;psect for function _Lcd_Write_Int
  1504                           
  1505                           
  1506                           ;lcd.c: 121: void Lcd_Write_Int(unsigned int a);lcd.c: 122: {;lcd.c: 123:     char temp[
      +                          16];;lcd.c: 124:     utoa((char*)temp, a, 10);
  1507                           
  1508                           ;incstack = 0
  1509                           ; Regs used in _Lcd_Write_Int: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1510     02FB  0825               	movf	Lcd_Write_Int@a+1,w
  1511     02FC  009D               	movwf	utoa@val+1
  1512     02FD  0824               	movf	Lcd_Write_Int@a,w
  1513     02FE  009C               	movwf	utoa@val
  1514     02FF  300A               	movlw	10
  1515     0300  009E               	movwf	utoa@base
  1516     0301  3000               	movlw	0
  1517     0302  009F               	movwf	utoa@base+1
  1518     0303  3026               	movlw	(low (Lcd_Write_Int@temp| 0))& (0+255)
  1519     0304  209B               	fcall	_utoa
  1520                           
  1521                           ;lcd.c: 125:     Lcd_Write_String(temp);
  1522     0305  3026               	movlw	(low (Lcd_Write_Int@temp| 0))& (0+255)
  1523     0306  227C               	fcall	_Lcd_Write_String
  1524     0307  0008               	return
  1525     0308                     __end_of_Lcd_Write_Int:
  1526                           
  1527                           	psect	text10
  1528     009B                     __ptext10:	
  1529 ;; *************** function _utoa *****************
  1530 ;; Defined at:
  1531 ;;		line 17 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\itoa.c"
  1532 ;; Parameters:    Size  Location     Type
  1533 ;;  buf             1    wreg     PTR unsigned char 
  1534 ;;		 -> Lcd_Write_Int@temp(16), 
  1535 ;;  val             2   16[BANK0 ] unsigned int 
  1536 ;;  base            2   18[BANK0 ] int 
  1537 ;; Auto vars:     Size  Location     Type
  1538 ;;  buf             1   23[BANK0 ] PTR unsigned char 
  1539 ;;		 -> Lcd_Write_Int@temp(16), 
  1540 ;;  v               2   20[BANK0 ] unsigned int 
  1541 ;;  c               1   22[BANK0 ] unsigned char 
  1542 ;; Return value:  Size  Location     Type
  1543 ;;                  1    wreg      PTR unsigned char 
  1544 ;; Registers used:
  1545 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1546 ;; Tracked objects:
  1547 ;;		On entry : 100/0
  1548 ;;		On exit  : 900/0
  1549 ;;		Unchanged: 0/0
  1550 ;; Data sizes:     COMMON   BANK0
  1551 ;;      Params:         0       4
  1552 ;;      Locals:         0       4
  1553 ;;      Temps:          0       0
  1554 ;;      Totals:         0       8
  1555 ;;Total ram usage:        8 bytes
  1556 ;; Hardware stack levels used: 1
  1557 ;; Hardware stack levels required when called: 3
  1558 ;; This function calls:
  1559 ;;		___lwdiv
  1560 ;;		___lwmod
  1561 ;; This function is called by:
  1562 ;;		_Lcd_Write_Int
  1563 ;; This function uses a non-reentrant model
  1564 ;;
  1565                           
  1566     009B                     _utoa:	
  1567                           ;psect for function _utoa
  1568                           
  1569                           
  1570                           ;incstack = 0
  1571                           ; Regs used in _utoa: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1572                           ;utoa@buf stored from wreg
  1573     009B  00A3               	movwf	utoa@buf
  1574     009C  081D               	movf	utoa@val+1,w
  1575     009D  00A1               	movwf	utoa@v+1
  1576     009E  081C               	movf	utoa@val,w
  1577     009F  00A0               	movwf	utoa@v
  1578     00A0                     l1230:
  1579     00A0  081F               	movf	utoa@base+1,w
  1580     00A1  0096               	movwf	___lwdiv@divisor+1
  1581     00A2  081E               	movf	utoa@base,w
  1582     00A3  0095               	movwf	___lwdiv@divisor
  1583     00A4  0821               	movf	utoa@v+1,w
  1584     00A5  0098               	movwf	___lwdiv@dividend+1
  1585     00A6  0820               	movf	utoa@v,w
  1586     00A7  0097               	movwf	___lwdiv@dividend
  1587     00A8  213A               	fcall	___lwdiv
  1588     00A9  0816               	movf	?___lwdiv+1,w
  1589     00AA  00A1               	movwf	utoa@v+1
  1590     00AB  0815               	movf	?___lwdiv,w
  1591     00AC  00A0               	movwf	utoa@v
  1592     00AD  3001               	movlw	1
  1593     00AE  00CF               	movwf	79
  1594     00AF  084F               	movf	79,w
  1595     00B0  07A3               	addwf	utoa@buf,f
  1596     00B1  0820               	movf	utoa@v,w
  1597     00B2  0421               	iorwf	utoa@v+1,w
  1598     00B3  1D03               	btfss	3,2
  1599     00B4  28A0               	goto	l1230
  1600     00B5  0823               	movf	utoa@buf,w
  1601     00B6  0084               	movwf	4
  1602     00B7  1383               	bcf	3,7	;select IRP bank0
  1603     00B8  0180               	clrf	0
  1604     00B9  3001               	movlw	1
  1605     00BA  02A3               	subwf	utoa@buf,f
  1606     00BB                     l1240:
  1607     00BB  081F               	movf	utoa@base+1,w
  1608     00BC  0091               	movwf	___lwmod@divisor+1
  1609     00BD  081E               	movf	utoa@base,w
  1610     00BE  0090               	movwf	___lwmod@divisor
  1611     00BF  081D               	movf	utoa@val+1,w
  1612     00C0  0093               	movwf	___lwmod@dividend+1
  1613     00C1  081C               	movf	utoa@val,w
  1614     00C2  0092               	movwf	___lwmod@dividend
  1615     00C3  21A8               	fcall	___lwmod
  1616     00C4  0810               	movf	?___lwmod,w
  1617     00C5  00A2               	movwf	utoa@c
  1618     00C6  081F               	movf	utoa@base+1,w
  1619     00C7  0096               	movwf	___lwdiv@divisor+1
  1620     00C8  081E               	movf	utoa@base,w
  1621     00C9  0095               	movwf	___lwdiv@divisor
  1622     00CA  081D               	movf	utoa@val+1,w
  1623     00CB  0098               	movwf	___lwdiv@dividend+1
  1624     00CC  081C               	movf	utoa@val,w
  1625     00CD  0097               	movwf	___lwdiv@dividend
  1626     00CE  213A               	fcall	___lwdiv
  1627     00CF  0816               	movf	?___lwdiv+1,w
  1628     00D0  009D               	movwf	utoa@val+1
  1629     00D1  0815               	movf	?___lwdiv,w
  1630     00D2  009C               	movwf	utoa@val
  1631     00D3  300A               	movlw	10
  1632     00D4  0222               	subwf	utoa@c,w
  1633     00D5  1C03               	skipc
  1634     00D6  28DB               	goto	l688
  1635     00D7  3007               	movlw	7
  1636     00D8  00CF               	movwf	79
  1637     00D9  084F               	movf	79,w
  1638     00DA  07A2               	addwf	utoa@c,f
  1639     00DB                     l688:
  1640     00DB  3030               	movlw	48
  1641     00DC  00CF               	movwf	79
  1642     00DD  084F               	movf	79,w
  1643     00DE  07A2               	addwf	utoa@c,f
  1644     00DF  0823               	movf	utoa@buf,w
  1645     00E0  0084               	movwf	4
  1646     00E1  0822               	movf	utoa@c,w
  1647     00E2  1383               	bcf	3,7	;select IRP bank0
  1648     00E3  0080               	movwf	0
  1649     00E4  3001               	movlw	1
  1650     00E5  02A3               	subwf	utoa@buf,f
  1651     00E6  081C               	movf	utoa@val,w
  1652     00E7  041D               	iorwf	utoa@val+1,w
  1653     00E8  1D03               	btfss	3,2
  1654     00E9  28BB               	goto	l1240
  1655                           
  1656                           ;	Return value of _utoa is never used
  1657     00EA  3001               	movlw	1
  1658     00EB  00CF               	movwf	79
  1659     00EC  084F               	movf	79,w
  1660     00ED  07A3               	addwf	utoa@buf,f
  1661     00EE  0008               	return
  1662     00EF                     __end_of_utoa:
  1663                           
  1664                           	psect	text11
  1665     01A8                     __ptext11:	
  1666 ;; *************** function ___lwmod *****************
  1667 ;; Defined at:
  1668 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\lwmod.c"
  1669 ;; Parameters:    Size  Location     Type
  1670 ;;  divisor         2    4[BANK0 ] unsigned int 
  1671 ;;  dividend        2    6[BANK0 ] unsigned int 
  1672 ;; Auto vars:     Size  Location     Type
  1673 ;;  counter         1    8[BANK0 ] unsigned char 
  1674 ;; Return value:  Size  Location     Type
  1675 ;;                  2    4[BANK0 ] unsigned int 
  1676 ;; Registers used:
  1677 ;;		wreg, status,2, status,0, btemp+1
  1678 ;; Tracked objects:
  1679 ;;		On entry : 100/0
  1680 ;;		On exit  : 100/0
  1681 ;;		Unchanged: 0/0
  1682 ;; Data sizes:     COMMON   BANK0
  1683 ;;      Params:         0       4
  1684 ;;      Locals:         0       1
  1685 ;;      Temps:          0       0
  1686 ;;      Totals:         0       5
  1687 ;;Total ram usage:        5 bytes
  1688 ;; Hardware stack levels used: 1
  1689 ;; Hardware stack levels required when called: 2
  1690 ;; This function calls:
  1691 ;;		Nothing
  1692 ;; This function is called by:
  1693 ;;		_main
  1694 ;;		_utoa
  1695 ;; This function uses a non-reentrant model
  1696 ;;
  1697                           
  1698     01A8                     ___lwmod:	
  1699                           ;psect for function ___lwmod
  1700                           
  1701                           
  1702                           ;incstack = 0
  1703                           ; Regs used in ___lwmod: [wreg+status,2+status,0+btemp+1]
  1704     01A8  0810               	movf	___lwmod@divisor,w
  1705     01A9  0411               	iorwf	___lwmod@divisor+1,w
  1706     01AA  1903               	btfsc	3,2
  1707     01AB  29D5               	goto	l1174
  1708     01AC  0194               	clrf	___lwmod@counter
  1709     01AD  0A94               	incf	___lwmod@counter,f
  1710     01AE                     l1164:
  1711     01AE  1B91               	btfsc	___lwmod@divisor+1,7
  1712     01AF  29BC               	goto	l1166
  1713     01B0  3001               	movlw	1
  1714     01B1                     u515:
  1715     01B1  1003               	clrc
  1716     01B2  0D90               	rlf	___lwmod@divisor,f
  1717     01B3  0D91               	rlf	___lwmod@divisor+1,f
  1718     01B4  3EFF               	addlw	-1
  1719     01B5  1D03               	skipz
  1720     01B6  29B1               	goto	u515
  1721     01B7  3001               	movlw	1
  1722     01B8  00CF               	movwf	79
  1723     01B9  084F               	movf	79,w
  1724     01BA  0794               	addwf	___lwmod@counter,f
  1725     01BB  29AE               	goto	l1164
  1726     01BC                     l1166:
  1727     01BC  0811               	movf	___lwmod@divisor+1,w
  1728     01BD  0213               	subwf	___lwmod@dividend+1,w
  1729     01BE  1D03               	skipz
  1730     01BF  29C2               	goto	u535
  1731     01C0  0810               	movf	___lwmod@divisor,w
  1732     01C1  0212               	subwf	___lwmod@dividend,w
  1733     01C2                     u535:
  1734     01C2  1C03               	skipc
  1735     01C3  29CA               	goto	l1170
  1736     01C4  0810               	movf	___lwmod@divisor,w
  1737     01C5  0292               	subwf	___lwmod@dividend,f
  1738     01C6  0811               	movf	___lwmod@divisor+1,w
  1739     01C7  1C03               	skipc
  1740     01C8  0393               	decf	___lwmod@dividend+1,f
  1741     01C9  0293               	subwf	___lwmod@dividend+1,f
  1742     01CA                     l1170:
  1743     01CA  3001               	movlw	1
  1744     01CB                     u545:
  1745     01CB  1003               	clrc
  1746     01CC  0C91               	rrf	___lwmod@divisor+1,f
  1747     01CD  0C90               	rrf	___lwmod@divisor,f
  1748     01CE  3EFF               	addlw	-1
  1749     01CF  1D03               	skipz
  1750     01D0  29CB               	goto	u545
  1751     01D1  3001               	movlw	1
  1752     01D2  0294               	subwf	___lwmod@counter,f
  1753     01D3  1D03               	btfss	3,2
  1754     01D4  29BC               	goto	l1166
  1755     01D5                     l1174:
  1756     01D5  0813               	movf	___lwmod@dividend+1,w
  1757     01D6  0091               	movwf	?___lwmod+1
  1758     01D7  0812               	movf	___lwmod@dividend,w
  1759     01D8  0090               	movwf	?___lwmod
  1760     01D9  0008               	return
  1761     01DA                     __end_of___lwmod:
  1762                           
  1763                           	psect	text12
  1764     013A                     __ptext12:	
  1765 ;; *************** function ___lwdiv *****************
  1766 ;; Defined at:
  1767 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\lwdiv.c"
  1768 ;; Parameters:    Size  Location     Type
  1769 ;;  divisor         2    9[BANK0 ] unsigned int 
  1770 ;;  dividend        2   11[BANK0 ] unsigned int 
  1771 ;; Auto vars:     Size  Location     Type
  1772 ;;  quotient        2   13[BANK0 ] unsigned int 
  1773 ;;  counter         1   15[BANK0 ] unsigned char 
  1774 ;; Return value:  Size  Location     Type
  1775 ;;                  2    9[BANK0 ] unsigned int 
  1776 ;; Registers used:
  1777 ;;		wreg, status,2, status,0, btemp+1
  1778 ;; Tracked objects:
  1779 ;;		On entry : 100/0
  1780 ;;		On exit  : 100/0
  1781 ;;		Unchanged: 0/0
  1782 ;; Data sizes:     COMMON   BANK0
  1783 ;;      Params:         0       4
  1784 ;;      Locals:         0       3
  1785 ;;      Temps:          0       0
  1786 ;;      Totals:         0       7
  1787 ;;Total ram usage:        7 bytes
  1788 ;; Hardware stack levels used: 1
  1789 ;; Hardware stack levels required when called: 2
  1790 ;; This function calls:
  1791 ;;		Nothing
  1792 ;; This function is called by:
  1793 ;;		_main
  1794 ;;		_utoa
  1795 ;; This function uses a non-reentrant model
  1796 ;;
  1797                           
  1798     013A                     ___lwdiv:	
  1799                           ;psect for function ___lwdiv
  1800                           
  1801                           
  1802                           ;incstack = 0
  1803                           ; Regs used in ___lwdiv: [wreg+status,2+status,0+btemp+1]
  1804     013A  0199               	clrf	___lwdiv@quotient
  1805     013B  019A               	clrf	___lwdiv@quotient+1
  1806     013C  0815               	movf	___lwdiv@divisor,w
  1807     013D  0416               	iorwf	___lwdiv@divisor+1,w
  1808     013E  1903               	btfsc	3,2
  1809     013F  2971               	goto	l1152
  1810     0140  019B               	clrf	___lwdiv@counter
  1811     0141  0A9B               	incf	___lwdiv@counter,f
  1812     0142                     l1140:
  1813     0142  1B96               	btfsc	___lwdiv@divisor+1,7
  1814     0143  2950               	goto	l1142
  1815     0144  3001               	movlw	1
  1816     0145                     u445:
  1817     0145  1003               	clrc
  1818     0146  0D95               	rlf	___lwdiv@divisor,f
  1819     0147  0D96               	rlf	___lwdiv@divisor+1,f
  1820     0148  3EFF               	addlw	-1
  1821     0149  1D03               	skipz
  1822     014A  2945               	goto	u445
  1823     014B  3001               	movlw	1
  1824     014C  00CF               	movwf	79
  1825     014D  084F               	movf	79,w
  1826     014E  079B               	addwf	___lwdiv@counter,f
  1827     014F  2942               	goto	l1140
  1828     0150                     l1142:
  1829     0150  3001               	movlw	1
  1830     0151                     u465:
  1831     0151  1003               	clrc
  1832     0152  0D99               	rlf	___lwdiv@quotient,f
  1833     0153  0D9A               	rlf	___lwdiv@quotient+1,f
  1834     0154  3EFF               	addlw	-1
  1835     0155  1D03               	skipz
  1836     0156  2951               	goto	u465
  1837     0157  0816               	movf	___lwdiv@divisor+1,w
  1838     0158  0218               	subwf	___lwdiv@dividend+1,w
  1839     0159  1D03               	skipz
  1840     015A  295D               	goto	u475
  1841     015B  0815               	movf	___lwdiv@divisor,w
  1842     015C  0217               	subwf	___lwdiv@dividend,w
  1843     015D                     u475:
  1844     015D  1C03               	skipc
  1845     015E  2966               	goto	l1148
  1846     015F  0815               	movf	___lwdiv@divisor,w
  1847     0160  0297               	subwf	___lwdiv@dividend,f
  1848     0161  0816               	movf	___lwdiv@divisor+1,w
  1849     0162  1C03               	skipc
  1850     0163  0398               	decf	___lwdiv@dividend+1,f
  1851     0164  0298               	subwf	___lwdiv@dividend+1,f
  1852     0165  1419               	bsf	___lwdiv@quotient,0
  1853     0166                     l1148:
  1854     0166  3001               	movlw	1
  1855     0167                     u485:
  1856     0167  1003               	clrc
  1857     0168  0C96               	rrf	___lwdiv@divisor+1,f
  1858     0169  0C95               	rrf	___lwdiv@divisor,f
  1859     016A  3EFF               	addlw	-1
  1860     016B  1D03               	skipz
  1861     016C  2967               	goto	u485
  1862     016D  3001               	movlw	1
  1863     016E  029B               	subwf	___lwdiv@counter,f
  1864     016F  1D03               	btfss	3,2
  1865     0170  2950               	goto	l1142
  1866     0171                     l1152:
  1867     0171  081A               	movf	___lwdiv@quotient+1,w
  1868     0172  0096               	movwf	?___lwdiv+1
  1869     0173  0819               	movf	___lwdiv@quotient,w
  1870     0174  0095               	movwf	?___lwdiv
  1871     0175  0008               	return
  1872     0176                     __end_of___lwdiv:
  1873                           
  1874                           	psect	text13
  1875     027C                     __ptext13:	
  1876 ;; *************** function _Lcd_Write_String *****************
  1877 ;; Defined at:
  1878 ;;		line 111 in file "lcd.c"
  1879 ;; Parameters:    Size  Location     Type
  1880 ;;  a               1    wreg     PTR unsigned char 
  1881 ;;		 -> Lcd_Write_Int@temp(16), welcomeMessage@msg(8), 
  1882 ;; Auto vars:     Size  Location     Type
  1883 ;;  a               1   12[BANK0 ] PTR unsigned char 
  1884 ;;		 -> Lcd_Write_Int@temp(16), welcomeMessage@msg(8), 
  1885 ;;  i               2   10[BANK0 ] int 
  1886 ;; Return value:  Size  Location     Type
  1887 ;;                  1    wreg      void 
  1888 ;; Registers used:
  1889 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1890 ;; Tracked objects:
  1891 ;;		On entry : 100/0
  1892 ;;		On exit  : 900/0
  1893 ;;		Unchanged: 0/0
  1894 ;; Data sizes:     COMMON   BANK0
  1895 ;;      Params:         0       0
  1896 ;;      Locals:         0       3
  1897 ;;      Temps:          0       1
  1898 ;;      Totals:         0       4
  1899 ;;Total ram usage:        4 bytes
  1900 ;; Hardware stack levels used: 1
  1901 ;; Hardware stack levels required when called: 4
  1902 ;; This function calls:
  1903 ;;		_Lcd_Write_Char
  1904 ;; This function is called by:
  1905 ;;		_welcomeMessage
  1906 ;;		_Lcd_Write_Int
  1907 ;; This function uses a non-reentrant model
  1908 ;;
  1909                           
  1910     027C                     _Lcd_Write_String:	
  1911                           ;psect for function _Lcd_Write_String
  1912                           
  1913                           
  1914                           ;incstack = 0
  1915                           ; Regs used in _Lcd_Write_String: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1916                           ;Lcd_Write_String@a stored from wreg
  1917     027C  0098               	movwf	Lcd_Write_String@a
  1918                           
  1919                           ;lcd.c: 111: void Lcd_Write_String(char *a);lcd.c: 112: {;lcd.c: 113:  int i;;lcd.c: 114
      +                          :  for(i=0;a[i]!='\0';i++)
  1920     027D  0196               	clrf	Lcd_Write_String@i
  1921     027E  0197               	clrf	Lcd_Write_String@i+1
  1922     027F                     l1220:
  1923     027F  0816               	movf	Lcd_Write_String@i,w
  1924     0280  0718               	addwf	Lcd_Write_String@a,w
  1925     0281  0095               	movwf	??_Lcd_Write_String
  1926     0282  0815               	movf	??_Lcd_Write_String,w
  1927     0283  0084               	movwf	4
  1928     0284  1383               	bcf	3,7	;select IRP bank0
  1929     0285  0800               	movf	0,w
  1930     0286  1903               	btfsc	3,2
  1931     0287  0008               	return
  1932                           
  1933                           ;lcd.c: 115:     {;lcd.c: 116:         Lcd_Write_Char(a[i]);
  1934     0288  0816               	movf	Lcd_Write_String@i,w
  1935     0289  0718               	addwf	Lcd_Write_String@a,w
  1936     028A  0095               	movwf	??_Lcd_Write_String
  1937     028B  0815               	movf	??_Lcd_Write_String,w
  1938     028C  0084               	movwf	4
  1939     028D  0800               	movf	0,w
  1940     028E  2238               	fcall	_Lcd_Write_Char
  1941                           
  1942                           ;lcd.c: 117:     }
  1943     028F  3001               	movlw	1
  1944     0290  0796               	addwf	Lcd_Write_String@i,f
  1945     0291  1803               	skipnc
  1946     0292  0A97               	incf	Lcd_Write_String@i+1,f
  1947     0293  3000               	movlw	0
  1948     0294  0797               	addwf	Lcd_Write_String@i+1,f
  1949     0295  2A7F               	goto	l1220
  1950     0296                     __end_of_Lcd_Write_String:
  1951                           
  1952                           	psect	text14
  1953     0238                     __ptext14:	
  1954 ;; *************** function _Lcd_Write_Char *****************
  1955 ;; Defined at:
  1956 ;;		line 94 in file "lcd.c"
  1957 ;; Parameters:    Size  Location     Type
  1958 ;;  a               1    wreg     unsigned char 
  1959 ;; Auto vars:     Size  Location     Type
  1960 ;;  a               1    8[BANK0 ] unsigned char 
  1961 ;;  y               1    7[BANK0 ] unsigned char 
  1962 ;;  temp            1    6[BANK0 ] unsigned char 
  1963 ;; Return value:  Size  Location     Type
  1964 ;;                  1    wreg      void 
  1965 ;; Registers used:
  1966 ;;		wreg, status,2, status,0, pclath, cstack
  1967 ;; Tracked objects:
  1968 ;;		On entry : 100/0
  1969 ;;		On exit  : 100/0
  1970 ;;		Unchanged: 0/0
  1971 ;; Data sizes:     COMMON   BANK0
  1972 ;;      Params:         0       0
  1973 ;;      Locals:         0       3
  1974 ;;      Temps:          0       1
  1975 ;;      Totals:         0       4
  1976 ;;Total ram usage:        4 bytes
  1977 ;; Hardware stack levels used: 1
  1978 ;; Hardware stack levels required when called: 3
  1979 ;; This function calls:
  1980 ;;		_Lcd_Port
  1981 ;; This function is called by:
  1982 ;;		_main
  1983 ;;		_Lcd_Write_String
  1984 ;; This function uses a non-reentrant model
  1985 ;;
  1986                           
  1987     0238                     _Lcd_Write_Char:	
  1988                           ;psect for function _Lcd_Write_Char
  1989                           
  1990                           
  1991                           ;incstack = 0
  1992                           ; Regs used in _Lcd_Write_Char: [wreg+status,2+status,0+pclath+cstack]
  1993                           ;Lcd_Write_Char@a stored from wreg
  1994     0238  0094               	movwf	Lcd_Write_Char@a
  1995                           
  1996                           ;lcd.c: 94: void Lcd_Write_Char(char a);lcd.c: 95: {;lcd.c: 96:    char temp,y;;lcd.c: 9
      +                          7:    temp = a&0x0F;
  1997     0239  0814               	movf	Lcd_Write_Char@a,w
  1998     023A  390F               	andlw	15
  1999     023B  0092               	movwf	Lcd_Write_Char@temp
  2000                           
  2001                           ;lcd.c: 98:    y = a&0xF0;
  2002     023C  0814               	movf	Lcd_Write_Char@a,w
  2003     023D  39F0               	andlw	240
  2004     023E  0093               	movwf	Lcd_Write_Char@y
  2005                           
  2006                           ;lcd.c: 99:    RA0 = 1;
  2007     023F  1405               	bsf	5,0	;volatile
  2008                           
  2009                           ;lcd.c: 100:    Lcd_Port(y>>4);
  2010     0240  0813               	movf	Lcd_Write_Char@y,w
  2011     0241  0091               	movwf	??_Lcd_Write_Char
  2012     0242  3004               	movlw	4
  2013     0243                     u425:
  2014     0243  1003               	clrc
  2015     0244  0C91               	rrf	??_Lcd_Write_Char,f
  2016     0245  3EFF               	addlw	-1
  2017     0246  1D03               	skipz
  2018     0247  2A43               	goto	u425
  2019     0248  0811               	movf	??_Lcd_Write_Char,w
  2020     0249  22AE               	fcall	_Lcd_Port
  2021                           
  2022                           ;lcd.c: 101:    RA2 = 1;
  2023     024A  1505               	bsf	5,2	;volatile
  2024                           
  2025                           ;lcd.c: 102:    _delay((unsigned long)((40)*(4000000/4000000.0)));
  2026     024B  300D               	movlw	13
  2027     024C  0091               	movwf	??_Lcd_Write_Char
  2028     024D                     u817:
  2029     024D  0B91               	decfsz	??_Lcd_Write_Char,f
  2030     024E  2A4D               	goto	u817
  2031                           
  2032                           ;lcd.c: 103:    RA2 = 0;
  2033     024F  1283               	bcf	3,5	;RP0=0, select bank0
  2034     0250  1105               	bcf	5,2	;volatile
  2035                           
  2036                           ;lcd.c: 104:    Lcd_Port(temp);
  2037     0251  0812               	movf	Lcd_Write_Char@temp,w
  2038     0252  22AE               	fcall	_Lcd_Port
  2039                           
  2040                           ;lcd.c: 105:    RA2 = 1;
  2041     0253  1505               	bsf	5,2	;volatile
  2042                           
  2043                           ;lcd.c: 106:    _delay((unsigned long)((40)*(4000000/4000000.0)));
  2044     0254  300D               	movlw	13
  2045     0255  0091               	movwf	??_Lcd_Write_Char
  2046     0256                     u827:
  2047     0256  0B91               	decfsz	??_Lcd_Write_Char,f
  2048     0257  2A56               	goto	u827
  2049                           
  2050                           ;lcd.c: 107:    RA2 = 0;
  2051     0258  1283               	bcf	3,5	;RP0=0, select bank0
  2052     0259  1105               	bcf	5,2	;volatile
  2053     025A  0008               	return
  2054     025B                     __end_of_Lcd_Write_Char:
  2055                           
  2056                           	psect	text15
  2057     01DA                     __ptext15:	
  2058 ;; *************** function _Lcd_Init *****************
  2059 ;; Defined at:
  2060 ;;		line 74 in file "lcd.c"
  2061 ;; Parameters:    Size  Location     Type
  2062 ;;		None
  2063 ;; Auto vars:     Size  Location     Type
  2064 ;;		None
  2065 ;; Return value:  Size  Location     Type
  2066 ;;                  1    wreg      void 
  2067 ;; Registers used:
  2068 ;;		wreg, status,2, status,0, pclath, cstack
  2069 ;; Tracked objects:
  2070 ;;		On entry : B00/100
  2071 ;;		On exit  : 100/0
  2072 ;;		Unchanged: 0/0
  2073 ;; Data sizes:     COMMON   BANK0
  2074 ;;      Params:         0       0
  2075 ;;      Locals:         0       0
  2076 ;;      Temps:          0       2
  2077 ;;      Totals:         0       2
  2078 ;;Total ram usage:        2 bytes
  2079 ;; Hardware stack levels used: 1
  2080 ;; Hardware stack levels required when called: 4
  2081 ;; This function calls:
  2082 ;;		_Lcd_Cmd
  2083 ;;		_Lcd_Port
  2084 ;; This function is called by:
  2085 ;;		_main
  2086 ;; This function uses a non-reentrant model
  2087 ;;
  2088                           
  2089     01DA                     _Lcd_Init:	
  2090                           ;psect for function _Lcd_Init
  2091                           
  2092                           
  2093                           ;lcd.c: 76:   Lcd_Port(0x00);
  2094                           
  2095                           ;incstack = 0
  2096                           ; Regs used in _Lcd_Init: [wreg+status,2+status,0+pclath+cstack]
  2097     01DA  3000               	movlw	0
  2098     01DB  22AE               	fcall	_Lcd_Port
  2099                           
  2100                           ;lcd.c: 77:    _delay((unsigned long)((20)*(4000000/4000.0)));
  2101     01DC  301A               	movlw	26
  2102     01DD  0095               	movwf	??_Lcd_Init+1
  2103     01DE  30F8               	movlw	248
  2104     01DF  0094               	movwf	??_Lcd_Init
  2105     01E0                     u837:
  2106     01E0  0B94               	decfsz	??_Lcd_Init,f
  2107     01E1  29E0               	goto	u837
  2108     01E2  0B95               	decfsz	??_Lcd_Init+1,f
  2109     01E3  29E0               	goto	u837
  2110     01E4  0000               	nop
  2111                           
  2112                           ;lcd.c: 78:   Lcd_Cmd(0x03);
  2113     01E5  3003               	movlw	3
  2114     01E6  22DB               	fcall	_Lcd_Cmd
  2115                           
  2116                           ;lcd.c: 79:  _delay((unsigned long)((5)*(4000000/4000.0)));
  2117     01E7  3007               	movlw	7
  2118     01E8  0095               	movwf	??_Lcd_Init+1
  2119     01E9  307D               	movlw	125
  2120     01EA  0094               	movwf	??_Lcd_Init
  2121     01EB                     u847:
  2122     01EB  0B94               	decfsz	??_Lcd_Init,f
  2123     01EC  29EB               	goto	u847
  2124     01ED  0B95               	decfsz	??_Lcd_Init+1,f
  2125     01EE  29EB               	goto	u847
  2126                           
  2127                           ;lcd.c: 80:   Lcd_Cmd(0x03);
  2128     01EF  3003               	movlw	3
  2129     01F0  22DB               	fcall	_Lcd_Cmd
  2130                           
  2131                           ;lcd.c: 81:  _delay((unsigned long)((11)*(4000000/4000.0)));
  2132     01F1  300F               	movlw	15
  2133     01F2  0095               	movwf	??_Lcd_Init+1
  2134     01F3  3047               	movlw	71
  2135     01F4  0094               	movwf	??_Lcd_Init
  2136     01F5                     u857:
  2137     01F5  0B94               	decfsz	??_Lcd_Init,f
  2138     01F6  29F5               	goto	u857
  2139     01F7  0B95               	decfsz	??_Lcd_Init+1,f
  2140     01F8  29F5               	goto	u857
  2141     01F9  29FA               	nop2
  2142                           
  2143                           ;lcd.c: 82:   Lcd_Cmd(0x03);
  2144     01FA  3003               	movlw	3
  2145     01FB  22DB               	fcall	_Lcd_Cmd
  2146                           
  2147                           ;lcd.c: 84:   Lcd_Cmd(0x02);
  2148     01FC  3002               	movlw	2
  2149     01FD  22DB               	fcall	_Lcd_Cmd
  2150                           
  2151                           ;lcd.c: 85:   Lcd_Cmd(0x02);
  2152     01FE  3002               	movlw	2
  2153     01FF  22DB               	fcall	_Lcd_Cmd
  2154                           
  2155                           ;lcd.c: 86:   Lcd_Cmd(0x08);
  2156     0200  3008               	movlw	8
  2157     0201  22DB               	fcall	_Lcd_Cmd
  2158                           
  2159                           ;lcd.c: 87:   Lcd_Cmd(0x00);
  2160     0202  3000               	movlw	0
  2161     0203  22DB               	fcall	_Lcd_Cmd
  2162                           
  2163                           ;lcd.c: 88:   Lcd_Cmd(0x0C);
  2164     0204  300C               	movlw	12
  2165     0205  22DB               	fcall	_Lcd_Cmd
  2166                           
  2167                           ;lcd.c: 89:   Lcd_Cmd(0x00);
  2168     0206  3000               	movlw	0
  2169     0207  22DB               	fcall	_Lcd_Cmd
  2170                           
  2171                           ;lcd.c: 90:   Lcd_Cmd(0x06);
  2172     0208  3006               	movlw	6
  2173     0209  22DB               	fcall	_Lcd_Cmd
  2174     020A  0008               	return
  2175     020B                     __end_of_Lcd_Init:
  2176                           
  2177                           	psect	text16
  2178     02DB                     __ptext16:	
  2179 ;; *************** function _Lcd_Cmd *****************
  2180 ;; Defined at:
  2181 ;;		line 31 in file "lcd.c"
  2182 ;; Parameters:    Size  Location     Type
  2183 ;;  a               1    wreg     unsigned char 
  2184 ;; Auto vars:     Size  Location     Type
  2185 ;;  a               1    7[BANK0 ] unsigned char 
  2186 ;; Return value:  Size  Location     Type
  2187 ;;                  1    wreg      void 
  2188 ;; Registers used:
  2189 ;;		wreg, status,2, status,0, pclath, cstack
  2190 ;; Tracked objects:
  2191 ;;		On entry : 0/0
  2192 ;;		On exit  : 100/0
  2193 ;;		Unchanged: 0/0
  2194 ;; Data sizes:     COMMON   BANK0
  2195 ;;      Params:         0       0
  2196 ;;      Locals:         0       1
  2197 ;;      Temps:          0       2
  2198 ;;      Totals:         0       3
  2199 ;;Total ram usage:        3 bytes
  2200 ;; Hardware stack levels used: 1
  2201 ;; Hardware stack levels required when called: 3
  2202 ;; This function calls:
  2203 ;;		_Lcd_Port
  2204 ;; This function is called by:
  2205 ;;		_Lcd_Clear
  2206 ;;		_Lcd_Set_Cursor
  2207 ;;		_Lcd_Init
  2208 ;; This function uses a non-reentrant model
  2209 ;;
  2210                           
  2211     02DB                     _Lcd_Cmd:	
  2212                           ;psect for function _Lcd_Cmd
  2213                           
  2214                           
  2215                           ;incstack = 0
  2216                           ; Regs used in _Lcd_Cmd: [wreg+status,2+status,0+pclath+cstack]
  2217                           ;Lcd_Cmd@a stored from wreg
  2218     02DB  1283               	bcf	3,5	;RP0=0, select bank0
  2219     02DC  0093               	movwf	Lcd_Cmd@a
  2220                           
  2221                           ;lcd.c: 31: void Lcd_Cmd(char a);lcd.c: 32: {;lcd.c: 34:     RA0 = 0;
  2222     02DD  1005               	bcf	5,0	;volatile
  2223                           
  2224                           ;lcd.c: 35:  Lcd_Port(a);
  2225     02DE  0813               	movf	Lcd_Cmd@a,w
  2226     02DF  22AE               	fcall	_Lcd_Port
  2227                           
  2228                           ;lcd.c: 38:  RA2 = 1;
  2229     02E0  1505               	bsf	5,2	;volatile
  2230                           
  2231                           ;lcd.c: 39:     _delay((unsigned long)((4)*(4000000/4000.0)));
  2232     02E1  3006               	movlw	6
  2233     02E2  0092               	movwf	??_Lcd_Cmd+1
  2234     02E3  3030               	movlw	48
  2235     02E4  0091               	movwf	??_Lcd_Cmd
  2236     02E5                     u867:
  2237     02E5  0B91               	decfsz	??_Lcd_Cmd,f
  2238     02E6  2AE5               	goto	u867
  2239     02E7  0B92               	decfsz	??_Lcd_Cmd+1,f
  2240     02E8  2AE5               	goto	u867
  2241     02E9  0000               	nop
  2242                           
  2243                           ;lcd.c: 40:     RA2 = 0;
  2244     02EA  1283               	bcf	3,5	;RP0=0, select bank0
  2245     02EB  1105               	bcf	5,2	;volatile
  2246     02EC  0008               	return
  2247     02ED                     __end_of_Lcd_Cmd:
  2248                           
  2249                           	psect	text17
  2250     02AE                     __ptext17:	
  2251 ;; *************** function _Lcd_Port *****************
  2252 ;; Defined at:
  2253 ;;		line 7 in file "lcd.c"
  2254 ;; Parameters:    Size  Location     Type
  2255 ;;  a               1    wreg     unsigned char 
  2256 ;; Auto vars:     Size  Location     Type
  2257 ;;  a               1    4[BANK0 ] unsigned char 
  2258 ;; Return value:  Size  Location     Type
  2259 ;;                  1    wreg      void 
  2260 ;; Registers used:
  2261 ;;		wreg
  2262 ;; Tracked objects:
  2263 ;;		On entry : 0/0
  2264 ;;		On exit  : 100/0
  2265 ;;		Unchanged: 0/0
  2266 ;; Data sizes:     COMMON   BANK0
  2267 ;;      Params:         0       0
  2268 ;;      Locals:         0       1
  2269 ;;      Temps:          0       0
  2270 ;;      Totals:         0       1
  2271 ;;Total ram usage:        1 bytes
  2272 ;; Hardware stack levels used: 1
  2273 ;; Hardware stack levels required when called: 2
  2274 ;; This function calls:
  2275 ;;		Nothing
  2276 ;; This function is called by:
  2277 ;;		_Lcd_Cmd
  2278 ;;		_Lcd_Init
  2279 ;;		_Lcd_Write_Char
  2280 ;; This function uses a non-reentrant model
  2281 ;;
  2282                           
  2283     02AE                     _Lcd_Port:	
  2284                           ;psect for function _Lcd_Port
  2285                           
  2286                           
  2287                           ;incstack = 0
  2288                           ; Regs used in _Lcd_Port: [wreg]
  2289                           ;Lcd_Port@a stored from wreg
  2290     02AE  1283               	bcf	3,5	;RP0=0, select bank0
  2291     02AF  0090               	movwf	Lcd_Port@a
  2292                           
  2293                           ;lcd.c: 7: void Lcd_Port(char a);lcd.c: 8: {;lcd.c: 9:  if(a & 1)
  2294     02B0  1C10               	btfss	Lcd_Port@a,0
  2295     02B1  2AB4               	goto	l84
  2296                           
  2297                           ;lcd.c: 10:   RB1 = 1;
  2298     02B2  1486               	bsf	6,1	;volatile
  2299     02B3  2AB5               	goto	l85
  2300     02B4                     l84:	
  2301                           ;lcd.c: 11:  else
  2302                           
  2303                           
  2304                           ;lcd.c: 12:   RB1 = 0;
  2305     02B4  1086               	bcf	6,1	;volatile
  2306     02B5                     l85:
  2307                           
  2308                           ;lcd.c: 14:  if(a & 2)
  2309     02B5  1C90               	btfss	Lcd_Port@a,1
  2310     02B6  2AB9               	goto	l86
  2311                           
  2312                           ;lcd.c: 15:   RB2 = 1;
  2313     02B7  1506               	bsf	6,2	;volatile
  2314     02B8  2ABA               	goto	l87
  2315     02B9                     l86:	
  2316                           ;lcd.c: 16:  else
  2317                           
  2318                           
  2319                           ;lcd.c: 17:   RB2 = 0;
  2320     02B9  1106               	bcf	6,2	;volatile
  2321     02BA                     l87:
  2322                           
  2323                           ;lcd.c: 19:  if(a & 4)
  2324     02BA  1D10               	btfss	Lcd_Port@a,2
  2325     02BB  2ABE               	goto	l88
  2326                           
  2327                           ;lcd.c: 20:   RB3 = 1;
  2328     02BC  1586               	bsf	6,3	;volatile
  2329     02BD  2ABF               	goto	l89
  2330     02BE                     l88:	
  2331                           ;lcd.c: 21:  else
  2332                           
  2333                           
  2334                           ;lcd.c: 22:   RB3 = 0;
  2335     02BE  1186               	bcf	6,3	;volatile
  2336     02BF                     l89:
  2337                           
  2338                           ;lcd.c: 24:  if(a & 8)
  2339     02BF  1D90               	btfss	Lcd_Port@a,3
  2340     02C0  2AC3               	goto	l90
  2341                           
  2342                           ;lcd.c: 25:   RB4 = 1;
  2343     02C1  1606               	bsf	6,4	;volatile
  2344     02C2  0008               	return
  2345     02C3                     l90:	
  2346                           ;lcd.c: 26:  else
  2347                           
  2348                           
  2349                           ;lcd.c: 27:   RB4 = 0;
  2350     02C3  1206               	bcf	6,4	;volatile
  2351     02C4  0008               	return
  2352     02C5                     __end_of_Lcd_Port:
  2353                           
  2354                           	psect	text18
  2355     0308                     __ptext18:	
  2356 ;; *************** function _isr *****************
  2357 ;; Defined at:
  2358 ;;		line 36 in file "main.c"
  2359 ;; Parameters:    Size  Location     Type
  2360 ;;		None
  2361 ;; Auto vars:     Size  Location     Type
  2362 ;;		None
  2363 ;; Return value:  Size  Location     Type
  2364 ;;                  1    wreg      void 
  2365 ;; Registers used:
  2366 ;;		wreg, status,2, status,0, pclath, cstack
  2367 ;; Tracked objects:
  2368 ;;		On entry : 0/0
  2369 ;;		On exit  : 100/0
  2370 ;;		Unchanged: 0/0
  2371 ;; Data sizes:     COMMON   BANK0
  2372 ;;      Params:         0       0
  2373 ;;      Locals:         0       0
  2374 ;;      Temps:          0       2
  2375 ;;      Totals:         0       2
  2376 ;;Total ram usage:        2 bytes
  2377 ;; Hardware stack levels used: 1
  2378 ;; Hardware stack levels required when called: 1
  2379 ;; This function calls:
  2380 ;;		i1_delay_100ms
  2381 ;; This function is called by:
  2382 ;;		Interrupt level 1
  2383 ;; This function uses a non-reentrant model
  2384 ;;
  2385                           
  2386     0308                     _isr:	
  2387                           ;psect for function _isr
  2388                           
  2389                           
  2390                           ;main.c: 38:     INTCONbits.INTF = 0;
  2391     0308  108B               	bcf	11,1	;volatile
  2392                           
  2393                           ;main.c: 40:     toggleHold = ~toggleHold;
  2394     0309  09C2               	comf	_toggleHold,f
  2395     030A  09C3               	comf	_toggleHold+1,f
  2396                           
  2397                           ;main.c: 41:     delay_100ms();
  2398     030B  232A               	fcall	i1_delay_100ms
  2399     030C  1283               	bcf	3,5	;RP0=0, select bank0
  2400     030D  080F               	movf	??_isr+1,w
  2401     030E  008A               	movwf	10
  2402     030F  0E0E               	swapf	??_isr,w
  2403     0310  0083               	movwf	3
  2404     0311  0ECE               	swapf	78,f
  2405     0312  0E4E               	swapf	78,w
  2406     0313  0009               	retfie
  2407     0314                     __end_of_isr:
  2408                           
  2409                           	psect	intentry
  2410     0004                     __pintentry:	
  2411                           ;incstack = 0
  2412                           ; Regs used in _isr: [wreg+status,2+status,0+pclath+cstack]
  2413                           
  2414     0004                     interrupt_function:
  2415     004E                     saved_w	set	btemp
  2416     0004  00CE               	movwf	btemp
  2417     0005  0E03               	swapf	3,w
  2418     0006  1283               	bcf	3,5	;RP0=0, select bank0
  2419     0007  008E               	movwf	??_isr
  2420     0008  080A               	movf	10,w
  2421     0009  008F               	movwf	??_isr+1
  2422     000A  2B08               	ljmp	_isr
  2423                           
  2424                           	psect	text19
  2425     032A                     __ptext19:	
  2426 ;; *************** function i1_delay_100ms *****************
  2427 ;; Defined at:
  2428 ;;		line 24 in file "main.c"
  2429 ;; Parameters:    Size  Location     Type
  2430 ;;		None
  2431 ;; Auto vars:     Size  Location     Type
  2432 ;;		None
  2433 ;; Return value:  Size  Location     Type
  2434 ;;                  1    wreg      void 
  2435 ;; Registers used:
  2436 ;;		wreg
  2437 ;; Tracked objects:
  2438 ;;		On entry : 100/0
  2439 ;;		On exit  : 0/0
  2440 ;;		Unchanged: 0/0
  2441 ;; Data sizes:     COMMON   BANK0
  2442 ;;      Params:         0       0
  2443 ;;      Locals:         0       0
  2444 ;;      Temps:          0       2
  2445 ;;      Totals:         0       2
  2446 ;;Total ram usage:        2 bytes
  2447 ;; Hardware stack levels used: 1
  2448 ;; This function calls:
  2449 ;;		Nothing
  2450 ;; This function is called by:
  2451 ;;		_isr
  2452 ;; This function uses a non-reentrant model
  2453 ;;
  2454                           
  2455     032A                     i1_delay_100ms:	
  2456                           ;psect for function i1_delay_100ms
  2457                           
  2458                           
  2459                           ;main.c: 25:     _delay((unsigned long)((100)*(4000000/4000.0)));
  2460                           
  2461                           ;incstack = 0
  2462                           ; Regs used in i1_delay_100ms: [wreg]
  2463     032A  3082               	movlw	130
  2464     032B  008D               	movwf	??i1_delay_100ms+1
  2465     032C  30DD               	movlw	221
  2466     032D  008C               	movwf	??i1_delay_100ms
  2467     032E                     u87_27:
  2468     032E  0B8C               	decfsz	??i1_delay_100ms,f
  2469     032F  2B2E               	goto	u87_27
  2470     0330  0B8D               	decfsz	??i1_delay_100ms+1,f
  2471     0331  2B2E               	goto	u87_27
  2472     0332  2B33               	nop2
  2473     0333  0008               	return
  2474     0334                     __end_ofi1_delay_100ms:
  2475     004E                     btemp	set	78	;btemp
  2476     004E                     wtemp0	set	78
  2477                           
  2478                           	psect	config
  2479                           
  2480                           ;Config register CONFIG @ 0x2007
  2481                           ;	Oscillator Selection bits
  2482                           ;	FOSC = XT, XT oscillator
  2483                           ;	Watchdog Timer
  2484                           ;	WDTE = OFF, WDT disabled
  2485                           ;	Power-up Timer Enable bit
  2486                           ;	PWRTE = ON, Power-up Timer is enabled
  2487                           ;	Code Protection bit
  2488                           ;	CP = OFF, Code protection disabled
  2489     2007                     	org	8199
  2490     2007  3FF1               	dw	16369

Data Sizes:
    Strings     5
    Constant    0
    Data        8
    BSS         4
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON            0      0       0
    BANK0            66     46      58

Pointer List with Targets:

    strcpy@from	PTR const unsigned char  size(1) Largest target is 5
		 -> STR_1(CODE[5]), 

    strcpy@to	PTR unsigned char  size(1) Largest target is 8
		 -> welcomeMessage@msg(BANK0[8]), 

    strcpy@cp	PTR unsigned char  size(1) Largest target is 8
		 -> welcomeMessage@msg(BANK0[8]), 

    utoa@buf	PTR unsigned char  size(1) Largest target is 16
		 -> Lcd_Write_Int@temp(BANK0[16]), 

    sp__itoa	PTR unsigned char  size(1) Largest target is 0

    sp__utoa	PTR unsigned char  size(1) Largest target is 16
		 -> Lcd_Write_Int@temp(BANK0[16]), 

    Lcd_Write_String@a	PTR unsigned char  size(1) Largest target is 16
		 -> Lcd_Write_Int@temp(BANK0[16]), welcomeMessage@msg(BANK0[8]), 

    sp__strcpy	PTR unsigned char  size(1) Largest target is 8
		 -> welcomeMessage@msg(BANK0[8]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _isr in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_Lcd_Write_Int
    _welcomeMessage->_Lcd_Set_Cursor
    _delay_1000ms->_delay_100ms
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Clear->_Lcd_Cmd
    ___wmul->___lwdiv
    _Lcd_Write_Int->_utoa
    _utoa->___lwdiv
    ___lwdiv->___lwmod
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Init->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port

Critical Paths under _isr in BANK0

    _isr->i1_delay_100ms

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0    7637
                                             42 BANK0      4     4      0
                          _Lcd_Clear
                           _Lcd_Init
                     _Lcd_Set_Cursor
                     _Lcd_Write_Char
                      _Lcd_Write_Int
                            ___lwdiv
                            ___lwmod
                             ___wmul
                        _delay_100ms
                            _readADC
                     _welcomeMessage
 ---------------------------------------------------------------------------------
 (1) _welcomeMessage                                      12    12      0    1766
                                             14 BANK0     12    12      0
                          _Lcd_Clear
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
                       _delay_1000ms
                             _strcpy
 ---------------------------------------------------------------------------------
 (2) _strcpy                                               3     2      1     184
                                              4 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (2) _delay_1000ms                                         2     2      0      46
                                              6 BANK0      2     2      0
                        _delay_100ms
 ---------------------------------------------------------------------------------
 (3) _delay_100ms                                          2     2      0       0
                                              4 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _Lcd_Set_Cursor                                       6     5      1     988
                                              8 BANK0      6     5      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Clear                                            2     2      0     110
                                              8 BANK0      2     2      0
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _readADC                                              8     6      2     208
                                              4 BANK0      8     6      2
 ---------------------------------------------------------------------------------
 (1) ___wmul                                               6     2      4     244
                                             16 BANK0      6     2      4
                            ___lwdiv (ARG)
                            ___lwmod (ARG)
 ---------------------------------------------------------------------------------
 (1) _Lcd_Write_Int                                       18    16      2    2622
                                             24 BANK0     18    16      2
                   _Lcd_Write_String
                               _utoa
 ---------------------------------------------------------------------------------
 (2) _utoa                                                 8     4      4    1879
                                             16 BANK0      8     4      4
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (1) ___lwmod                                              5     1      4     463
                                              4 BANK0      5     1      4
 ---------------------------------------------------------------------------------
 (1) ___lwdiv                                              7     3      4     770
                                              9 BANK0      7     3      4
                            ___lwmod (ARG)
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_String                                     4     4      0     367
                                              9 BANK0      4     4      0
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (3) _Lcd_Write_Char                                       4     4      0     178
                                              5 BANK0      4     4      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             2     2      0     198
                                              8 BANK0      2     2      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (3) _Lcd_Cmd                                              3     3      0     110
                                              5 BANK0      3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (4) _Lcd_Port                                             1     1      0      88
                                              4 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _isr                                                  2     2      0       0
                                              2 BANK0      2     2      0
                      i1_delay_100ms
 ---------------------------------------------------------------------------------
 (6) i1_delay_100ms                                        2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Lcd_Clear
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Init
     _Lcd_Cmd
     _Lcd_Port
   _Lcd_Set_Cursor
     _Lcd_Cmd
   _Lcd_Write_Char
     _Lcd_Port
   _Lcd_Write_Int
     _Lcd_Write_String
       _Lcd_Write_Char
     _utoa
       ___lwdiv
         ___lwmod (ARG)
       ___lwmod
   ___lwdiv
   ___lwmod
   ___wmul
     ___lwdiv (ARG)
     ___lwmod (ARG)
   _delay_100ms
   _readADC
   _welcomeMessage
     _Lcd_Clear
     _Lcd_Set_Cursor
     _Lcd_Write_String
     _delay_1000ms
       _delay_100ms
     _strcpy

 _isr (ROOT)
   i1_delay_100ms

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               42     2E      3A       3       87.9%
BITBANK0            42      0       0       5        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               0      0       0       1        0.0%
BITCOMMON            0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      3A       6        0.0%
ABS                  0      0      3A       4        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA              40      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.41 build 20230208172133 
Symbol Table                                                                                   Tue May 02 14:58:25 2023

                       pc 0002                        l90 02C3                        l84 02B4  
                      l85 02B5                        l86 02B9                        l87 02BA  
                      l88 02BE                        l89 02BF                        fsr 0004  
     ___wmul@multiplicand 001E                       l228 0265                       l688 00DB  
                     _RA0 0028                       _RA1 0029                       _RA2 002A  
                     _RB1 0031                       _RB2 0032                       _RB3 0033  
                     _RB4 0034                       _RB5 0035                       _RB6 0036  
                     _RB7 0037                       u425 0243                       u515 01B1  
                     u445 0145                       u605 0199                       u535 01C2  
                     u465 0151                       u545 01CB                       u475 015D  
                     u715 0266                       u660 0213                       u485 0167  
                     u725 026D                       u565 02D8                       u807 011B  
                     u817 024D                       u585 0180                       u827 0256  
                     u837 01E0                       u757 0324                       u847 01EB  
                     u767 02F5                       u857 01F5                       u777 00F4  
                     u867 02E5                       u787 00FA                       u797 0109  
                     _isr 0308                       fsr0 0004                       indf 0000  
    __end_of_delay_1000ms 02DB                      l1220 027F                      l1140 0142  
                    l1204 018F                      l1142 0150                      l1230 00A0  
                    l1302 00F2                      l1152 0171                      l1240 00BB  
                    l1400 004E                      l1170 01CA                      l1226 0299  
                    l1148 0166                      l1164 01AE                      l1166 01BC  
                    l1174 01D5                      l1318 0107                      l1328 0116  
                    l1184 02C7                      l1346 025D                      l1398 0030  
                    ?_isr 000C                      STR_1 031A         ?_Lcd_Write_String 000C  
                    _main 0022                      btemp 004E                      _utoa 009B  
                    start 000B        ??_Lcd_Write_String 0015           __end_of_Lcd_Cmd 02ED  
                   ??_isr 000E                     ?_main 000C                     ?_utoa 001C  
         __end_of___lwdiv 0176           __end_of___lwmod 01DA                     _TRISA 0085  
                   _TRISB 0086                     u87_27 032E               readADC@bits 0016  
         __end_of_readADC 013A               readADC@volt 0014                     pclath 000A  
                   utoa@c 0022                     utoa@v 0020                     status 0003  
                   wtemp0 004E          __end_of_Lcd_Init 020B          __end_of_Lcd_Port 02C5  
         __initialization 000C              __end_of_main 009B              __end_of_utoa 00EF  
                  ??_main 0000                    ??_utoa 0000             i1_delay_100ms 032A  
               ??_Lcd_Cmd 0011          ??_welcomeMessage 001A                    _adcVal 0044  
                  ___wmul 025B                 ??___lwdiv 0000                 ??___lwmod 0000  
                  main@d1 0036                    main@d2 0038                    _strcpy 0296  
   __end_of_Lcd_Write_Int 0308                 ??_readADC 0012                    saved_w 004E  
          ?i1_delay_100ms 000C           Lcd_Set_Cursor@a 0016           Lcd_Set_Cursor@b 0014  
         Lcd_Set_Cursor@y 0018           Lcd_Set_Cursor@z 0017   __end_of__initialization 0020  
       __end_of_Lcd_Clear 02FB              _delay_1000ms 02C5            __pcstackCOMMON 0000  
            __pidataBANK0 0334            _Lcd_Set_Cursor 0176            _OPTION_REGbits 0081  
               ?_Lcd_Init 000C                 ?_Lcd_Port 000C            Lcd_Write_Int@a 0024  
              __pbssBANK0 0042             delay_1000ms@i 0012                __pmaintext 0022  
                 ?___wmul 001C                __pintentry 0004    __end_of_Lcd_Set_Cursor 01A8  
                 ?_strcpy 0010           ??i1_delay_100ms 000C                ??_Lcd_Init 0014  
              ??_Lcd_Port 0000                __stringtab 0314            _Lcd_Write_Char 0238  
                 _Lcd_Cmd 02DB                   ___lwdiv 013A                   ___lwmod 01A8  
           readADC@rxData 0017           ?_Lcd_Set_Cursor 0014                   __ptext1 020B  
                 __ptext2 0296                   __ptext3 02C5                   __ptext4 031F  
                 __ptext5 0176                   __ptext6 02ED                   __ptext7 00EF  
                 __ptext8 025B                   __ptext9 02FB                   _readADC 00EF  
           ??_delay_100ms 0010    __end_of_Lcd_Write_Char 025B      end_of_initialization 0020  
               Lcd_Port@a 0010                   utoa@buf 0023         Lcd_Write_Int@temp 0026  
                 utoa@val 001C                _toggleHold 0042         welcomeMessage@msg 001E  
         ?_Lcd_Write_Char 000C         Lcd_Write_String@a 0018         Lcd_Write_String@i 0016  
     __end_of_delay_100ms 032A                 _Lcd_Clear 02ED            __end_of___wmul 027C  
        _Lcd_Write_String 027C            __end_of_strcpy 02AE       start_initialization 000C  
             __end_of_isr 0314                ?_Lcd_Clear 000C                  ??___wmul 0000  
             __pdataBANK0 003A           Lcd_Write_Char@a 0014           Lcd_Write_Char@y 0013  
                ??_strcpy 0000                 ___latbits 0000             __pcstackBANK0 000C  
             _delay_100ms 031F                  ?_Lcd_Cmd 000C          ___lwdiv@dividend 0017  
        ??_Lcd_Set_Cursor 0015                  ?___lwdiv 0015                  ?___lwmod 0010  
               __pstrings 0314                  ?_readADC 0010             _Lcd_Write_Int 02FB  
   __end_ofi1_delay_100ms 0334          ___lwdiv@quotient 0019         interrupt_function 0004  
          ___wmul@product 0020                  Lcd_Cmd@a 0013               ??_Lcd_Clear 0014  
             __stringbase 0319         ___wmul@multiplier 001C            ?_Lcd_Write_Int 0024  
        ??_Lcd_Write_Char 0011                  _Lcd_Init 01DA                  _Lcd_Port 02AE  
__end_of_Lcd_Write_String 0296             ?_delay_1000ms 000C        __end_of__stringtab 031A  
          _welcomeMessage 020B           ___lwdiv@divisor 0015           ___lwdiv@counter 001B  
                __ptext10 009B                  __ptext11 01A8                  __ptext12 013A  
                __ptext13 027C                  __ptext14 0238                  __ptext15 01DA  
                __ptext16 02DB                  __ptext17 02AE                  __ptext18 0308  
                __ptext19 032A                strcpy@from 0010            ??_delay_1000ms 0000  
         ??_Lcd_Write_Int 0000    __end_of_welcomeMessage 0238                _INTCONbits 000B  
            ?_delay_100ms 000C        Lcd_Write_Char@temp 0012                  intlevel1 0000  
        ___lwmod@dividend 0012                 stringcode 0314        Lcd_Set_Cursor@temp 0019  
         ?_welcomeMessage 000C                  utoa@base 001E           ___lwmod@divisor 0010  
                strcpy@cp 0012                  strcpy@to 0011           ___lwmod@counter 0014  
                stringdir 0314                  stringtab 0314        welcomeMessage@F330 003A  

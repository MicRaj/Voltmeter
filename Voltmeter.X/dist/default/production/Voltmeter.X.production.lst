

Microchip MPLAB XC8 Assembler V2.41 build 20230208172133 
                                                                                               Tue May 02 16:15:13 2023

Microchip MPLAB XC8 C Compiler v2.41 (Free license) build 20230208172133 Og9 
     1                           	processor	16F84A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2,noexec
     5                           	psect	strings,global,class=STRING,delta=2,noexec
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    11                           	psect	maintext,global,class=CODE,split=1,delta=2
    12                           	psect	text1,local,class=CODE,merge=1,delta=2
    13                           	psect	text2,local,class=CODE,merge=1,delta=2,group=2
    14                           	psect	text3,local,class=CODE,merge=1,delta=2
    15                           	psect	text4,local,class=CODE,merge=1,delta=2
    16                           	psect	text5,local,class=CODE,merge=1,delta=2
    17                           	psect	text6,local,class=CODE,merge=1,delta=2
    18                           	psect	text7,local,class=CODE,merge=1,delta=2
    19                           	psect	text8,local,class=CODE,merge=1,delta=2
    20                           	psect	text9,local,class=CODE,merge=1,delta=2,group=1
    21                           	psect	text10,local,class=CODE,merge=1,delta=2
    22                           	psect	text11,local,class=CODE,merge=1,delta=2,group=2
    23                           	psect	text12,local,class=CODE,merge=1,delta=2,group=1
    24                           	psect	text13,local,class=CODE,merge=1,delta=2,group=1
    25                           	psect	text14,local,class=CODE,merge=1,delta=2
    26                           	psect	text15,local,class=CODE,merge=1,delta=2
    27                           	psect	text16,local,class=CODE,merge=1,delta=2
    28                           	psect	text17,local,class=CODE,merge=1,delta=2
    29                           	psect	text18,local,class=CODE,merge=1,delta=2
    30                           	psect	text19,local,class=CODE,merge=1,delta=2
    31                           	psect	intentry,global,class=CODE,delta=2
    32                           	psect	text20,local,class=CODE,merge=1,delta=2
    33                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    34                           	dabs	1,0x4E,2
    35     0000                     
    36                           ; Version 2.20
    37                           ; Generated 12/02/2020 GMT
    38                           ; 
    39                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    40                           ; All rights reserved.
    41                           ; 
    42                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    43                           ; 
    44                           ; Redistribution and use in source and binary forms, with or without modification, are
    45                           ; permitted provided that the following conditions are met:
    46                           ; 
    47                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    48                           ;        conditions and the following disclaimer.
    49                           ; 
    50                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    51                           ;        of conditions and the following disclaimer in the documentation and/or other
    52                           ;        materials provided with the distribution.
    53                           ; 
    54                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    55                           ;        software without specific prior written permission.
    56                           ; 
    57                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    58                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    59                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    60                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    61                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    62                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    63                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    64                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    65                           ; 
    66                           ; 
    67                           ; Code-generator required, PIC16F84A Definitions
    68                           ; 
    69                           ; SFR Addresses
    70     0000                     	;# 
    71     0001                     	;# 
    72     0002                     	;# 
    73     0003                     	;# 
    74     0004                     	;# 
    75     0005                     	;# 
    76     0006                     	;# 
    77     0008                     	;# 
    78     0009                     	;# 
    79     000A                     	;# 
    80     000B                     	;# 
    81     0081                     	;# 
    82     0085                     	;# 
    83     0086                     	;# 
    84     0088                     	;# 
    85     0089                     	;# 
    86     0000                     	;# 
    87     0001                     	;# 
    88     0002                     	;# 
    89     0003                     	;# 
    90     0004                     	;# 
    91     0005                     	;# 
    92     0006                     	;# 
    93     0008                     	;# 
    94     0009                     	;# 
    95     000A                     	;# 
    96     000B                     	;# 
    97     0081                     	;# 
    98     0085                     	;# 
    99     0086                     	;# 
   100     0088                     	;# 
   101     0089                     	;# 
   102     0000                     	;# 
   103     0001                     	;# 
   104     0002                     	;# 
   105     0003                     	;# 
   106     0004                     	;# 
   107     0005                     	;# 
   108     0006                     	;# 
   109     0008                     	;# 
   110     0009                     	;# 
   111     000A                     	;# 
   112     000B                     	;# 
   113     0081                     	;# 
   114     0085                     	;# 
   115     0086                     	;# 
   116     0088                     	;# 
   117     0089                     	;# 
   118     0000                     	;# 
   119     0001                     	;# 
   120     0002                     	;# 
   121     0003                     	;# 
   122     0004                     	;# 
   123     0005                     	;# 
   124     0006                     	;# 
   125     0008                     	;# 
   126     0009                     	;# 
   127     000A                     	;# 
   128     000B                     	;# 
   129     0081                     	;# 
   130     0085                     	;# 
   131     0086                     	;# 
   132     0088                     	;# 
   133     0089                     	;# 
   134                           
   135                           	psect	idataBANK0
   136     03E1                     __pidataBANK0:
   137                           
   138                           ;initializer for welcomeMessage@F331
   139     03E1  3457               	retlw	87
   140     03E2  3465               	retlw	101
   141     03E3  346C               	retlw	108
   142     03E4  3463               	retlw	99
   143     03E5  346F               	retlw	111
   144     03E6  346D               	retlw	109
   145     03E7  3465               	retlw	101
   146     03E8  3400               	retlw	0
   147     000B                     _INTCONbits	set	11
   148     002B                     _RA3	set	43
   149     0036                     _RB6	set	54
   150     002A                     _RA2	set	42
   151     0028                     _RA0	set	40
   152     0034                     _RB4	set	52
   153     0033                     _RB3	set	51
   154     0032                     _RB2	set	50
   155     0031                     _RB1	set	49
   156     0029                     _RA1	set	41
   157     0035                     _RB5	set	53
   158     0037                     _RB7	set	55
   159     0081                     _OPTION_REGbits	set	129
   160     0085                     _TRISA	set	133
   161     0086                     _TRISB	set	134
   162                           
   163                           	psect	strings
   164     03C1                     __pstrings:
   165     03C1                     stringtab:
   166     03C1                     __stringtab:
   167     03C1                     stringcode:	
   168                           ;	String table - string pointers are 1 byte each
   169                           
   170     03C1                     stringdir:
   171     03C1  3003               	movlw	high stringdir
   172     03C2  008A               	movwf	10
   173     03C3  0804               	movf	4,w
   174     03C4  0A84               	incf	4,f
   175     03C5  0782               	addwf	2,f
   176     03C6                     __stringbase:
   177     03C6  3400               	retlw	0
   178     03C7                     __end_of__stringtab:
   179     03C7                     STR_1:
   180     03C7  3430               	retlw	48	;'0'
   181     03C8  342D               	retlw	45	;'-'
   182     03C9  3435               	retlw	53	;'5'
   183     03CA  3456               	retlw	86	;'V'
   184     03CB  3400               	retlw	0
   185                           
   186                           	psect	cinit
   187     000C                     start_initialization:	
   188                           ; #config settings
   189                           
   190     000C                     __initialization:
   191                           
   192                           ; Initialize objects allocated to BANK0
   193     000C  23E1               	fcall	__pidataBANK0	;fetch initializer
   194     000D  00BE               	movwf	__pdataBANK0& (0+127)
   195     000E  23E2               	fcall	__pidataBANK0+1	;fetch initializer
   196     000F  00BF               	movwf	(__pdataBANK0+1)& (0+127)
   197     0010  23E3               	fcall	__pidataBANK0+2	;fetch initializer
   198     0011  00C0               	movwf	(__pdataBANK0+2)& (0+127)
   199     0012  23E4               	fcall	__pidataBANK0+3	;fetch initializer
   200     0013  00C1               	movwf	(__pdataBANK0+3)& (0+127)
   201     0014  23E5               	fcall	__pidataBANK0+4	;fetch initializer
   202     0015  00C2               	movwf	(__pdataBANK0+4)& (0+127)
   203     0016  23E6               	fcall	__pidataBANK0+5	;fetch initializer
   204     0017  00C3               	movwf	(__pdataBANK0+5)& (0+127)
   205     0018  23E7               	fcall	__pidataBANK0+6	;fetch initializer
   206     0019  00C4               	movwf	(__pdataBANK0+6)& (0+127)
   207     001A  23E8               	fcall	__pidataBANK0+7	;fetch initializer
   208     001B  00C5               	movwf	(__pdataBANK0+7)& (0+127)
   209                           
   210                           ; Clear objects allocated to BANK0
   211     001C  01C6               	clrf	__pbssBANK0& (0+127)
   212     001D  01C7               	clrf	(__pbssBANK0+1)& (0+127)
   213     001E  01C8               	clrf	(__pbssBANK0+2)& (0+127)
   214     001F  01C9               	clrf	(__pbssBANK0+3)& (0+127)
   215     0020                     end_of_initialization:	
   216                           ;End of C runtime variable initialization code
   217                           
   218     0020                     __end_of__initialization:
   219     0020  0183               	clrf	3
   220     0021  2822               	ljmp	_main	;jump to C main() function
   221                           
   222                           	psect	bssBANK0
   223     0046                     __pbssBANK0:
   224     0046                     _toggleHold:
   225     0046                     	ds	2
   226     0048                     _adcVal:
   227     0048                     	ds	2
   228                           
   229                           	psect	dataBANK0
   230     003E                     __pdataBANK0:
   231     003E                     welcomeMessage@F331:
   232     003E                     	ds	8
   233                           
   234                           	psect	cstackCOMMON
   235     0000                     __pcstackCOMMON:
   236     0000                     ??_strcpy:
   237     0000                     ??_Lcd_Write_Int:	
   238                           ; 1 bytes @ 0x0
   239                           
   240     0000                     ??_utoa:	
   241                           ; 1 bytes @ 0x0
   242                           
   243     0000                     ??_delay_1000ms:	
   244                           ; 1 bytes @ 0x0
   245                           
   246     0000                     ??_main:	
   247                           ; 1 bytes @ 0x0
   248                           
   249     0000                     ??_Lcd_Port:	
   250                           ; 1 bytes @ 0x0
   251                           
   252     0000                     ??___wmul:	
   253                           ; 1 bytes @ 0x0
   254                           
   255     0000                     ??___lwdiv:	
   256                           ; 1 bytes @ 0x0
   257                           
   258     0000                     ??___lwmod:	
   259                           ; 1 bytes @ 0x0
   260                           
   261                           
   262                           	psect	cstackBANK0
   263     000C                     __pcstackBANK0:	
   264                           ; 1 bytes @ 0x0
   265                           
   266     000C                     ?_Lcd_Clear:
   267     000C                     ?_Lcd_Write_String:	
   268                           ; 1 bytes @ 0x0
   269                           
   270     000C                     ?_Lcd_Init:	
   271                           ; 1 bytes @ 0x0
   272                           
   273     000C                     ?_Lcd_Write_Char:	
   274                           ; 1 bytes @ 0x0
   275                           
   276     000C                     ?_delay_100ms:	
   277                           ; 1 bytes @ 0x0
   278                           
   279     000C                     ?_delay_1000ms:	
   280                           ; 1 bytes @ 0x0
   281                           
   282     000C                     ?_isr:	
   283                           ; 1 bytes @ 0x0
   284                           
   285     000C                     ?_welcomeMessage:	
   286                           ; 1 bytes @ 0x0
   287                           
   288     000C                     ?_main:	
   289                           ; 1 bytes @ 0x0
   290                           
   291     000C                     ?_Lcd_Port:	
   292                           ; 1 bytes @ 0x0
   293                           
   294     000C                     ?_Lcd_Cmd:	
   295                           ; 1 bytes @ 0x0
   296                           
   297     000C                     ?i1_delay_100ms:	
   298                           ; 1 bytes @ 0x0
   299                           
   300     000C                     ??i1_delay_100ms:	
   301                           ; 1 bytes @ 0x0
   302                           
   303                           
   304                           ; 1 bytes @ 0x0
   305     000C                     	ds	2
   306     000E                     ??_isr:
   307                           
   308                           ; 1 bytes @ 0x2
   309     000E                     	ds	2
   310     0010                     ?_strcpy:
   311     0010                     ??_delay_100ms:	
   312                           ; 1 bytes @ 0x4
   313                           
   314     0010                     ?_readADC1:	
   315                           ; 1 bytes @ 0x4
   316                           
   317     0010                     ?_readADC2:	
   318                           ; 2 bytes @ 0x4
   319                           
   320     0010                     ?___lwmod:	
   321                           ; 2 bytes @ 0x4
   322                           
   323     0010                     Lcd_Port@a:	
   324                           ; 2 bytes @ 0x4
   325                           
   326     0010                     strcpy@from:	
   327                           ; 1 bytes @ 0x4
   328                           
   329     0010                     ___lwmod@divisor:	
   330                           ; 1 bytes @ 0x4
   331                           
   332                           
   333                           ; 2 bytes @ 0x4
   334     0010                     	ds	1
   335     0011                     ??_Lcd_Write_Char:
   336     0011                     ??_Lcd_Cmd:	
   337                           ; 1 bytes @ 0x5
   338                           
   339     0011                     strcpy@to:	
   340                           ; 1 bytes @ 0x5
   341                           
   342                           
   343                           ; 1 bytes @ 0x5
   344     0011                     	ds	1
   345     0012                     ??_readADC1:
   346     0012                     ??_readADC2:	
   347                           ; 1 bytes @ 0x6
   348                           
   349     0012                     Lcd_Write_Char@temp:	
   350                           ; 1 bytes @ 0x6
   351                           
   352     0012                     strcpy@cp:	
   353                           ; 1 bytes @ 0x6
   354                           
   355     0012                     delay_1000ms@i:	
   356                           ; 1 bytes @ 0x6
   357                           
   358     0012                     ___lwmod@dividend:	
   359                           ; 2 bytes @ 0x6
   360                           
   361                           
   362                           ; 2 bytes @ 0x6
   363     0012                     	ds	1
   364     0013                     Lcd_Cmd@a:
   365     0013                     Lcd_Write_Char@y:	
   366                           ; 1 bytes @ 0x7
   367                           
   368                           
   369                           ; 1 bytes @ 0x7
   370     0013                     	ds	1
   371     0014                     ??_Lcd_Clear:
   372     0014                     ?_Lcd_Set_Cursor:	
   373                           ; 1 bytes @ 0x8
   374                           
   375     0014                     ??_Lcd_Init:	
   376                           ; 1 bytes @ 0x8
   377                           
   378     0014                     Lcd_Set_Cursor@b:	
   379                           ; 1 bytes @ 0x8
   380                           
   381     0014                     Lcd_Write_Char@a:	
   382                           ; 1 bytes @ 0x8
   383                           
   384     0014                     ___lwmod@counter:	
   385                           ; 1 bytes @ 0x8
   386                           
   387     0014                     readADC1@volt:	
   388                           ; 1 bytes @ 0x8
   389                           
   390     0014                     readADC2@volt:	
   391                           ; 2 bytes @ 0x8
   392                           
   393                           
   394                           ; 2 bytes @ 0x8
   395     0014                     	ds	1
   396     0015                     ??_Lcd_Set_Cursor:
   397     0015                     ??_Lcd_Write_String:	
   398                           ; 1 bytes @ 0x9
   399                           
   400     0015                     ?___lwdiv:	
   401                           ; 1 bytes @ 0x9
   402                           
   403     0015                     ___lwdiv@divisor:	
   404                           ; 2 bytes @ 0x9
   405                           
   406                           
   407                           ; 2 bytes @ 0x9
   408     0015                     	ds	1
   409     0016                     Lcd_Set_Cursor@a:
   410     0016                     readADC1@bits:	
   411                           ; 1 bytes @ 0xA
   412                           
   413     0016                     readADC2@bits:	
   414                           ; 1 bytes @ 0xA
   415                           
   416     0016                     Lcd_Write_String@i:	
   417                           ; 1 bytes @ 0xA
   418                           
   419                           
   420                           ; 2 bytes @ 0xA
   421     0016                     	ds	1
   422     0017                     Lcd_Set_Cursor@z:
   423     0017                     readADC1@rxData:	
   424                           ; 1 bytes @ 0xB
   425                           
   426     0017                     readADC2@rxData:	
   427                           ; 1 bytes @ 0xB
   428                           
   429     0017                     ___lwdiv@dividend:	
   430                           ; 1 bytes @ 0xB
   431                           
   432                           
   433                           ; 2 bytes @ 0xB
   434     0017                     	ds	1
   435     0018                     Lcd_Set_Cursor@y:
   436     0018                     Lcd_Write_String@a:	
   437                           ; 1 bytes @ 0xC
   438                           
   439                           
   440                           ; 1 bytes @ 0xC
   441     0018                     	ds	1
   442     0019                     Lcd_Set_Cursor@temp:
   443     0019                     ___lwdiv@quotient:	
   444                           ; 1 bytes @ 0xD
   445                           
   446                           
   447                           ; 2 bytes @ 0xD
   448     0019                     	ds	1
   449     001A                     ??_welcomeMessage:
   450                           
   451                           ; 1 bytes @ 0xE
   452     001A                     	ds	1
   453     001B                     ___lwdiv@counter:
   454                           
   455                           ; 1 bytes @ 0xF
   456     001B                     	ds	1
   457     001C                     ?_utoa:
   458     001C                     ?___wmul:	
   459                           ; 1 bytes @ 0x10
   460                           
   461     001C                     ___wmul@multiplier:	
   462                           ; 2 bytes @ 0x10
   463                           
   464     001C                     utoa@val:	
   465                           ; 2 bytes @ 0x10
   466                           
   467                           
   468                           ; 2 bytes @ 0x10
   469     001C                     	ds	2
   470     001E                     ___wmul@multiplicand:
   471     001E                     utoa@base:	
   472                           ; 2 bytes @ 0x12
   473                           
   474     001E                     welcomeMessage@msg:	
   475                           ; 2 bytes @ 0x12
   476                           
   477                           
   478                           ; 8 bytes @ 0x12
   479     001E                     	ds	2
   480     0020                     ___wmul@product:
   481     0020                     utoa@v:	
   482                           ; 2 bytes @ 0x14
   483                           
   484                           
   485                           ; 2 bytes @ 0x14
   486     0020                     	ds	2
   487     0022                     utoa@c:
   488                           
   489                           ; 1 bytes @ 0x16
   490     0022                     	ds	1
   491     0023                     utoa@buf:
   492                           
   493                           ; 1 bytes @ 0x17
   494     0023                     	ds	1
   495     0024                     ?_Lcd_Write_Int:
   496     0024                     Lcd_Write_Int@a:	
   497                           ; 1 bytes @ 0x18
   498                           
   499                           
   500                           ; 2 bytes @ 0x18
   501     0024                     	ds	2
   502     0026                     Lcd_Write_Int@temp:
   503                           
   504                           ; 16 bytes @ 0x1A
   505     0026                     	ds	16
   506     0036                     main@d1:
   507                           
   508                           ; 2 bytes @ 0x2A
   509     0036                     	ds	2
   510     0038                     main@d2:
   511                           
   512                           ; 2 bytes @ 0x2C
   513     0038                     	ds	2
   514     003A                     main@d3:
   515                           
   516                           ; 2 bytes @ 0x2E
   517     003A                     	ds	2
   518     003C                     main@d4:
   519                           
   520                           ; 2 bytes @ 0x30
   521     003C                     	ds	2
   522                           
   523                           	psect	maintext
   524     0022                     __pmaintext:	
   525 ;;
   526 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   527 ;;
   528 ;; *************** function _main *****************
   529 ;; Defined at:
   530 ;;		line 74 in file "main.c"
   531 ;; Parameters:    Size  Location     Type
   532 ;;		None
   533 ;; Auto vars:     Size  Location     Type
   534 ;;  d4              2   48[BANK0 ] unsigned short 
   535 ;;  d3              2   46[BANK0 ] unsigned short 
   536 ;;  d2              2   44[BANK0 ] unsigned short 
   537 ;;  d1              2   42[BANK0 ] unsigned short 
   538 ;; Return value:  Size  Location     Type
   539 ;;                  1    wreg      void 
   540 ;; Registers used:
   541 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   542 ;; Tracked objects:
   543 ;;		On entry : B00/0
   544 ;;		On exit  : 0/0
   545 ;;		Unchanged: 0/0
   546 ;; Data sizes:     COMMON   BANK0
   547 ;;      Params:         0       0
   548 ;;      Locals:         0       8
   549 ;;      Temps:          0       0
   550 ;;      Totals:         0       8
   551 ;;Total ram usage:        8 bytes
   552 ;; Hardware stack levels required when called: 6
   553 ;; This function calls:
   554 ;;		_Lcd_Clear
   555 ;;		_Lcd_Init
   556 ;;		_Lcd_Set_Cursor
   557 ;;		_Lcd_Write_Char
   558 ;;		_Lcd_Write_Int
   559 ;;		___lwdiv
   560 ;;		___lwmod
   561 ;;		___wmul
   562 ;;		_delay_100ms
   563 ;;		_readADC1
   564 ;;		_readADC2
   565 ;;		_welcomeMessage
   566 ;; This function is called by:
   567 ;;		Startup code after reset
   568 ;; This function uses a non-reentrant model
   569 ;;
   570                           
   571     0022                     _main:	
   572                           ;psect for function _main
   573                           
   574                           
   575                           ;main.c: 76:     TRISB = 0b01000001;
   576                           
   577                           ;incstack = 0
   578                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   579     0022  3041               	movlw	65
   580     0023  1683               	bsf	3,5	;RP0=1, select bank1
   581     0024  0086               	movwf	6	;volatile
   582                           
   583                           ;main.c: 77:     TRISA = 0b01000;
   584     0025  3008               	movlw	8
   585     0026  0085               	movwf	5	;volatile
   586                           
   587                           ;main.c: 79:     RB7 = 1;
   588     0027  1283               	bcf	3,5	;RP0=0, select bank0
   589     0028  1786               	bsf	6,7	;volatile
   590                           
   591                           ;main.c: 80:     RB5 = 0;
   592     0029  1286               	bcf	6,5	;volatile
   593                           
   594                           ;main.c: 82:     RA1 = 0;
   595     002A  1085               	bcf	5,1	;volatile
   596                           
   597                           ;main.c: 86:     OPTION_REGbits.INTEDG = 1;
   598     002B  1683               	bsf	3,5	;RP0=1, select bank1
   599     002C  1701               	bsf	1,6	;volatile
   600                           
   601                           ;main.c: 88:     INTCONbits.INTE = 1;
   602     002D  160B               	bsf	11,4	;volatile
   603                           
   604                           ;main.c: 90:     INTCONbits.GIE = 1;
   605     002E  178B               	bsf	11,7	;volatile
   606                           
   607                           ;main.c: 92:     Lcd_Init();
   608     002F  2287               	fcall	_Lcd_Init
   609                           
   610                           ;main.c: 93:     welcomeMessage();
   611     0030  22B8               	fcall	_welcomeMessage
   612     0031                     l1531:
   613                           
   614                           ;main.c: 99:         while (toggleHold) {
   615     0031  1283               	bcf	3,5	;RP0=0, select bank0
   616     0032  0846               	movf	_toggleHold,w
   617     0033  0447               	iorwf	_toggleHold+1,w
   618     0034  1903               	btfsc	3,2
   619     0035  2867               	goto	l1533
   620                           
   621                           ;main.c: 100:             Lcd_Set_Cursor(1, 1);
   622     0036  0194               	clrf	Lcd_Set_Cursor@b
   623     0037  0A94               	incf	Lcd_Set_Cursor@b,f
   624     0038  3001               	movlw	1
   625     0039  2223               	fcall	_Lcd_Set_Cursor
   626                           
   627                           ;main.c: 101:             Lcd_Write_Int(d1);
   628     003A  0837               	movf	main@d1+1,w
   629     003B  00A5               	movwf	Lcd_Write_Int@a+1
   630     003C  0836               	movf	main@d1,w
   631     003D  00A4               	movwf	Lcd_Write_Int@a
   632     003E  23A8               	fcall	_Lcd_Write_Int
   633                           
   634                           ;main.c: 102:             Lcd_Set_Cursor(1, 2);
   635     003F  3002               	movlw	2
   636     0040  0094               	movwf	Lcd_Set_Cursor@b
   637     0041  3001               	movlw	1
   638     0042  2223               	fcall	_Lcd_Set_Cursor
   639                           
   640                           ;main.c: 103:             Lcd_Write_Char('.');
   641     0043  302E               	movlw	46
   642     0044  22E5               	fcall	_Lcd_Write_Char
   643                           
   644                           ;main.c: 104:             Lcd_Set_Cursor(1, 3);
   645     0045  3003               	movlw	3
   646     0046  0094               	movwf	Lcd_Set_Cursor@b
   647     0047  3001               	movlw	1
   648     0048  2223               	fcall	_Lcd_Set_Cursor
   649                           
   650                           ;main.c: 105:             Lcd_Write_Int(d2);
   651     0049  0839               	movf	main@d2+1,w
   652     004A  00A5               	movwf	Lcd_Write_Int@a+1
   653     004B  0838               	movf	main@d2,w
   654     004C  00A4               	movwf	Lcd_Write_Int@a
   655     004D  23A8               	fcall	_Lcd_Write_Int
   656                           
   657                           ;main.c: 106:             Lcd_Set_Cursor(1, 6);
   658     004E  3006               	movlw	6
   659     004F  0094               	movwf	Lcd_Set_Cursor@b
   660     0050  3001               	movlw	1
   661     0051  2223               	fcall	_Lcd_Set_Cursor
   662                           
   663                           ;main.c: 107:             Lcd_Write_Int(d3);
   664     0052  083B               	movf	main@d3+1,w
   665     0053  00A5               	movwf	Lcd_Write_Int@a+1
   666     0054  083A               	movf	main@d3,w
   667     0055  00A4               	movwf	Lcd_Write_Int@a
   668     0056  23A8               	fcall	_Lcd_Write_Int
   669                           
   670                           ;main.c: 108:             Lcd_Set_Cursor(1, 7);
   671     0057  3007               	movlw	7
   672     0058  0094               	movwf	Lcd_Set_Cursor@b
   673     0059  3001               	movlw	1
   674     005A  2223               	fcall	_Lcd_Set_Cursor
   675                           
   676                           ;main.c: 109:             Lcd_Write_Char('.');
   677     005B  302E               	movlw	46
   678     005C  22E5               	fcall	_Lcd_Write_Char
   679                           
   680                           ;main.c: 110:             Lcd_Set_Cursor(1, 8);
   681     005D  3008               	movlw	8
   682     005E  0094               	movwf	Lcd_Set_Cursor@b
   683     005F  3001               	movlw	1
   684     0060  2223               	fcall	_Lcd_Set_Cursor
   685                           
   686                           ;main.c: 111:             Lcd_Write_Int(d4);
   687     0061  083D               	movf	main@d4+1,w
   688     0062  00A5               	movwf	Lcd_Write_Int@a+1
   689     0063  083C               	movf	main@d4,w
   690     0064  00A4               	movwf	Lcd_Write_Int@a
   691     0065  23A8               	fcall	_Lcd_Write_Int
   692     0066  2831               	goto	l1531
   693     0067                     l1533:
   694                           
   695                           ;main.c: 118:         adcVal = readADC1();
   696     0067  219C               	fcall	_readADC1
   697     0068  0811               	movf	?_readADC1+1,w
   698     0069  00C9               	movwf	_adcVal+1
   699     006A  0810               	movf	?_readADC1,w
   700     006B  00C8               	movwf	_adcVal
   701                           
   702                           ;main.c: 119:         d1 = adcVal / 204;
   703     006C  30CC               	movlw	204
   704     006D  0095               	movwf	___lwdiv@divisor
   705     006E  3000               	movlw	0
   706     006F  0096               	movwf	___lwdiv@divisor+1
   707     0070  0849               	movf	_adcVal+1,w
   708     0071  0098               	movwf	___lwdiv@dividend+1
   709     0072  0848               	movf	_adcVal,w
   710     0073  0097               	movwf	___lwdiv@dividend
   711     0074  21E7               	fcall	___lwdiv
   712     0075  0816               	movf	?___lwdiv+1,w
   713     0076  00B7               	movwf	main@d1+1
   714     0077  0815               	movf	?___lwdiv,w
   715     0078  00B6               	movwf	main@d1
   716                           
   717                           ;main.c: 120:         d2 = ((adcVal % 204) / 204) *10;
   718     0079  30CC               	movlw	204
   719     007A  0095               	movwf	___lwdiv@divisor
   720     007B  3000               	movlw	0
   721     007C  0096               	movwf	___lwdiv@divisor+1
   722     007D  0849               	movf	_adcVal+1,w
   723     007E  0093               	movwf	___lwmod@dividend+1
   724     007F  0848               	movf	_adcVal,w
   725     0080  0092               	movwf	___lwmod@dividend
   726     0081  30CC               	movlw	204
   727     0082  0090               	movwf	___lwmod@divisor
   728     0083  3000               	movlw	0
   729     0084  0091               	movwf	___lwmod@divisor+1
   730     0085  2255               	fcall	___lwmod
   731     0086  0811               	movf	?___lwmod+1,w
   732     0087  0098               	movwf	___lwdiv@dividend+1
   733     0088  0810               	movf	?___lwmod,w
   734     0089  0097               	movwf	___lwdiv@dividend
   735     008A  21E7               	fcall	___lwdiv
   736     008B  0816               	movf	?___lwdiv+1,w
   737     008C  009D               	movwf	___wmul@multiplier+1
   738     008D  0815               	movf	?___lwdiv,w
   739     008E  009C               	movwf	___wmul@multiplier
   740     008F  300A               	movlw	10
   741     0090  009E               	movwf	___wmul@multiplicand
   742     0091  3000               	movlw	0
   743     0092  009F               	movwf	___wmul@multiplicand+1
   744     0093  2308               	fcall	___wmul
   745     0094  081D               	movf	?___wmul+1,w
   746     0095  00B9               	movwf	main@d2+1
   747     0096  081C               	movf	?___wmul,w
   748     0097  00B8               	movwf	main@d2
   749                           
   750                           ;main.c: 121:         adcVal = readADC2();
   751     0098  2151               	fcall	_readADC2
   752     0099  0811               	movf	?_readADC2+1,w
   753     009A  00C9               	movwf	_adcVal+1
   754     009B  0810               	movf	?_readADC2,w
   755     009C  00C8               	movwf	_adcVal
   756                           
   757                           ;main.c: 122:         d3 = adcVal / 204;
   758     009D  30CC               	movlw	204
   759     009E  0095               	movwf	___lwdiv@divisor
   760     009F  3000               	movlw	0
   761     00A0  0096               	movwf	___lwdiv@divisor+1
   762     00A1  0849               	movf	_adcVal+1,w
   763     00A2  0098               	movwf	___lwdiv@dividend+1
   764     00A3  0848               	movf	_adcVal,w
   765     00A4  0097               	movwf	___lwdiv@dividend
   766     00A5  21E7               	fcall	___lwdiv
   767     00A6  0816               	movf	?___lwdiv+1,w
   768     00A7  00BB               	movwf	main@d3+1
   769     00A8  0815               	movf	?___lwdiv,w
   770     00A9  00BA               	movwf	main@d3
   771                           
   772                           ;main.c: 123:         d4 = ((adcVal % 204) / 204) *10;
   773     00AA  30CC               	movlw	204
   774     00AB  0095               	movwf	___lwdiv@divisor
   775     00AC  3000               	movlw	0
   776     00AD  0096               	movwf	___lwdiv@divisor+1
   777     00AE  0849               	movf	_adcVal+1,w
   778     00AF  0093               	movwf	___lwmod@dividend+1
   779     00B0  0848               	movf	_adcVal,w
   780     00B1  0092               	movwf	___lwmod@dividend
   781     00B2  30CC               	movlw	204
   782     00B3  0090               	movwf	___lwmod@divisor
   783     00B4  3000               	movlw	0
   784     00B5  0091               	movwf	___lwmod@divisor+1
   785     00B6  2255               	fcall	___lwmod
   786     00B7  0811               	movf	?___lwmod+1,w
   787     00B8  0098               	movwf	___lwdiv@dividend+1
   788     00B9  0810               	movf	?___lwmod,w
   789     00BA  0097               	movwf	___lwdiv@dividend
   790     00BB  21E7               	fcall	___lwdiv
   791     00BC  0816               	movf	?___lwdiv+1,w
   792     00BD  009D               	movwf	___wmul@multiplier+1
   793     00BE  0815               	movf	?___lwdiv,w
   794     00BF  009C               	movwf	___wmul@multiplier
   795     00C0  300A               	movlw	10
   796     00C1  009E               	movwf	___wmul@multiplicand
   797     00C2  3000               	movlw	0
   798     00C3  009F               	movwf	___wmul@multiplicand+1
   799     00C4  2308               	fcall	___wmul
   800     00C5  081D               	movf	?___wmul+1,w
   801     00C6  00BD               	movwf	main@d4+1
   802     00C7  081C               	movf	?___wmul,w
   803     00C8  00BC               	movwf	main@d4
   804                           
   805                           ;main.c: 126:         Lcd_Clear();
   806     00C9  239A               	fcall	_Lcd_Clear
   807                           
   808                           ;main.c: 127:         Lcd_Set_Cursor(1, 1);
   809     00CA  1283               	bcf	3,5	;RP0=0, select bank0
   810     00CB  0194               	clrf	Lcd_Set_Cursor@b
   811     00CC  0A94               	incf	Lcd_Set_Cursor@b,f
   812     00CD  3001               	movlw	1
   813     00CE  2223               	fcall	_Lcd_Set_Cursor
   814                           
   815                           ;main.c: 128:         Lcd_Write_Int(d1);
   816     00CF  0837               	movf	main@d1+1,w
   817     00D0  00A5               	movwf	Lcd_Write_Int@a+1
   818     00D1  0836               	movf	main@d1,w
   819     00D2  00A4               	movwf	Lcd_Write_Int@a
   820     00D3  23A8               	fcall	_Lcd_Write_Int
   821                           
   822                           ;main.c: 129:         Lcd_Set_Cursor(1, 2);
   823     00D4  3002               	movlw	2
   824     00D5  0094               	movwf	Lcd_Set_Cursor@b
   825     00D6  3001               	movlw	1
   826     00D7  2223               	fcall	_Lcd_Set_Cursor
   827                           
   828                           ;main.c: 130:         Lcd_Write_Char('.');
   829     00D8  302E               	movlw	46
   830     00D9  22E5               	fcall	_Lcd_Write_Char
   831                           
   832                           ;main.c: 131:         Lcd_Set_Cursor(1, 3);
   833     00DA  3003               	movlw	3
   834     00DB  0094               	movwf	Lcd_Set_Cursor@b
   835     00DC  3001               	movlw	1
   836     00DD  2223               	fcall	_Lcd_Set_Cursor
   837                           
   838                           ;main.c: 132:         Lcd_Write_Int(d2);
   839     00DE  0839               	movf	main@d2+1,w
   840     00DF  00A5               	movwf	Lcd_Write_Int@a+1
   841     00E0  0838               	movf	main@d2,w
   842     00E1  00A4               	movwf	Lcd_Write_Int@a
   843     00E2  23A8               	fcall	_Lcd_Write_Int
   844                           
   845                           ;main.c: 133:         Lcd_Set_Cursor(1, 6);
   846     00E3  3006               	movlw	6
   847     00E4  0094               	movwf	Lcd_Set_Cursor@b
   848     00E5  3001               	movlw	1
   849     00E6  2223               	fcall	_Lcd_Set_Cursor
   850                           
   851                           ;main.c: 134:         Lcd_Write_Int(d3);
   852     00E7  083B               	movf	main@d3+1,w
   853     00E8  00A5               	movwf	Lcd_Write_Int@a+1
   854     00E9  083A               	movf	main@d3,w
   855     00EA  00A4               	movwf	Lcd_Write_Int@a
   856     00EB  23A8               	fcall	_Lcd_Write_Int
   857                           
   858                           ;main.c: 135:         Lcd_Set_Cursor(1, 7);
   859     00EC  3007               	movlw	7
   860     00ED  0094               	movwf	Lcd_Set_Cursor@b
   861     00EE  3001               	movlw	1
   862     00EF  2223               	fcall	_Lcd_Set_Cursor
   863                           
   864                           ;main.c: 136:         Lcd_Write_Char('.');
   865     00F0  302E               	movlw	46
   866     00F1  22E5               	fcall	_Lcd_Write_Char
   867                           
   868                           ;main.c: 137:         Lcd_Set_Cursor(1, 8);
   869     00F2  3008               	movlw	8
   870     00F3  0094               	movwf	Lcd_Set_Cursor@b
   871     00F4  3001               	movlw	1
   872     00F5  2223               	fcall	_Lcd_Set_Cursor
   873                           
   874                           ;main.c: 138:         Lcd_Write_Int(d4);
   875     00F6  083D               	movf	main@d4+1,w
   876     00F7  00A5               	movwf	Lcd_Write_Int@a+1
   877     00F8  083C               	movf	main@d4,w
   878     00F9  00A4               	movwf	Lcd_Write_Int@a
   879     00FA  23A8               	fcall	_Lcd_Write_Int
   880                           
   881                           ;main.c: 139:         delay_100ms();
   882     00FB  23CC               	fcall	_delay_100ms
   883     00FC  2831               	goto	l1531
   884     00FD                     __end_of_main:
   885                           
   886                           	psect	text1
   887     02B8                     __ptext1:	
   888 ;; *************** function _welcomeMessage *****************
   889 ;; Defined at:
   890 ;;		line 52 in file "main.c"
   891 ;; Parameters:    Size  Location     Type
   892 ;;		None
   893 ;; Auto vars:     Size  Location     Type
   894 ;;  msg             8   18[BANK0 ] unsigned char [8]
   895 ;; Return value:  Size  Location     Type
   896 ;;                  1    wreg      void 
   897 ;; Registers used:
   898 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   899 ;; Tracked objects:
   900 ;;		On entry : 100/0
   901 ;;		On exit  : 0/0
   902 ;;		Unchanged: 0/0
   903 ;; Data sizes:     COMMON   BANK0
   904 ;;      Params:         0       0
   905 ;;      Locals:         0       8
   906 ;;      Temps:          0       4
   907 ;;      Totals:         0      12
   908 ;;Total ram usage:       12 bytes
   909 ;; Hardware stack levels used: 1
   910 ;; Hardware stack levels required when called: 5
   911 ;; This function calls:
   912 ;;		_Lcd_Clear
   913 ;;		_Lcd_Set_Cursor
   914 ;;		_Lcd_Write_String
   915 ;;		_delay_1000ms
   916 ;;		_strcpy
   917 ;; This function is called by:
   918 ;;		_main
   919 ;; This function uses a non-reentrant model
   920 ;;
   921                           
   922     02B8                     _welcomeMessage:	
   923                           ;psect for function _welcomeMessage
   924                           
   925                           
   926                           ;main.c: 54:     char msg[] = "Welcome";
   927                           
   928                           ;incstack = 0
   929                           ; Regs used in _welcomeMessage: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   930     02B8  301E               	movlw	welcomeMessage@msg& (0+255)
   931     02B9  0084               	movwf	4
   932     02BA  303E               	movlw	low welcomeMessage@F331
   933     02BB  009A               	movwf	??_welcomeMessage
   934     02BC  0804               	movf	4,w
   935     02BD  009B               	movwf	??_welcomeMessage+1
   936     02BE  3008               	movlw	8
   937     02BF  009C               	movwf	??_welcomeMessage+2
   938     02C0                     u690:
   939     02C0  081A               	movf	??_welcomeMessage,w
   940     02C1  0084               	movwf	4
   941     02C2  1383               	bcf	3,7	;select IRP bank0
   942     02C3  0800               	movf	0,w
   943     02C4  009D               	movwf	??_welcomeMessage+3
   944     02C5  0A9A               	incf	??_welcomeMessage,f
   945     02C6  081B               	movf	??_welcomeMessage+1,w
   946     02C7  0084               	movwf	4
   947     02C8  081D               	movf	??_welcomeMessage+3,w
   948     02C9  0080               	movwf	0
   949     02CA  0A9B               	incf	??_welcomeMessage+1,f
   950     02CB  0B9C               	decfsz	??_welcomeMessage+2,f
   951     02CC  2AC0               	goto	u690
   952                           
   953                           ;main.c: 55:     Lcd_Clear();
   954     02CD  239A               	fcall	_Lcd_Clear
   955                           
   956                           ;main.c: 56:     Lcd_Set_Cursor(1, 1);
   957     02CE  1283               	bcf	3,5	;RP0=0, select bank0
   958     02CF  0194               	clrf	Lcd_Set_Cursor@b
   959     02D0  0A94               	incf	Lcd_Set_Cursor@b,f
   960     02D1  3001               	movlw	1
   961     02D2  2223               	fcall	_Lcd_Set_Cursor
   962                           
   963                           ;main.c: 57:     Lcd_Write_String(msg);
   964     02D3  301E               	movlw	(low (welcomeMessage@msg| 0))& (0+255)
   965     02D4  2329               	fcall	_Lcd_Write_String
   966                           
   967                           ;main.c: 58:     delay_1000ms();
   968     02D5  2372               	fcall	_delay_1000ms
   969                           
   970                           ;main.c: 59:     Lcd_Clear();
   971     02D6  239A               	fcall	_Lcd_Clear
   972                           
   973                           ;main.c: 60:     Lcd_Set_Cursor(1, 1);
   974     02D7  1283               	bcf	3,5	;RP0=0, select bank0
   975     02D8  0194               	clrf	Lcd_Set_Cursor@b
   976     02D9  0A94               	incf	Lcd_Set_Cursor@b,f
   977     02DA  3001               	movlw	1
   978     02DB  2223               	fcall	_Lcd_Set_Cursor
   979                           
   980                           ;main.c: 61:     strcpy(msg, "0-5V");
   981     02DC  3001               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   982     02DD  0090               	movwf	strcpy@from
   983     02DE  301E               	movlw	(low (welcomeMessage@msg| 0))& (0+255)
   984     02DF  2343               	fcall	_strcpy
   985                           
   986                           ;main.c: 63:     Lcd_Write_String(msg);
   987     02E0  301E               	movlw	(low (welcomeMessage@msg| 0))& (0+255)
   988     02E1  2329               	fcall	_Lcd_Write_String
   989                           
   990                           ;main.c: 64:     delay_1000ms();
   991     02E2  2372               	fcall	_delay_1000ms
   992                           
   993                           ;main.c: 67:     Lcd_Clear();
   994     02E3  239A               	fcall	_Lcd_Clear
   995     02E4  0008               	return
   996     02E5                     __end_of_welcomeMessage:
   997                           
   998                           	psect	text2
   999     0343                     __ptext2:	
  1000 ;; *************** function _strcpy *****************
  1001 ;; Defined at:
  1002 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\strcpy.c"
  1003 ;; Parameters:    Size  Location     Type
  1004 ;;  to              1    wreg     PTR unsigned char 
  1005 ;;		 -> welcomeMessage@msg(8), 
  1006 ;;  from            1    4[BANK0 ] PTR const unsigned char 
  1007 ;;		 -> STR_1(5), 
  1008 ;; Auto vars:     Size  Location     Type
  1009 ;;  to              1    5[BANK0 ] PTR unsigned char 
  1010 ;;		 -> welcomeMessage@msg(8), 
  1011 ;;  cp              1    6[BANK0 ] PTR unsigned char 
  1012 ;;		 -> welcomeMessage@msg(8), 
  1013 ;; Return value:  Size  Location     Type
  1014 ;;                  1    wreg      PTR unsigned char 
  1015 ;; Registers used:
  1016 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath
  1017 ;; Tracked objects:
  1018 ;;		On entry : 100/0
  1019 ;;		On exit  : 900/0
  1020 ;;		Unchanged: 0/0
  1021 ;; Data sizes:     COMMON   BANK0
  1022 ;;      Params:         0       1
  1023 ;;      Locals:         0       2
  1024 ;;      Temps:          0       0
  1025 ;;      Totals:         0       3
  1026 ;;Total ram usage:        3 bytes
  1027 ;; Hardware stack levels used: 1
  1028 ;; Hardware stack levels required when called: 2
  1029 ;; This function calls:
  1030 ;;		Nothing
  1031 ;; This function is called by:
  1032 ;;		_welcomeMessage
  1033 ;; This function uses a non-reentrant model
  1034 ;;
  1035                           
  1036     0343                     _strcpy:	
  1037                           ;psect for function _strcpy
  1038                           
  1039                           
  1040                           ;incstack = 0
  1041                           ; Regs used in _strcpy: [wreg-fsr0h+status,2+status,0+btemp+1+pclath]
  1042                           ;strcpy@to stored from wreg
  1043     0343  0091               	movwf	strcpy@to
  1044     0344  0811               	movf	strcpy@to,w
  1045     0345  0092               	movwf	strcpy@cp
  1046     0346                     l1305:
  1047     0346  0810               	movf	strcpy@from,w
  1048     0347  0084               	movwf	4
  1049     0348  23C1               	fcall	stringdir
  1050     0349  00CF               	movwf	79
  1051     034A  0812               	movf	strcpy@cp,w
  1052     034B  0084               	movwf	4
  1053     034C  084F               	movf	79,w
  1054     034D  1383               	bcf	3,7	;select IRP bank0
  1055     034E  0080               	movwf	0
  1056     034F  0800               	movf	0,w
  1057     0350  1903               	btfsc	3,2
  1058     0351  0008               	return
  1059     0352  3001               	movlw	1
  1060     0353  00CF               	movwf	79
  1061     0354  084F               	movf	79,w
  1062     0355  0792               	addwf	strcpy@cp,f
  1063     0356  3001               	movlw	1
  1064     0357  00CF               	movwf	79
  1065     0358  084F               	movf	79,w
  1066     0359  0790               	addwf	strcpy@from,f
  1067     035A  2B46               	goto	l1305
  1068     035B                     __end_of_strcpy:
  1069                           
  1070                           	psect	text3
  1071     0372                     __ptext3:	
  1072 ;; *************** function _delay_1000ms *****************
  1073 ;; Defined at:
  1074 ;;		line 31 in file "main.c"
  1075 ;; Parameters:    Size  Location     Type
  1076 ;;		None
  1077 ;; Auto vars:     Size  Location     Type
  1078 ;;  i               2    6[BANK0 ] int 
  1079 ;; Return value:  Size  Location     Type
  1080 ;;                  1    wreg      void 
  1081 ;; Registers used:
  1082 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  1083 ;; Tracked objects:
  1084 ;;		On entry : 900/0
  1085 ;;		On exit  : 0/0
  1086 ;;		Unchanged: 0/0
  1087 ;; Data sizes:     COMMON   BANK0
  1088 ;;      Params:         0       0
  1089 ;;      Locals:         0       2
  1090 ;;      Temps:          0       0
  1091 ;;      Totals:         0       2
  1092 ;;Total ram usage:        2 bytes
  1093 ;; Hardware stack levels used: 1
  1094 ;; Hardware stack levels required when called: 3
  1095 ;; This function calls:
  1096 ;;		_delay_100ms
  1097 ;; This function is called by:
  1098 ;;		_welcomeMessage
  1099 ;; This function uses a non-reentrant model
  1100 ;;
  1101                           
  1102     0372                     _delay_1000ms:	
  1103                           ;psect for function _delay_1000ms
  1104                           
  1105                           
  1106                           ;main.c: 32:     for (int i = 0; i < 20; i++) {
  1107                           
  1108                           ;incstack = 0
  1109                           ; Regs used in _delay_1000ms: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  1110     0372  0192               	clrf	delay_1000ms@i
  1111     0373  0193               	clrf	delay_1000ms@i+1
  1112     0374                     l1263:
  1113                           
  1114                           ;main.c: 33:         delay_100ms();
  1115     0374  23CC               	fcall	_delay_100ms
  1116                           
  1117                           ;main.c: 34:     }
  1118     0375  3001               	movlw	1
  1119     0376  1283               	bcf	3,5	;RP0=0, select bank0
  1120     0377  0792               	addwf	delay_1000ms@i,f
  1121     0378  1803               	skipnc
  1122     0379  0A93               	incf	delay_1000ms@i+1,f
  1123     037A  3000               	movlw	0
  1124     037B  0793               	addwf	delay_1000ms@i+1,f
  1125     037C  0813               	movf	delay_1000ms@i+1,w
  1126     037D  3A80               	xorlw	128
  1127     037E  00CF               	movwf	79
  1128     037F  3080               	movlw	128
  1129     0380  024F               	subwf	79,w
  1130     0381  1D03               	skipz
  1131     0382  2B85               	goto	u595
  1132     0383  3014               	movlw	20
  1133     0384  0212               	subwf	delay_1000ms@i,w
  1134     0385                     u595:
  1135     0385  1803               	btfsc	3,0
  1136     0386  0008               	return
  1137     0387  2B74               	goto	l1263
  1138     0388                     __end_of_delay_1000ms:
  1139                           
  1140                           	psect	text4
  1141     03CC                     __ptext4:	
  1142 ;; *************** function _delay_100ms *****************
  1143 ;; Defined at:
  1144 ;;		line 26 in file "main.c"
  1145 ;; Parameters:    Size  Location     Type
  1146 ;;		None
  1147 ;; Auto vars:     Size  Location     Type
  1148 ;;		None
  1149 ;; Return value:  Size  Location     Type
  1150 ;;                  1    wreg      void 
  1151 ;; Registers used:
  1152 ;;		wreg
  1153 ;; Tracked objects:
  1154 ;;		On entry : 0/0
  1155 ;;		On exit  : 0/0
  1156 ;;		Unchanged: 0/0
  1157 ;; Data sizes:     COMMON   BANK0
  1158 ;;      Params:         0       0
  1159 ;;      Locals:         0       0
  1160 ;;      Temps:          0       2
  1161 ;;      Totals:         0       2
  1162 ;;Total ram usage:        2 bytes
  1163 ;; Hardware stack levels used: 1
  1164 ;; Hardware stack levels required when called: 2
  1165 ;; This function calls:
  1166 ;;		Nothing
  1167 ;; This function is called by:
  1168 ;;		_delay_1000ms
  1169 ;;		_main
  1170 ;; This function uses a non-reentrant model
  1171 ;;
  1172                           
  1173     03CC                     _delay_100ms:	
  1174                           ;psect for function _delay_100ms
  1175                           
  1176                           
  1177                           ;main.c: 27:     _delay((unsigned long)((100)*(4000000/4000.0)));
  1178                           
  1179                           ;incstack = 0
  1180                           ; Regs used in _delay_100ms: [wreg]
  1181     03CC  3082               	movlw	130
  1182     03CD  1283               	bcf	3,5	;RP0=0, select bank0
  1183     03CE  0091               	movwf	??_delay_100ms+1
  1184     03CF  30DD               	movlw	221
  1185     03D0  0090               	movwf	??_delay_100ms
  1186     03D1                     u817:
  1187     03D1  0B90               	decfsz	??_delay_100ms,f
  1188     03D2  2BD1               	goto	u817
  1189     03D3  0B91               	decfsz	??_delay_100ms+1,f
  1190     03D4  2BD1               	goto	u817
  1191     03D5  2BD6               	nop2
  1192     03D6  0008               	return
  1193     03D7                     __end_of_delay_100ms:
  1194                           
  1195                           	psect	text5
  1196     0223                     __ptext5:	
  1197 ;; *************** function _Lcd_Set_Cursor *****************
  1198 ;; Defined at:
  1199 ;;		line 52 in file "lcd.c"
  1200 ;; Parameters:    Size  Location     Type
  1201 ;;  a               1    wreg     unsigned char 
  1202 ;;  b               1    8[BANK0 ] unsigned char 
  1203 ;; Auto vars:     Size  Location     Type
  1204 ;;  a               1   10[BANK0 ] unsigned char 
  1205 ;;  temp            1   13[BANK0 ] unsigned char 
  1206 ;;  y               1   12[BANK0 ] unsigned char 
  1207 ;;  z               1   11[BANK0 ] unsigned char 
  1208 ;; Return value:  Size  Location     Type
  1209 ;;                  1    wreg      void 
  1210 ;; Registers used:
  1211 ;;		wreg, status,2, status,0, pclath, cstack
  1212 ;; Tracked objects:
  1213 ;;		On entry : 100/0
  1214 ;;		On exit  : 100/0
  1215 ;;		Unchanged: 0/0
  1216 ;; Data sizes:     COMMON   BANK0
  1217 ;;      Params:         0       1
  1218 ;;      Locals:         0       4
  1219 ;;      Temps:          0       1
  1220 ;;      Totals:         0       6
  1221 ;;Total ram usage:        6 bytes
  1222 ;; Hardware stack levels used: 1
  1223 ;; Hardware stack levels required when called: 4
  1224 ;; This function calls:
  1225 ;;		_Lcd_Cmd
  1226 ;; This function is called by:
  1227 ;;		_welcomeMessage
  1228 ;;		_main
  1229 ;; This function uses a non-reentrant model
  1230 ;;
  1231                           
  1232     0223                     _Lcd_Set_Cursor:	
  1233                           ;psect for function _Lcd_Set_Cursor
  1234                           
  1235                           
  1236                           ;incstack = 0
  1237                           ; Regs used in _Lcd_Set_Cursor: [wreg+status,2+status,0+pclath+cstack]
  1238                           ;Lcd_Set_Cursor@a stored from wreg
  1239     0223  0096               	movwf	Lcd_Set_Cursor@a
  1240                           
  1241                           ;lcd.c: 52: void Lcd_Set_Cursor(char a, char b);lcd.c: 53: {;lcd.c: 54:  char temp,z,y;;
      +                          lcd.c: 55:  if(a == 1)
  1242     0224  0316               	decf	Lcd_Set_Cursor@a,w
  1243     0225  1D03               	btfss	3,2
  1244     0226  2A3C               	goto	l1283
  1245                           
  1246                           ;lcd.c: 56:  {;lcd.c: 57:    temp = (char) (0x80 + b - 1);
  1247     0227  0814               	movf	Lcd_Set_Cursor@b,w
  1248     0228  3E7F               	addlw	127
  1249     0229  0099               	movwf	Lcd_Set_Cursor@temp
  1250                           
  1251                           ;lcd.c: 58:   z = temp>>4;
  1252     022A  0819               	movf	Lcd_Set_Cursor@temp,w
  1253     022B  0095               	movwf	??_Lcd_Set_Cursor
  1254     022C  3004               	movlw	4
  1255     022D                     u615:
  1256     022D  1003               	clrc
  1257     022E  0C95               	rrf	??_Lcd_Set_Cursor,f
  1258     022F  3EFF               	addlw	-1
  1259     0230  1D03               	skipz
  1260     0231  2A2D               	goto	u615
  1261     0232  0815               	movf	??_Lcd_Set_Cursor,w
  1262     0233  0097               	movwf	Lcd_Set_Cursor@z
  1263                           
  1264                           ;lcd.c: 59:   y = temp & 0x0F;
  1265     0234  0819               	movf	Lcd_Set_Cursor@temp,w
  1266     0235  390F               	andlw	15
  1267     0236  0098               	movwf	Lcd_Set_Cursor@y
  1268                           
  1269                           ;lcd.c: 60:   Lcd_Cmd(z);
  1270     0237  0817               	movf	Lcd_Set_Cursor@z,w
  1271     0238  2388               	fcall	_Lcd_Cmd
  1272                           
  1273                           ;lcd.c: 61:   Lcd_Cmd(y);
  1274     0239  0818               	movf	Lcd_Set_Cursor@y,w
  1275     023A  2388               	fcall	_Lcd_Cmd
  1276                           
  1277                           ;lcd.c: 62:  }
  1278     023B  0008               	return
  1279     023C                     l1283:
  1280     023C  3002               	movlw	2
  1281     023D  0616               	xorwf	Lcd_Set_Cursor@a,w
  1282     023E  1D03               	btfss	3,2
  1283     023F  0008               	return
  1284                           
  1285                           ;lcd.c: 64:  {;lcd.c: 65:   temp = 0xC0 + b - 1;
  1286     0240  0814               	movf	Lcd_Set_Cursor@b,w
  1287     0241  3EBF               	addlw	191
  1288     0242  0099               	movwf	Lcd_Set_Cursor@temp
  1289                           
  1290                           ;lcd.c: 66:   z = temp>>4;
  1291     0243  0819               	movf	Lcd_Set_Cursor@temp,w
  1292     0244  0095               	movwf	??_Lcd_Set_Cursor
  1293     0245  3004               	movlw	4
  1294     0246                     u635:
  1295     0246  1003               	clrc
  1296     0247  0C95               	rrf	??_Lcd_Set_Cursor,f
  1297     0248  3EFF               	addlw	-1
  1298     0249  1D03               	skipz
  1299     024A  2A46               	goto	u635
  1300     024B  0815               	movf	??_Lcd_Set_Cursor,w
  1301     024C  0097               	movwf	Lcd_Set_Cursor@z
  1302                           
  1303                           ;lcd.c: 67:   y = temp & 0x0F;
  1304     024D  0819               	movf	Lcd_Set_Cursor@temp,w
  1305     024E  390F               	andlw	15
  1306     024F  0098               	movwf	Lcd_Set_Cursor@y
  1307                           
  1308                           ;lcd.c: 68:   Lcd_Cmd(z);
  1309     0250  0817               	movf	Lcd_Set_Cursor@z,w
  1310     0251  2388               	fcall	_Lcd_Cmd
  1311                           
  1312                           ;lcd.c: 69:   Lcd_Cmd(y);
  1313     0252  0818               	movf	Lcd_Set_Cursor@y,w
  1314     0253  2388               	fcall	_Lcd_Cmd
  1315     0254  0008               	return
  1316     0255                     __end_of_Lcd_Set_Cursor:
  1317                           
  1318                           	psect	text6
  1319     039A                     __ptext6:	
  1320 ;; *************** function _Lcd_Clear *****************
  1321 ;; Defined at:
  1322 ;;		line 44 in file "lcd.c"
  1323 ;; Parameters:    Size  Location     Type
  1324 ;;		None
  1325 ;; Auto vars:     Size  Location     Type
  1326 ;;		None
  1327 ;; Return value:  Size  Location     Type
  1328 ;;                  1    wreg      void 
  1329 ;; Registers used:
  1330 ;;		wreg, status,2, status,0, pclath, cstack
  1331 ;; Tracked objects:
  1332 ;;		On entry : 0/0
  1333 ;;		On exit  : 0/0
  1334 ;;		Unchanged: 0/0
  1335 ;; Data sizes:     COMMON   BANK0
  1336 ;;      Params:         0       0
  1337 ;;      Locals:         0       0
  1338 ;;      Temps:          0       2
  1339 ;;      Totals:         0       2
  1340 ;;Total ram usage:        2 bytes
  1341 ;; Hardware stack levels used: 1
  1342 ;; Hardware stack levels required when called: 4
  1343 ;; This function calls:
  1344 ;;		_Lcd_Cmd
  1345 ;; This function is called by:
  1346 ;;		_welcomeMessage
  1347 ;;		_main
  1348 ;; This function uses a non-reentrant model
  1349 ;;
  1350                           
  1351     039A                     _Lcd_Clear:	
  1352                           ;psect for function _Lcd_Clear
  1353                           
  1354                           
  1355                           ;lcd.c: 46:  Lcd_Cmd(0x00);
  1356                           
  1357                           ;incstack = 0
  1358                           ; Regs used in _Lcd_Clear: [wreg+status,2+status,0+pclath+cstack]
  1359     039A  3000               	movlw	0
  1360     039B  2388               	fcall	_Lcd_Cmd
  1361                           
  1362                           ;lcd.c: 47:  Lcd_Cmd(0x01);
  1363     039C  3001               	movlw	1
  1364     039D  2388               	fcall	_Lcd_Cmd
  1365                           
  1366                           ;lcd.c: 48:     _delay((unsigned long)((2)*(4000000/4000.0)));
  1367     039E  3003               	movlw	3
  1368     039F  0095               	movwf	??_Lcd_Clear+1
  1369     03A0  3097               	movlw	151
  1370     03A1  0094               	movwf	??_Lcd_Clear
  1371     03A2                     u827:
  1372     03A2  0B94               	decfsz	??_Lcd_Clear,f
  1373     03A3  2BA2               	goto	u827
  1374     03A4  0B95               	decfsz	??_Lcd_Clear+1,f
  1375     03A5  2BA2               	goto	u827
  1376     03A6  2BA7               	nop2
  1377     03A7  0008               	return
  1378     03A8                     __end_of_Lcd_Clear:
  1379                           
  1380                           	psect	text7
  1381     0151                     __ptext7:	
  1382 ;; *************** function _readADC2 *****************
  1383 ;; Defined at:
  1384 ;;		line 50 in file "adc.c"
  1385 ;; Parameters:    Size  Location     Type
  1386 ;;		None
  1387 ;; Auto vars:     Size  Location     Type
  1388 ;;  volt            2    8[BANK0 ] unsigned int 
  1389 ;;  rxData          1   11[BANK0 ] unsigned char 
  1390 ;;  bits            1   10[BANK0 ] unsigned char 
  1391 ;; Return value:  Size  Location     Type
  1392 ;;                  2    4[BANK0 ] unsigned int 
  1393 ;; Registers used:
  1394 ;;		wreg, status,2, status,0, btemp+1
  1395 ;; Tracked objects:
  1396 ;;		On entry : 100/0
  1397 ;;		On exit  : 100/0
  1398 ;;		Unchanged: 0/0
  1399 ;; Data sizes:     COMMON   BANK0
  1400 ;;      Params:         0       2
  1401 ;;      Locals:         0       4
  1402 ;;      Temps:          0       2
  1403 ;;      Totals:         0       8
  1404 ;;Total ram usage:        8 bytes
  1405 ;; Hardware stack levels used: 1
  1406 ;; Hardware stack levels required when called: 2
  1407 ;; This function calls:
  1408 ;;		Nothing
  1409 ;; This function is called by:
  1410 ;;		_main
  1411 ;; This function uses a non-reentrant model
  1412 ;;
  1413                           
  1414     0151                     _readADC2:	
  1415                           ;psect for function _readADC2
  1416                           
  1417                           
  1418                           ;adc.c: 51:   unsigned char bits;;adc.c: 52:   unsigned char rxData = 0;
  1419                           
  1420                           ;incstack = 0
  1421                           ; Regs used in _readADC2: [wreg+status,2+status,0+btemp+1]
  1422     0151  0197               	clrf	readADC2@rxData
  1423                           
  1424                           ;adc.c: 55:   RB7 = 0;
  1425     0152  1386               	bcf	6,7	;volatile
  1426                           
  1427                           ;adc.c: 58:   for (bits = 0; bits < 3; bits++)
  1428     0153  0196               	clrf	readADC2@bits
  1429     0154                     l1431:
  1430                           
  1431                           ;adc.c: 59:   {;adc.c: 60:       _delay((unsigned long)((100)*(4000000/4000000.0)));
  1432     0154  3021               	movlw	33
  1433     0155  0092               	movwf	??_readADC2
  1434     0156                     u837:
  1435     0156  0B92               	decfsz	??_readADC2,f
  1436     0157  2956               	goto	u837
  1437                           
  1438                           ;adc.c: 61:       RB5 = 1;
  1439     0158  1283               	bcf	3,5	;RP0=0, select bank0
  1440     0159  1686               	bsf	6,5	;volatile
  1441                           
  1442                           ;adc.c: 62:       _delay((unsigned long)((100)*(4000000/4000000.0)));
  1443     015A  3021               	movlw	33
  1444     015B  0092               	movwf	??_readADC2
  1445     015C                     u847:
  1446     015C  0B92               	decfsz	??_readADC2,f
  1447     015D  295C               	goto	u847
  1448                           
  1449                           ;adc.c: 63:       RB5 = 0;
  1450     015E  1283               	bcf	3,5	;RP0=0, select bank0
  1451     015F  1286               	bcf	6,5	;volatile
  1452                           
  1453                           ;adc.c: 64:   }
  1454     0160  3001               	movlw	1
  1455     0161  00CF               	movwf	79
  1456     0162  084F               	movf	79,w
  1457     0163  0796               	addwf	readADC2@bits,f
  1458     0164  3003               	movlw	3
  1459     0165  0216               	subwf	readADC2@bits,w
  1460     0166  1C03               	skipc
  1461     0167  2954               	goto	l1431
  1462                           
  1463                           ;adc.c: 67:   for (bits = 0; bits < 8; bits++)
  1464     0168  0196               	clrf	readADC2@bits
  1465     0169                     l1447:
  1466                           
  1467                           ;adc.c: 68:   {;adc.c: 70:     _delay((unsigned long)((100)*(4000000/4000000.0)));
  1468     0169  3021               	movlw	33
  1469     016A  0092               	movwf	??_readADC2
  1470     016B                     u857:
  1471     016B  0B92               	decfsz	??_readADC2,f
  1472     016C  296B               	goto	u857
  1473                           
  1474                           ;adc.c: 71:     RB5 = 1;
  1475     016D  1283               	bcf	3,5	;RP0=0, select bank0
  1476     016E  1686               	bsf	6,5	;volatile
  1477                           
  1478                           ;adc.c: 74:     rxData = rxData << 1;
  1479     016F  0817               	movf	readADC2@rxData,w
  1480     0170  0092               	movwf	??_readADC2
  1481     0171  0712               	addwf	??_readADC2,w
  1482     0172  0097               	movwf	readADC2@rxData
  1483                           
  1484                           ;adc.c: 77:     if(RA3 == 1)
  1485     0173  1D85               	btfss	5,3	;volatile
  1486     0174  2978               	goto	l1457
  1487                           
  1488                           ;adc.c: 78:       rxData = rxData | 0x01;
  1489     0175  0817               	movf	readADC2@rxData,w
  1490     0176  3801               	iorlw	1
  1491     0177  297A               	goto	L1
  1492     0178                     l1457:
  1493                           
  1494                           ;adc.c: 80:       rxData = rxData & 0xfe;
  1495     0178  0817               	movf	readADC2@rxData,w
  1496     0179  39FE               	andlw	254
  1497     017A                     L1:
  1498     017A  0097               	movwf	readADC2@rxData
  1499                           
  1500                           ;adc.c: 82:     _delay((unsigned long)((100)*(4000000/4000000.0)));
  1501     017B  3021               	movlw	33
  1502     017C  0092               	movwf	??_readADC2
  1503     017D                     u867:
  1504     017D  0B92               	decfsz	??_readADC2,f
  1505     017E  297D               	goto	u867
  1506                           
  1507                           ;adc.c: 83:     RB5 = 0;
  1508     017F  1283               	bcf	3,5	;RP0=0, select bank0
  1509     0180  1286               	bcf	6,5	;volatile
  1510                           
  1511                           ;adc.c: 84:     }
  1512     0181  3001               	movlw	1
  1513     0182  00CF               	movwf	79
  1514     0183  084F               	movf	79,w
  1515     0184  0796               	addwf	readADC2@bits,f
  1516     0185  3008               	movlw	8
  1517     0186  0216               	subwf	readADC2@bits,w
  1518     0187  1C03               	skipc
  1519     0188  2969               	goto	l1447
  1520                           
  1521                           ;adc.c: 87:   RB7 = 1;
  1522     0189  1786               	bsf	6,7	;volatile
  1523                           
  1524                           ;adc.c: 90:   volt = (rxData << 2);
  1525     018A  0817               	movf	readADC2@rxData,w
  1526     018B  0092               	movwf	??_readADC2
  1527     018C  0193               	clrf	??_readADC2+1
  1528     018D  1003               	clrc
  1529     018E  0D92               	rlf	??_readADC2,f
  1530     018F  0D93               	rlf	??_readADC2+1,f
  1531     0190  1003               	clrc
  1532     0191  0D92               	rlf	??_readADC2,f
  1533     0192  0D93               	rlf	??_readADC2+1,f
  1534     0193  0812               	movf	??_readADC2,w
  1535     0194  0094               	movwf	readADC2@volt
  1536     0195  0813               	movf	??_readADC2+1,w
  1537     0196  0095               	movwf	readADC2@volt+1
  1538                           
  1539                           ;adc.c: 91:   return volt;
  1540     0197  0815               	movf	readADC2@volt+1,w
  1541     0198  0091               	movwf	?_readADC2+1
  1542     0199  0814               	movf	readADC2@volt,w
  1543     019A  0090               	movwf	?_readADC2
  1544     019B  0008               	return
  1545     019C                     __end_of_readADC2:
  1546                           
  1547                           	psect	text8
  1548     019C                     __ptext8:	
  1549 ;; *************** function _readADC1 *****************
  1550 ;; Defined at:
  1551 ;;		line 6 in file "adc.c"
  1552 ;; Parameters:    Size  Location     Type
  1553 ;;		None
  1554 ;; Auto vars:     Size  Location     Type
  1555 ;;  volt            2    8[BANK0 ] unsigned int 
  1556 ;;  rxData          1   11[BANK0 ] unsigned char 
  1557 ;;  bits            1   10[BANK0 ] unsigned char 
  1558 ;; Return value:  Size  Location     Type
  1559 ;;                  2    4[BANK0 ] unsigned int 
  1560 ;; Registers used:
  1561 ;;		wreg, status,2, status,0, btemp+1
  1562 ;; Tracked objects:
  1563 ;;		On entry : 100/0
  1564 ;;		On exit  : 100/0
  1565 ;;		Unchanged: 0/0
  1566 ;; Data sizes:     COMMON   BANK0
  1567 ;;      Params:         0       2
  1568 ;;      Locals:         0       4
  1569 ;;      Temps:          0       2
  1570 ;;      Totals:         0       8
  1571 ;;Total ram usage:        8 bytes
  1572 ;; Hardware stack levels used: 1
  1573 ;; Hardware stack levels required when called: 2
  1574 ;; This function calls:
  1575 ;;		Nothing
  1576 ;; This function is called by:
  1577 ;;		_main
  1578 ;; This function uses a non-reentrant model
  1579 ;;
  1580                           
  1581     019C                     _readADC1:	
  1582                           ;psect for function _readADC1
  1583                           
  1584                           
  1585                           ;adc.c: 7:   unsigned char bits;;adc.c: 8:   unsigned char rxData = 0;
  1586                           
  1587                           ;incstack = 0
  1588                           ; Regs used in _readADC1: [wreg+status,2+status,0+btemp+1]
  1589     019C  0197               	clrf	readADC1@rxData
  1590                           
  1591                           ;adc.c: 11:   RB7 = 0;
  1592     019D  1386               	bcf	6,7	;volatile
  1593                           
  1594                           ;adc.c: 14:   for (bits = 0; bits < 3; bits++)
  1595     019E  0196               	clrf	readADC1@bits
  1596     019F                     l1381:
  1597                           
  1598                           ;adc.c: 15:   {;adc.c: 16:       _delay((unsigned long)((100)*(4000000/4000000.0)));
  1599     019F  3021               	movlw	33
  1600     01A0  0092               	movwf	??_readADC1
  1601     01A1                     u877:
  1602     01A1  0B92               	decfsz	??_readADC1,f
  1603     01A2  29A1               	goto	u877
  1604                           
  1605                           ;adc.c: 17:       RB5 = 1;
  1606     01A3  1283               	bcf	3,5	;RP0=0, select bank0
  1607     01A4  1686               	bsf	6,5	;volatile
  1608                           
  1609                           ;adc.c: 18:       _delay((unsigned long)((100)*(4000000/4000000.0)));
  1610     01A5  3021               	movlw	33
  1611     01A6  0092               	movwf	??_readADC1
  1612     01A7                     u887:
  1613     01A7  0B92               	decfsz	??_readADC1,f
  1614     01A8  29A7               	goto	u887
  1615                           
  1616                           ;adc.c: 19:       RB5 = 0;
  1617     01A9  1283               	bcf	3,5	;RP0=0, select bank0
  1618     01AA  1286               	bcf	6,5	;volatile
  1619                           
  1620                           ;adc.c: 20:   }
  1621     01AB  3001               	movlw	1
  1622     01AC  00CF               	movwf	79
  1623     01AD  084F               	movf	79,w
  1624     01AE  0796               	addwf	readADC1@bits,f
  1625     01AF  3003               	movlw	3
  1626     01B0  0216               	subwf	readADC1@bits,w
  1627     01B1  1C03               	skipc
  1628     01B2  299F               	goto	l1381
  1629                           
  1630                           ;adc.c: 23:   for (bits = 0; bits < 8; bits++)
  1631     01B3  0196               	clrf	readADC1@bits
  1632     01B4                     l1397:
  1633                           
  1634                           ;adc.c: 24:   {;adc.c: 26:     _delay((unsigned long)((100)*(4000000/4000000.0)));
  1635     01B4  3021               	movlw	33
  1636     01B5  0092               	movwf	??_readADC1
  1637     01B6                     u897:
  1638     01B6  0B92               	decfsz	??_readADC1,f
  1639     01B7  29B6               	goto	u897
  1640                           
  1641                           ;adc.c: 27:     RB5 = 1;
  1642     01B8  1283               	bcf	3,5	;RP0=0, select bank0
  1643     01B9  1686               	bsf	6,5	;volatile
  1644                           
  1645                           ;adc.c: 30:     rxData = rxData << 1;
  1646     01BA  0817               	movf	readADC1@rxData,w
  1647     01BB  0092               	movwf	??_readADC1
  1648     01BC  0712               	addwf	??_readADC1,w
  1649     01BD  0097               	movwf	readADC1@rxData
  1650                           
  1651                           ;adc.c: 33:     if(RB6 == 1)
  1652     01BE  1F06               	btfss	6,6	;volatile
  1653     01BF  29C3               	goto	l1407
  1654                           
  1655                           ;adc.c: 34:       rxData = rxData | 0x01;
  1656     01C0  0817               	movf	readADC1@rxData,w
  1657     01C1  3801               	iorlw	1
  1658     01C2  29C5               	goto	L2
  1659     01C3                     l1407:
  1660                           
  1661                           ;adc.c: 36:       rxData = rxData & 0xfe;
  1662     01C3  0817               	movf	readADC1@rxData,w
  1663     01C4  39FE               	andlw	254
  1664     01C5                     L2:
  1665     01C5  0097               	movwf	readADC1@rxData
  1666                           
  1667                           ;adc.c: 38:     _delay((unsigned long)((100)*(4000000/4000000.0)));
  1668     01C6  3021               	movlw	33
  1669     01C7  0092               	movwf	??_readADC1
  1670     01C8                     u907:
  1671     01C8  0B92               	decfsz	??_readADC1,f
  1672     01C9  29C8               	goto	u907
  1673                           
  1674                           ;adc.c: 39:     RB5 = 0;
  1675     01CA  1283               	bcf	3,5	;RP0=0, select bank0
  1676     01CB  1286               	bcf	6,5	;volatile
  1677                           
  1678                           ;adc.c: 40:     }
  1679     01CC  3001               	movlw	1
  1680     01CD  00CF               	movwf	79
  1681     01CE  084F               	movf	79,w
  1682     01CF  0796               	addwf	readADC1@bits,f
  1683     01D0  3008               	movlw	8
  1684     01D1  0216               	subwf	readADC1@bits,w
  1685     01D2  1C03               	skipc
  1686     01D3  29B4               	goto	l1397
  1687                           
  1688                           ;adc.c: 43:   RB7 = 1;
  1689     01D4  1786               	bsf	6,7	;volatile
  1690                           
  1691                           ;adc.c: 46:   volt = (rxData << 2);
  1692     01D5  0817               	movf	readADC1@rxData,w
  1693     01D6  0092               	movwf	??_readADC1
  1694     01D7  0193               	clrf	??_readADC1+1
  1695     01D8  1003               	clrc
  1696     01D9  0D92               	rlf	??_readADC1,f
  1697     01DA  0D93               	rlf	??_readADC1+1,f
  1698     01DB  1003               	clrc
  1699     01DC  0D92               	rlf	??_readADC1,f
  1700     01DD  0D93               	rlf	??_readADC1+1,f
  1701     01DE  0812               	movf	??_readADC1,w
  1702     01DF  0094               	movwf	readADC1@volt
  1703     01E0  0813               	movf	??_readADC1+1,w
  1704     01E1  0095               	movwf	readADC1@volt+1
  1705                           
  1706                           ;adc.c: 47:   return volt;
  1707     01E2  0815               	movf	readADC1@volt+1,w
  1708     01E3  0091               	movwf	?_readADC1+1
  1709     01E4  0814               	movf	readADC1@volt,w
  1710     01E5  0090               	movwf	?_readADC1
  1711     01E6  0008               	return
  1712     01E7                     __end_of_readADC1:
  1713                           
  1714                           	psect	text9
  1715     0308                     __ptext9:	
  1716 ;; *************** function ___wmul *****************
  1717 ;; Defined at:
  1718 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\Umul16.c"
  1719 ;; Parameters:    Size  Location     Type
  1720 ;;  multiplier      2   16[BANK0 ] unsigned int 
  1721 ;;  multiplicand    2   18[BANK0 ] unsigned int 
  1722 ;; Auto vars:     Size  Location     Type
  1723 ;;  product         2   20[BANK0 ] unsigned int 
  1724 ;; Return value:  Size  Location     Type
  1725 ;;                  2   16[BANK0 ] unsigned int 
  1726 ;; Registers used:
  1727 ;;		wreg, status,2, status,0
  1728 ;; Tracked objects:
  1729 ;;		On entry : 100/0
  1730 ;;		On exit  : 100/0
  1731 ;;		Unchanged: 0/0
  1732 ;; Data sizes:     COMMON   BANK0
  1733 ;;      Params:         0       4
  1734 ;;      Locals:         0       2
  1735 ;;      Temps:          0       0
  1736 ;;      Totals:         0       6
  1737 ;;Total ram usage:        6 bytes
  1738 ;; Hardware stack levels used: 1
  1739 ;; Hardware stack levels required when called: 2
  1740 ;; This function calls:
  1741 ;;		Nothing
  1742 ;; This function is called by:
  1743 ;;		_main
  1744 ;; This function uses a non-reentrant model
  1745 ;;
  1746                           
  1747     0308                     ___wmul:	
  1748                           ;psect for function ___wmul
  1749                           
  1750                           
  1751                           ;incstack = 0
  1752                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  1753     0308  01A0               	clrf	___wmul@product
  1754     0309  01A1               	clrf	___wmul@product+1
  1755     030A                     l1475:
  1756     030A  1C1C               	btfss	___wmul@multiplier,0
  1757     030B  2B12               	goto	l241
  1758     030C  081E               	movf	___wmul@multiplicand,w
  1759     030D  07A0               	addwf	___wmul@product,f
  1760     030E  1803               	skipnc
  1761     030F  0AA1               	incf	___wmul@product+1,f
  1762     0310  081F               	movf	___wmul@multiplicand+1,w
  1763     0311  07A1               	addwf	___wmul@product+1,f
  1764     0312                     l241:
  1765     0312  3001               	movlw	1
  1766     0313                     u775:
  1767     0313  1003               	clrc
  1768     0314  0D9E               	rlf	___wmul@multiplicand,f
  1769     0315  0D9F               	rlf	___wmul@multiplicand+1,f
  1770     0316  3EFF               	addlw	-1
  1771     0317  1D03               	skipz
  1772     0318  2B13               	goto	u775
  1773     0319  3001               	movlw	1
  1774     031A                     u785:
  1775     031A  1003               	clrc
  1776     031B  0C9D               	rrf	___wmul@multiplier+1,f
  1777     031C  0C9C               	rrf	___wmul@multiplier,f
  1778     031D  3EFF               	addlw	-1
  1779     031E  1D03               	skipz
  1780     031F  2B1A               	goto	u785
  1781     0320  081C               	movf	___wmul@multiplier,w
  1782     0321  041D               	iorwf	___wmul@multiplier+1,w
  1783     0322  1D03               	btfss	3,2
  1784     0323  2B0A               	goto	l1475
  1785     0324  0821               	movf	___wmul@product+1,w
  1786     0325  009D               	movwf	?___wmul+1
  1787     0326  0820               	movf	___wmul@product,w
  1788     0327  009C               	movwf	?___wmul
  1789     0328  0008               	return
  1790     0329                     __end_of___wmul:
  1791                           
  1792                           	psect	text10
  1793     03A8                     __ptext10:	
  1794 ;; *************** function _Lcd_Write_Int *****************
  1795 ;; Defined at:
  1796 ;;		line 121 in file "lcd.c"
  1797 ;; Parameters:    Size  Location     Type
  1798 ;;  a               2   24[BANK0 ] unsigned int 
  1799 ;; Auto vars:     Size  Location     Type
  1800 ;;  temp           16   26[BANK0 ] unsigned char [16]
  1801 ;; Return value:  Size  Location     Type
  1802 ;;                  1    wreg      void 
  1803 ;; Registers used:
  1804 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1805 ;; Tracked objects:
  1806 ;;		On entry : 100/0
  1807 ;;		On exit  : 900/0
  1808 ;;		Unchanged: 0/0
  1809 ;; Data sizes:     COMMON   BANK0
  1810 ;;      Params:         0       2
  1811 ;;      Locals:         0      16
  1812 ;;      Temps:          0       0
  1813 ;;      Totals:         0      18
  1814 ;;Total ram usage:       18 bytes
  1815 ;; Hardware stack levels used: 1
  1816 ;; Hardware stack levels required when called: 5
  1817 ;; This function calls:
  1818 ;;		_Lcd_Write_String
  1819 ;;		_utoa
  1820 ;; This function is called by:
  1821 ;;		_main
  1822 ;; This function uses a non-reentrant model
  1823 ;;
  1824                           
  1825     03A8                     _Lcd_Write_Int:	
  1826                           ;psect for function _Lcd_Write_Int
  1827                           
  1828                           
  1829                           ;lcd.c: 121: void Lcd_Write_Int(unsigned int a);lcd.c: 122: {;lcd.c: 123:     char temp[
      +                          16];;lcd.c: 124:     utoa((char*)temp, a, 10);
  1830                           
  1831                           ;incstack = 0
  1832                           ; Regs used in _Lcd_Write_Int: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1833     03A8  0825               	movf	Lcd_Write_Int@a+1,w
  1834     03A9  009D               	movwf	utoa@val+1
  1835     03AA  0824               	movf	Lcd_Write_Int@a,w
  1836     03AB  009C               	movwf	utoa@val
  1837     03AC  300A               	movlw	10
  1838     03AD  009E               	movwf	utoa@base
  1839     03AE  3000               	movlw	0
  1840     03AF  009F               	movwf	utoa@base+1
  1841     03B0  3026               	movlw	(low (Lcd_Write_Int@temp| 0))& (0+255)
  1842     03B1  20FD               	fcall	_utoa
  1843                           
  1844                           ;lcd.c: 125:     Lcd_Write_String(temp);
  1845     03B2  3026               	movlw	(low (Lcd_Write_Int@temp| 0))& (0+255)
  1846     03B3  2329               	fcall	_Lcd_Write_String
  1847     03B4  0008               	return
  1848     03B5                     __end_of_Lcd_Write_Int:
  1849                           
  1850                           	psect	text11
  1851     00FD                     __ptext11:	
  1852 ;; *************** function _utoa *****************
  1853 ;; Defined at:
  1854 ;;		line 17 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\itoa.c"
  1855 ;; Parameters:    Size  Location     Type
  1856 ;;  buf             1    wreg     PTR unsigned char 
  1857 ;;		 -> Lcd_Write_Int@temp(16), 
  1858 ;;  val             2   16[BANK0 ] unsigned int 
  1859 ;;  base            2   18[BANK0 ] int 
  1860 ;; Auto vars:     Size  Location     Type
  1861 ;;  buf             1   23[BANK0 ] PTR unsigned char 
  1862 ;;		 -> Lcd_Write_Int@temp(16), 
  1863 ;;  v               2   20[BANK0 ] unsigned int 
  1864 ;;  c               1   22[BANK0 ] unsigned char 
  1865 ;; Return value:  Size  Location     Type
  1866 ;;                  1    wreg      PTR unsigned char 
  1867 ;; Registers used:
  1868 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1869 ;; Tracked objects:
  1870 ;;		On entry : 100/0
  1871 ;;		On exit  : 900/0
  1872 ;;		Unchanged: 0/0
  1873 ;; Data sizes:     COMMON   BANK0
  1874 ;;      Params:         0       4
  1875 ;;      Locals:         0       4
  1876 ;;      Temps:          0       0
  1877 ;;      Totals:         0       8
  1878 ;;Total ram usage:        8 bytes
  1879 ;; Hardware stack levels used: 1
  1880 ;; Hardware stack levels required when called: 3
  1881 ;; This function calls:
  1882 ;;		___lwdiv
  1883 ;;		___lwmod
  1884 ;; This function is called by:
  1885 ;;		_Lcd_Write_Int
  1886 ;; This function uses a non-reentrant model
  1887 ;;
  1888                           
  1889     00FD                     _utoa:	
  1890                           ;psect for function _utoa
  1891                           
  1892                           
  1893                           ;incstack = 0
  1894                           ; Regs used in _utoa: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1895                           ;utoa@buf stored from wreg
  1896     00FD  00A3               	movwf	utoa@buf
  1897     00FE  081D               	movf	utoa@val+1,w
  1898     00FF  00A1               	movwf	utoa@v+1
  1899     0100  081C               	movf	utoa@val,w
  1900     0101  00A0               	movwf	utoa@v
  1901     0102                     l1309:
  1902     0102  081F               	movf	utoa@base+1,w
  1903     0103  0096               	movwf	___lwdiv@divisor+1
  1904     0104  081E               	movf	utoa@base,w
  1905     0105  0095               	movwf	___lwdiv@divisor
  1906     0106  0821               	movf	utoa@v+1,w
  1907     0107  0098               	movwf	___lwdiv@dividend+1
  1908     0108  0820               	movf	utoa@v,w
  1909     0109  0097               	movwf	___lwdiv@dividend
  1910     010A  21E7               	fcall	___lwdiv
  1911     010B  0816               	movf	?___lwdiv+1,w
  1912     010C  00A1               	movwf	utoa@v+1
  1913     010D  0815               	movf	?___lwdiv,w
  1914     010E  00A0               	movwf	utoa@v
  1915     010F  3001               	movlw	1
  1916     0110  00CF               	movwf	79
  1917     0111  084F               	movf	79,w
  1918     0112  07A3               	addwf	utoa@buf,f
  1919     0113  0820               	movf	utoa@v,w
  1920     0114  0421               	iorwf	utoa@v+1,w
  1921     0115  1D03               	btfss	3,2
  1922     0116  2902               	goto	l1309
  1923     0117  0823               	movf	utoa@buf,w
  1924     0118  0084               	movwf	4
  1925     0119  1383               	bcf	3,7	;select IRP bank0
  1926     011A  0180               	clrf	0
  1927     011B  3001               	movlw	1
  1928     011C  02A3               	subwf	utoa@buf,f
  1929     011D                     l1319:
  1930     011D  081F               	movf	utoa@base+1,w
  1931     011E  0091               	movwf	___lwmod@divisor+1
  1932     011F  081E               	movf	utoa@base,w
  1933     0120  0090               	movwf	___lwmod@divisor
  1934     0121  081D               	movf	utoa@val+1,w
  1935     0122  0093               	movwf	___lwmod@dividend+1
  1936     0123  081C               	movf	utoa@val,w
  1937     0124  0092               	movwf	___lwmod@dividend
  1938     0125  2255               	fcall	___lwmod
  1939     0126  0810               	movf	?___lwmod,w
  1940     0127  00A2               	movwf	utoa@c
  1941     0128  081F               	movf	utoa@base+1,w
  1942     0129  0096               	movwf	___lwdiv@divisor+1
  1943     012A  081E               	movf	utoa@base,w
  1944     012B  0095               	movwf	___lwdiv@divisor
  1945     012C  081D               	movf	utoa@val+1,w
  1946     012D  0098               	movwf	___lwdiv@dividend+1
  1947     012E  081C               	movf	utoa@val,w
  1948     012F  0097               	movwf	___lwdiv@dividend
  1949     0130  21E7               	fcall	___lwdiv
  1950     0131  0816               	movf	?___lwdiv+1,w
  1951     0132  009D               	movwf	utoa@val+1
  1952     0133  0815               	movf	?___lwdiv,w
  1953     0134  009C               	movwf	utoa@val
  1954     0135  300A               	movlw	10
  1955     0136  0222               	subwf	utoa@c,w
  1956     0137  1C03               	skipc
  1957     0138  293D               	goto	l701
  1958     0139  3007               	movlw	7
  1959     013A  00CF               	movwf	79
  1960     013B  084F               	movf	79,w
  1961     013C  07A2               	addwf	utoa@c,f
  1962     013D                     l701:
  1963     013D  3030               	movlw	48
  1964     013E  00CF               	movwf	79
  1965     013F  084F               	movf	79,w
  1966     0140  07A2               	addwf	utoa@c,f
  1967     0141  0823               	movf	utoa@buf,w
  1968     0142  0084               	movwf	4
  1969     0143  0822               	movf	utoa@c,w
  1970     0144  1383               	bcf	3,7	;select IRP bank0
  1971     0145  0080               	movwf	0
  1972     0146  3001               	movlw	1
  1973     0147  02A3               	subwf	utoa@buf,f
  1974     0148  081C               	movf	utoa@val,w
  1975     0149  041D               	iorwf	utoa@val+1,w
  1976     014A  1D03               	btfss	3,2
  1977     014B  291D               	goto	l1319
  1978                           
  1979                           ;	Return value of _utoa is never used
  1980     014C  3001               	movlw	1
  1981     014D  00CF               	movwf	79
  1982     014E  084F               	movf	79,w
  1983     014F  07A3               	addwf	utoa@buf,f
  1984     0150  0008               	return
  1985     0151                     __end_of_utoa:
  1986                           
  1987                           	psect	text12
  1988     0255                     __ptext12:	
  1989 ;; *************** function ___lwmod *****************
  1990 ;; Defined at:
  1991 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\lwmod.c"
  1992 ;; Parameters:    Size  Location     Type
  1993 ;;  divisor         2    4[BANK0 ] unsigned int 
  1994 ;;  dividend        2    6[BANK0 ] unsigned int 
  1995 ;; Auto vars:     Size  Location     Type
  1996 ;;  counter         1    8[BANK0 ] unsigned char 
  1997 ;; Return value:  Size  Location     Type
  1998 ;;                  2    4[BANK0 ] unsigned int 
  1999 ;; Registers used:
  2000 ;;		wreg, status,2, status,0, btemp+1
  2001 ;; Tracked objects:
  2002 ;;		On entry : 100/0
  2003 ;;		On exit  : 100/0
  2004 ;;		Unchanged: 0/0
  2005 ;; Data sizes:     COMMON   BANK0
  2006 ;;      Params:         0       4
  2007 ;;      Locals:         0       1
  2008 ;;      Temps:          0       0
  2009 ;;      Totals:         0       5
  2010 ;;Total ram usage:        5 bytes
  2011 ;; Hardware stack levels used: 1
  2012 ;; Hardware stack levels required when called: 2
  2013 ;; This function calls:
  2014 ;;		Nothing
  2015 ;; This function is called by:
  2016 ;;		_main
  2017 ;;		_utoa
  2018 ;; This function uses a non-reentrant model
  2019 ;;
  2020                           
  2021     0255                     ___lwmod:	
  2022                           ;psect for function ___lwmod
  2023                           
  2024                           
  2025                           ;incstack = 0
  2026                           ; Regs used in ___lwmod: [wreg+status,2+status,0+btemp+1]
  2027     0255  0810               	movf	___lwmod@divisor,w
  2028     0256  0411               	iorwf	___lwmod@divisor+1,w
  2029     0257  1903               	btfsc	3,2
  2030     0258  2A82               	goto	l1253
  2031     0259  0194               	clrf	___lwmod@counter
  2032     025A  0A94               	incf	___lwmod@counter,f
  2033     025B                     l1243:
  2034     025B  1B91               	btfsc	___lwmod@divisor+1,7
  2035     025C  2A69               	goto	l1245
  2036     025D  3001               	movlw	1
  2037     025E                     u545:
  2038     025E  1003               	clrc
  2039     025F  0D90               	rlf	___lwmod@divisor,f
  2040     0260  0D91               	rlf	___lwmod@divisor+1,f
  2041     0261  3EFF               	addlw	-1
  2042     0262  1D03               	skipz
  2043     0263  2A5E               	goto	u545
  2044     0264  3001               	movlw	1
  2045     0265  00CF               	movwf	79
  2046     0266  084F               	movf	79,w
  2047     0267  0794               	addwf	___lwmod@counter,f
  2048     0268  2A5B               	goto	l1243
  2049     0269                     l1245:
  2050     0269  0811               	movf	___lwmod@divisor+1,w
  2051     026A  0213               	subwf	___lwmod@dividend+1,w
  2052     026B  1D03               	skipz
  2053     026C  2A6F               	goto	u565
  2054     026D  0810               	movf	___lwmod@divisor,w
  2055     026E  0212               	subwf	___lwmod@dividend,w
  2056     026F                     u565:
  2057     026F  1C03               	skipc
  2058     0270  2A77               	goto	l1249
  2059     0271  0810               	movf	___lwmod@divisor,w
  2060     0272  0292               	subwf	___lwmod@dividend,f
  2061     0273  0811               	movf	___lwmod@divisor+1,w
  2062     0274  1C03               	skipc
  2063     0275  0393               	decf	___lwmod@dividend+1,f
  2064     0276  0293               	subwf	___lwmod@dividend+1,f
  2065     0277                     l1249:
  2066     0277  3001               	movlw	1
  2067     0278                     u575:
  2068     0278  1003               	clrc
  2069     0279  0C91               	rrf	___lwmod@divisor+1,f
  2070     027A  0C90               	rrf	___lwmod@divisor,f
  2071     027B  3EFF               	addlw	-1
  2072     027C  1D03               	skipz
  2073     027D  2A78               	goto	u575
  2074     027E  3001               	movlw	1
  2075     027F  0294               	subwf	___lwmod@counter,f
  2076     0280  1D03               	btfss	3,2
  2077     0281  2A69               	goto	l1245
  2078     0282                     l1253:
  2079     0282  0813               	movf	___lwmod@dividend+1,w
  2080     0283  0091               	movwf	?___lwmod+1
  2081     0284  0812               	movf	___lwmod@dividend,w
  2082     0285  0090               	movwf	?___lwmod
  2083     0286  0008               	return
  2084     0287                     __end_of___lwmod:
  2085                           
  2086                           	psect	text13
  2087     01E7                     __ptext13:	
  2088 ;; *************** function ___lwdiv *****************
  2089 ;; Defined at:
  2090 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\lwdiv.c"
  2091 ;; Parameters:    Size  Location     Type
  2092 ;;  divisor         2    9[BANK0 ] unsigned int 
  2093 ;;  dividend        2   11[BANK0 ] unsigned int 
  2094 ;; Auto vars:     Size  Location     Type
  2095 ;;  quotient        2   13[BANK0 ] unsigned int 
  2096 ;;  counter         1   15[BANK0 ] unsigned char 
  2097 ;; Return value:  Size  Location     Type
  2098 ;;                  2    9[BANK0 ] unsigned int 
  2099 ;; Registers used:
  2100 ;;		wreg, status,2, status,0, btemp+1
  2101 ;; Tracked objects:
  2102 ;;		On entry : 100/0
  2103 ;;		On exit  : 100/0
  2104 ;;		Unchanged: 0/0
  2105 ;; Data sizes:     COMMON   BANK0
  2106 ;;      Params:         0       4
  2107 ;;      Locals:         0       3
  2108 ;;      Temps:          0       0
  2109 ;;      Totals:         0       7
  2110 ;;Total ram usage:        7 bytes
  2111 ;; Hardware stack levels used: 1
  2112 ;; Hardware stack levels required when called: 2
  2113 ;; This function calls:
  2114 ;;		Nothing
  2115 ;; This function is called by:
  2116 ;;		_main
  2117 ;;		_utoa
  2118 ;; This function uses a non-reentrant model
  2119 ;;
  2120                           
  2121     01E7                     ___lwdiv:	
  2122                           ;psect for function ___lwdiv
  2123                           
  2124                           
  2125                           ;incstack = 0
  2126                           ; Regs used in ___lwdiv: [wreg+status,2+status,0+btemp+1]
  2127     01E7  0199               	clrf	___lwdiv@quotient
  2128     01E8  019A               	clrf	___lwdiv@quotient+1
  2129     01E9  0815               	movf	___lwdiv@divisor,w
  2130     01EA  0416               	iorwf	___lwdiv@divisor+1,w
  2131     01EB  1903               	btfsc	3,2
  2132     01EC  2A1E               	goto	l1231
  2133     01ED  019B               	clrf	___lwdiv@counter
  2134     01EE  0A9B               	incf	___lwdiv@counter,f
  2135     01EF                     l1219:
  2136     01EF  1B96               	btfsc	___lwdiv@divisor+1,7
  2137     01F0  29FD               	goto	l1221
  2138     01F1  3001               	movlw	1
  2139     01F2                     u475:
  2140     01F2  1003               	clrc
  2141     01F3  0D95               	rlf	___lwdiv@divisor,f
  2142     01F4  0D96               	rlf	___lwdiv@divisor+1,f
  2143     01F5  3EFF               	addlw	-1
  2144     01F6  1D03               	skipz
  2145     01F7  29F2               	goto	u475
  2146     01F8  3001               	movlw	1
  2147     01F9  00CF               	movwf	79
  2148     01FA  084F               	movf	79,w
  2149     01FB  079B               	addwf	___lwdiv@counter,f
  2150     01FC  29EF               	goto	l1219
  2151     01FD                     l1221:
  2152     01FD  3001               	movlw	1
  2153     01FE                     u495:
  2154     01FE  1003               	clrc
  2155     01FF  0D99               	rlf	___lwdiv@quotient,f
  2156     0200  0D9A               	rlf	___lwdiv@quotient+1,f
  2157     0201  3EFF               	addlw	-1
  2158     0202  1D03               	skipz
  2159     0203  29FE               	goto	u495
  2160     0204  0816               	movf	___lwdiv@divisor+1,w
  2161     0205  0218               	subwf	___lwdiv@dividend+1,w
  2162     0206  1D03               	skipz
  2163     0207  2A0A               	goto	u505
  2164     0208  0815               	movf	___lwdiv@divisor,w
  2165     0209  0217               	subwf	___lwdiv@dividend,w
  2166     020A                     u505:
  2167     020A  1C03               	skipc
  2168     020B  2A13               	goto	l1227
  2169     020C  0815               	movf	___lwdiv@divisor,w
  2170     020D  0297               	subwf	___lwdiv@dividend,f
  2171     020E  0816               	movf	___lwdiv@divisor+1,w
  2172     020F  1C03               	skipc
  2173     0210  0398               	decf	___lwdiv@dividend+1,f
  2174     0211  0298               	subwf	___lwdiv@dividend+1,f
  2175     0212  1419               	bsf	___lwdiv@quotient,0
  2176     0213                     l1227:
  2177     0213  3001               	movlw	1
  2178     0214                     u515:
  2179     0214  1003               	clrc
  2180     0215  0C96               	rrf	___lwdiv@divisor+1,f
  2181     0216  0C95               	rrf	___lwdiv@divisor,f
  2182     0217  3EFF               	addlw	-1
  2183     0218  1D03               	skipz
  2184     0219  2A14               	goto	u515
  2185     021A  3001               	movlw	1
  2186     021B  029B               	subwf	___lwdiv@counter,f
  2187     021C  1D03               	btfss	3,2
  2188     021D  29FD               	goto	l1221
  2189     021E                     l1231:
  2190     021E  081A               	movf	___lwdiv@quotient+1,w
  2191     021F  0096               	movwf	?___lwdiv+1
  2192     0220  0819               	movf	___lwdiv@quotient,w
  2193     0221  0095               	movwf	?___lwdiv
  2194     0222  0008               	return
  2195     0223                     __end_of___lwdiv:
  2196                           
  2197                           	psect	text14
  2198     0329                     __ptext14:	
  2199 ;; *************** function _Lcd_Write_String *****************
  2200 ;; Defined at:
  2201 ;;		line 111 in file "lcd.c"
  2202 ;; Parameters:    Size  Location     Type
  2203 ;;  a               1    wreg     PTR unsigned char 
  2204 ;;		 -> Lcd_Write_Int@temp(16), welcomeMessage@msg(8), 
  2205 ;; Auto vars:     Size  Location     Type
  2206 ;;  a               1   12[BANK0 ] PTR unsigned char 
  2207 ;;		 -> Lcd_Write_Int@temp(16), welcomeMessage@msg(8), 
  2208 ;;  i               2   10[BANK0 ] int 
  2209 ;; Return value:  Size  Location     Type
  2210 ;;                  1    wreg      void 
  2211 ;; Registers used:
  2212 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2213 ;; Tracked objects:
  2214 ;;		On entry : 100/0
  2215 ;;		On exit  : 900/0
  2216 ;;		Unchanged: 0/0
  2217 ;; Data sizes:     COMMON   BANK0
  2218 ;;      Params:         0       0
  2219 ;;      Locals:         0       3
  2220 ;;      Temps:          0       1
  2221 ;;      Totals:         0       4
  2222 ;;Total ram usage:        4 bytes
  2223 ;; Hardware stack levels used: 1
  2224 ;; Hardware stack levels required when called: 4
  2225 ;; This function calls:
  2226 ;;		_Lcd_Write_Char
  2227 ;; This function is called by:
  2228 ;;		_welcomeMessage
  2229 ;;		_Lcd_Write_Int
  2230 ;; This function uses a non-reentrant model
  2231 ;;
  2232                           
  2233     0329                     _Lcd_Write_String:	
  2234                           ;psect for function _Lcd_Write_String
  2235                           
  2236                           
  2237                           ;incstack = 0
  2238                           ; Regs used in _Lcd_Write_String: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2239                           ;Lcd_Write_String@a stored from wreg
  2240     0329  0098               	movwf	Lcd_Write_String@a
  2241                           
  2242                           ;lcd.c: 111: void Lcd_Write_String(char *a);lcd.c: 112: {;lcd.c: 113:  int i;;lcd.c: 114
      +                          :  for(i=0;a[i]!='\0';i++)
  2243     032A  0196               	clrf	Lcd_Write_String@i
  2244     032B  0197               	clrf	Lcd_Write_String@i+1
  2245     032C                     l1299:
  2246     032C  0816               	movf	Lcd_Write_String@i,w
  2247     032D  0718               	addwf	Lcd_Write_String@a,w
  2248     032E  0095               	movwf	??_Lcd_Write_String
  2249     032F  0815               	movf	??_Lcd_Write_String,w
  2250     0330  0084               	movwf	4
  2251     0331  1383               	bcf	3,7	;select IRP bank0
  2252     0332  0800               	movf	0,w
  2253     0333  1903               	btfsc	3,2
  2254     0334  0008               	return
  2255                           
  2256                           ;lcd.c: 115:     {;lcd.c: 116:         Lcd_Write_Char(a[i]);
  2257     0335  0816               	movf	Lcd_Write_String@i,w
  2258     0336  0718               	addwf	Lcd_Write_String@a,w
  2259     0337  0095               	movwf	??_Lcd_Write_String
  2260     0338  0815               	movf	??_Lcd_Write_String,w
  2261     0339  0084               	movwf	4
  2262     033A  0800               	movf	0,w
  2263     033B  22E5               	fcall	_Lcd_Write_Char
  2264                           
  2265                           ;lcd.c: 117:     }
  2266     033C  3001               	movlw	1
  2267     033D  0796               	addwf	Lcd_Write_String@i,f
  2268     033E  1803               	skipnc
  2269     033F  0A97               	incf	Lcd_Write_String@i+1,f
  2270     0340  3000               	movlw	0
  2271     0341  0797               	addwf	Lcd_Write_String@i+1,f
  2272     0342  2B2C               	goto	l1299
  2273     0343                     __end_of_Lcd_Write_String:
  2274                           
  2275                           	psect	text15
  2276     02E5                     __ptext15:	
  2277 ;; *************** function _Lcd_Write_Char *****************
  2278 ;; Defined at:
  2279 ;;		line 94 in file "lcd.c"
  2280 ;; Parameters:    Size  Location     Type
  2281 ;;  a               1    wreg     unsigned char 
  2282 ;; Auto vars:     Size  Location     Type
  2283 ;;  a               1    8[BANK0 ] unsigned char 
  2284 ;;  y               1    7[BANK0 ] unsigned char 
  2285 ;;  temp            1    6[BANK0 ] unsigned char 
  2286 ;; Return value:  Size  Location     Type
  2287 ;;                  1    wreg      void 
  2288 ;; Registers used:
  2289 ;;		wreg, status,2, status,0, pclath, cstack
  2290 ;; Tracked objects:
  2291 ;;		On entry : 100/0
  2292 ;;		On exit  : 100/0
  2293 ;;		Unchanged: 0/0
  2294 ;; Data sizes:     COMMON   BANK0
  2295 ;;      Params:         0       0
  2296 ;;      Locals:         0       3
  2297 ;;      Temps:          0       1
  2298 ;;      Totals:         0       4
  2299 ;;Total ram usage:        4 bytes
  2300 ;; Hardware stack levels used: 1
  2301 ;; Hardware stack levels required when called: 3
  2302 ;; This function calls:
  2303 ;;		_Lcd_Port
  2304 ;; This function is called by:
  2305 ;;		_main
  2306 ;;		_Lcd_Write_String
  2307 ;; This function uses a non-reentrant model
  2308 ;;
  2309                           
  2310     02E5                     _Lcd_Write_Char:	
  2311                           ;psect for function _Lcd_Write_Char
  2312                           
  2313                           
  2314                           ;incstack = 0
  2315                           ; Regs used in _Lcd_Write_Char: [wreg+status,2+status,0+pclath+cstack]
  2316                           ;Lcd_Write_Char@a stored from wreg
  2317     02E5  0094               	movwf	Lcd_Write_Char@a
  2318                           
  2319                           ;lcd.c: 94: void Lcd_Write_Char(char a);lcd.c: 95: {;lcd.c: 96:    char temp,y;;lcd.c: 9
      +                          7:    temp = a&0x0F;
  2320     02E6  0814               	movf	Lcd_Write_Char@a,w
  2321     02E7  390F               	andlw	15
  2322     02E8  0092               	movwf	Lcd_Write_Char@temp
  2323                           
  2324                           ;lcd.c: 98:    y = a&0xF0;
  2325     02E9  0814               	movf	Lcd_Write_Char@a,w
  2326     02EA  39F0               	andlw	240
  2327     02EB  0093               	movwf	Lcd_Write_Char@y
  2328                           
  2329                           ;lcd.c: 99:    RA0 = 1;
  2330     02EC  1405               	bsf	5,0	;volatile
  2331                           
  2332                           ;lcd.c: 100:    Lcd_Port(y>>4);
  2333     02ED  0813               	movf	Lcd_Write_Char@y,w
  2334     02EE  0091               	movwf	??_Lcd_Write_Char
  2335     02EF  3004               	movlw	4
  2336     02F0                     u455:
  2337     02F0  1003               	clrc
  2338     02F1  0C91               	rrf	??_Lcd_Write_Char,f
  2339     02F2  3EFF               	addlw	-1
  2340     02F3  1D03               	skipz
  2341     02F4  2AF0               	goto	u455
  2342     02F5  0811               	movf	??_Lcd_Write_Char,w
  2343     02F6  235B               	fcall	_Lcd_Port
  2344                           
  2345                           ;lcd.c: 101:    RA2 = 1;
  2346     02F7  1505               	bsf	5,2	;volatile
  2347                           
  2348                           ;lcd.c: 102:    _delay((unsigned long)((40)*(4000000/4000000.0)));
  2349     02F8  300D               	movlw	13
  2350     02F9  0091               	movwf	??_Lcd_Write_Char
  2351     02FA                     u917:
  2352     02FA  0B91               	decfsz	??_Lcd_Write_Char,f
  2353     02FB  2AFA               	goto	u917
  2354                           
  2355                           ;lcd.c: 103:    RA2 = 0;
  2356     02FC  1283               	bcf	3,5	;RP0=0, select bank0
  2357     02FD  1105               	bcf	5,2	;volatile
  2358                           
  2359                           ;lcd.c: 104:    Lcd_Port(temp);
  2360     02FE  0812               	movf	Lcd_Write_Char@temp,w
  2361     02FF  235B               	fcall	_Lcd_Port
  2362                           
  2363                           ;lcd.c: 105:    RA2 = 1;
  2364     0300  1505               	bsf	5,2	;volatile
  2365                           
  2366                           ;lcd.c: 106:    _delay((unsigned long)((40)*(4000000/4000000.0)));
  2367     0301  300D               	movlw	13
  2368     0302  0091               	movwf	??_Lcd_Write_Char
  2369     0303                     u927:
  2370     0303  0B91               	decfsz	??_Lcd_Write_Char,f
  2371     0304  2B03               	goto	u927
  2372                           
  2373                           ;lcd.c: 107:    RA2 = 0;
  2374     0305  1283               	bcf	3,5	;RP0=0, select bank0
  2375     0306  1105               	bcf	5,2	;volatile
  2376     0307  0008               	return
  2377     0308                     __end_of_Lcd_Write_Char:
  2378                           
  2379                           	psect	text16
  2380     0287                     __ptext16:	
  2381 ;; *************** function _Lcd_Init *****************
  2382 ;; Defined at:
  2383 ;;		line 74 in file "lcd.c"
  2384 ;; Parameters:    Size  Location     Type
  2385 ;;		None
  2386 ;; Auto vars:     Size  Location     Type
  2387 ;;		None
  2388 ;; Return value:  Size  Location     Type
  2389 ;;                  1    wreg      void 
  2390 ;; Registers used:
  2391 ;;		wreg, status,2, status,0, pclath, cstack
  2392 ;; Tracked objects:
  2393 ;;		On entry : B00/100
  2394 ;;		On exit  : 100/0
  2395 ;;		Unchanged: 0/0
  2396 ;; Data sizes:     COMMON   BANK0
  2397 ;;      Params:         0       0
  2398 ;;      Locals:         0       0
  2399 ;;      Temps:          0       2
  2400 ;;      Totals:         0       2
  2401 ;;Total ram usage:        2 bytes
  2402 ;; Hardware stack levels used: 1
  2403 ;; Hardware stack levels required when called: 4
  2404 ;; This function calls:
  2405 ;;		_Lcd_Cmd
  2406 ;;		_Lcd_Port
  2407 ;; This function is called by:
  2408 ;;		_main
  2409 ;; This function uses a non-reentrant model
  2410 ;;
  2411                           
  2412     0287                     _Lcd_Init:	
  2413                           ;psect for function _Lcd_Init
  2414                           
  2415                           
  2416                           ;lcd.c: 76:   Lcd_Port(0x00);
  2417                           
  2418                           ;incstack = 0
  2419                           ; Regs used in _Lcd_Init: [wreg+status,2+status,0+pclath+cstack]
  2420     0287  3000               	movlw	0
  2421     0288  235B               	fcall	_Lcd_Port
  2422                           
  2423                           ;lcd.c: 77:    _delay((unsigned long)((20)*(4000000/4000.0)));
  2424     0289  301A               	movlw	26
  2425     028A  0095               	movwf	??_Lcd_Init+1
  2426     028B  30F8               	movlw	248
  2427     028C  0094               	movwf	??_Lcd_Init
  2428     028D                     u937:
  2429     028D  0B94               	decfsz	??_Lcd_Init,f
  2430     028E  2A8D               	goto	u937
  2431     028F  0B95               	decfsz	??_Lcd_Init+1,f
  2432     0290  2A8D               	goto	u937
  2433     0291  0000               	nop
  2434                           
  2435                           ;lcd.c: 78:   Lcd_Cmd(0x03);
  2436     0292  3003               	movlw	3
  2437     0293  2388               	fcall	_Lcd_Cmd
  2438                           
  2439                           ;lcd.c: 79:  _delay((unsigned long)((5)*(4000000/4000.0)));
  2440     0294  3007               	movlw	7
  2441     0295  0095               	movwf	??_Lcd_Init+1
  2442     0296  307D               	movlw	125
  2443     0297  0094               	movwf	??_Lcd_Init
  2444     0298                     u947:
  2445     0298  0B94               	decfsz	??_Lcd_Init,f
  2446     0299  2A98               	goto	u947
  2447     029A  0B95               	decfsz	??_Lcd_Init+1,f
  2448     029B  2A98               	goto	u947
  2449                           
  2450                           ;lcd.c: 80:   Lcd_Cmd(0x03);
  2451     029C  3003               	movlw	3
  2452     029D  2388               	fcall	_Lcd_Cmd
  2453                           
  2454                           ;lcd.c: 81:  _delay((unsigned long)((11)*(4000000/4000.0)));
  2455     029E  300F               	movlw	15
  2456     029F  0095               	movwf	??_Lcd_Init+1
  2457     02A0  3047               	movlw	71
  2458     02A1  0094               	movwf	??_Lcd_Init
  2459     02A2                     u957:
  2460     02A2  0B94               	decfsz	??_Lcd_Init,f
  2461     02A3  2AA2               	goto	u957
  2462     02A4  0B95               	decfsz	??_Lcd_Init+1,f
  2463     02A5  2AA2               	goto	u957
  2464     02A6  2AA7               	nop2
  2465                           
  2466                           ;lcd.c: 82:   Lcd_Cmd(0x03);
  2467     02A7  3003               	movlw	3
  2468     02A8  2388               	fcall	_Lcd_Cmd
  2469                           
  2470                           ;lcd.c: 84:   Lcd_Cmd(0x02);
  2471     02A9  3002               	movlw	2
  2472     02AA  2388               	fcall	_Lcd_Cmd
  2473                           
  2474                           ;lcd.c: 85:   Lcd_Cmd(0x02);
  2475     02AB  3002               	movlw	2
  2476     02AC  2388               	fcall	_Lcd_Cmd
  2477                           
  2478                           ;lcd.c: 86:   Lcd_Cmd(0x08);
  2479     02AD  3008               	movlw	8
  2480     02AE  2388               	fcall	_Lcd_Cmd
  2481                           
  2482                           ;lcd.c: 87:   Lcd_Cmd(0x00);
  2483     02AF  3000               	movlw	0
  2484     02B0  2388               	fcall	_Lcd_Cmd
  2485                           
  2486                           ;lcd.c: 88:   Lcd_Cmd(0x0C);
  2487     02B1  300C               	movlw	12
  2488     02B2  2388               	fcall	_Lcd_Cmd
  2489                           
  2490                           ;lcd.c: 89:   Lcd_Cmd(0x00);
  2491     02B3  3000               	movlw	0
  2492     02B4  2388               	fcall	_Lcd_Cmd
  2493                           
  2494                           ;lcd.c: 90:   Lcd_Cmd(0x06);
  2495     02B5  3006               	movlw	6
  2496     02B6  2388               	fcall	_Lcd_Cmd
  2497     02B7  0008               	return
  2498     02B8                     __end_of_Lcd_Init:
  2499                           
  2500                           	psect	text17
  2501     0388                     __ptext17:	
  2502 ;; *************** function _Lcd_Cmd *****************
  2503 ;; Defined at:
  2504 ;;		line 31 in file "lcd.c"
  2505 ;; Parameters:    Size  Location     Type
  2506 ;;  a               1    wreg     unsigned char 
  2507 ;; Auto vars:     Size  Location     Type
  2508 ;;  a               1    7[BANK0 ] unsigned char 
  2509 ;; Return value:  Size  Location     Type
  2510 ;;                  1    wreg      void 
  2511 ;; Registers used:
  2512 ;;		wreg, status,2, status,0, pclath, cstack
  2513 ;; Tracked objects:
  2514 ;;		On entry : 0/0
  2515 ;;		On exit  : 100/0
  2516 ;;		Unchanged: 0/0
  2517 ;; Data sizes:     COMMON   BANK0
  2518 ;;      Params:         0       0
  2519 ;;      Locals:         0       1
  2520 ;;      Temps:          0       2
  2521 ;;      Totals:         0       3
  2522 ;;Total ram usage:        3 bytes
  2523 ;; Hardware stack levels used: 1
  2524 ;; Hardware stack levels required when called: 3
  2525 ;; This function calls:
  2526 ;;		_Lcd_Port
  2527 ;; This function is called by:
  2528 ;;		_Lcd_Clear
  2529 ;;		_Lcd_Set_Cursor
  2530 ;;		_Lcd_Init
  2531 ;; This function uses a non-reentrant model
  2532 ;;
  2533                           
  2534     0388                     _Lcd_Cmd:	
  2535                           ;psect for function _Lcd_Cmd
  2536                           
  2537                           
  2538                           ;incstack = 0
  2539                           ; Regs used in _Lcd_Cmd: [wreg+status,2+status,0+pclath+cstack]
  2540                           ;Lcd_Cmd@a stored from wreg
  2541     0388  1283               	bcf	3,5	;RP0=0, select bank0
  2542     0389  0093               	movwf	Lcd_Cmd@a
  2543                           
  2544                           ;lcd.c: 31: void Lcd_Cmd(char a);lcd.c: 32: {;lcd.c: 34:     RA0 = 0;
  2545     038A  1005               	bcf	5,0	;volatile
  2546                           
  2547                           ;lcd.c: 35:  Lcd_Port(a);
  2548     038B  0813               	movf	Lcd_Cmd@a,w
  2549     038C  235B               	fcall	_Lcd_Port
  2550                           
  2551                           ;lcd.c: 38:  RA2 = 1;
  2552     038D  1505               	bsf	5,2	;volatile
  2553                           
  2554                           ;lcd.c: 39:     _delay((unsigned long)((4)*(4000000/4000.0)));
  2555     038E  3006               	movlw	6
  2556     038F  0092               	movwf	??_Lcd_Cmd+1
  2557     0390  3030               	movlw	48
  2558     0391  0091               	movwf	??_Lcd_Cmd
  2559     0392                     u967:
  2560     0392  0B91               	decfsz	??_Lcd_Cmd,f
  2561     0393  2B92               	goto	u967
  2562     0394  0B92               	decfsz	??_Lcd_Cmd+1,f
  2563     0395  2B92               	goto	u967
  2564     0396  0000               	nop
  2565                           
  2566                           ;lcd.c: 40:     RA2 = 0;
  2567     0397  1283               	bcf	3,5	;RP0=0, select bank0
  2568     0398  1105               	bcf	5,2	;volatile
  2569     0399  0008               	return
  2570     039A                     __end_of_Lcd_Cmd:
  2571                           
  2572                           	psect	text18
  2573     035B                     __ptext18:	
  2574 ;; *************** function _Lcd_Port *****************
  2575 ;; Defined at:
  2576 ;;		line 7 in file "lcd.c"
  2577 ;; Parameters:    Size  Location     Type
  2578 ;;  a               1    wreg     unsigned char 
  2579 ;; Auto vars:     Size  Location     Type
  2580 ;;  a               1    4[BANK0 ] unsigned char 
  2581 ;; Return value:  Size  Location     Type
  2582 ;;                  1    wreg      void 
  2583 ;; Registers used:
  2584 ;;		wreg
  2585 ;; Tracked objects:
  2586 ;;		On entry : 0/0
  2587 ;;		On exit  : 100/0
  2588 ;;		Unchanged: 0/0
  2589 ;; Data sizes:     COMMON   BANK0
  2590 ;;      Params:         0       0
  2591 ;;      Locals:         0       1
  2592 ;;      Temps:          0       0
  2593 ;;      Totals:         0       1
  2594 ;;Total ram usage:        1 bytes
  2595 ;; Hardware stack levels used: 1
  2596 ;; Hardware stack levels required when called: 2
  2597 ;; This function calls:
  2598 ;;		Nothing
  2599 ;; This function is called by:
  2600 ;;		_Lcd_Cmd
  2601 ;;		_Lcd_Init
  2602 ;;		_Lcd_Write_Char
  2603 ;; This function uses a non-reentrant model
  2604 ;;
  2605                           
  2606     035B                     _Lcd_Port:	
  2607                           ;psect for function _Lcd_Port
  2608                           
  2609                           
  2610                           ;incstack = 0
  2611                           ; Regs used in _Lcd_Port: [wreg]
  2612                           ;Lcd_Port@a stored from wreg
  2613     035B  1283               	bcf	3,5	;RP0=0, select bank0
  2614     035C  0090               	movwf	Lcd_Port@a
  2615                           
  2616                           ;lcd.c: 7: void Lcd_Port(char a);lcd.c: 8: {;lcd.c: 9:  if(a & 1)
  2617     035D  1C10               	btfss	Lcd_Port@a,0
  2618     035E  2B61               	goto	l86
  2619                           
  2620                           ;lcd.c: 10:   RB1 = 1;
  2621     035F  1486               	bsf	6,1	;volatile
  2622     0360  2B62               	goto	l87
  2623     0361                     l86:	
  2624                           ;lcd.c: 11:  else
  2625                           
  2626                           
  2627                           ;lcd.c: 12:   RB1 = 0;
  2628     0361  1086               	bcf	6,1	;volatile
  2629     0362                     l87:
  2630                           
  2631                           ;lcd.c: 14:  if(a & 2)
  2632     0362  1C90               	btfss	Lcd_Port@a,1
  2633     0363  2B66               	goto	l88
  2634                           
  2635                           ;lcd.c: 15:   RB2 = 1;
  2636     0364  1506               	bsf	6,2	;volatile
  2637     0365  2B67               	goto	l89
  2638     0366                     l88:	
  2639                           ;lcd.c: 16:  else
  2640                           
  2641                           
  2642                           ;lcd.c: 17:   RB2 = 0;
  2643     0366  1106               	bcf	6,2	;volatile
  2644     0367                     l89:
  2645                           
  2646                           ;lcd.c: 19:  if(a & 4)
  2647     0367  1D10               	btfss	Lcd_Port@a,2
  2648     0368  2B6B               	goto	l90
  2649                           
  2650                           ;lcd.c: 20:   RB3 = 1;
  2651     0369  1586               	bsf	6,3	;volatile
  2652     036A  2B6C               	goto	l91
  2653     036B                     l90:	
  2654                           ;lcd.c: 21:  else
  2655                           
  2656                           
  2657                           ;lcd.c: 22:   RB3 = 0;
  2658     036B  1186               	bcf	6,3	;volatile
  2659     036C                     l91:
  2660                           
  2661                           ;lcd.c: 24:  if(a & 8)
  2662     036C  1D90               	btfss	Lcd_Port@a,3
  2663     036D  2B70               	goto	l92
  2664                           
  2665                           ;lcd.c: 25:   RB4 = 1;
  2666     036E  1606               	bsf	6,4	;volatile
  2667     036F  0008               	return
  2668     0370                     l92:	
  2669                           ;lcd.c: 26:  else
  2670                           
  2671                           
  2672                           ;lcd.c: 27:   RB4 = 0;
  2673     0370  1206               	bcf	6,4	;volatile
  2674     0371  0008               	return
  2675     0372                     __end_of_Lcd_Port:
  2676                           
  2677                           	psect	text19
  2678     03B5                     __ptext19:	
  2679 ;; *************** function _isr *****************
  2680 ;; Defined at:
  2681 ;;		line 38 in file "main.c"
  2682 ;; Parameters:    Size  Location     Type
  2683 ;;		None
  2684 ;; Auto vars:     Size  Location     Type
  2685 ;;		None
  2686 ;; Return value:  Size  Location     Type
  2687 ;;                  1    wreg      void 
  2688 ;; Registers used:
  2689 ;;		wreg, status,2, status,0, pclath, cstack
  2690 ;; Tracked objects:
  2691 ;;		On entry : 0/0
  2692 ;;		On exit  : 100/0
  2693 ;;		Unchanged: 0/0
  2694 ;; Data sizes:     COMMON   BANK0
  2695 ;;      Params:         0       0
  2696 ;;      Locals:         0       0
  2697 ;;      Temps:          0       2
  2698 ;;      Totals:         0       2
  2699 ;;Total ram usage:        2 bytes
  2700 ;; Hardware stack levels used: 1
  2701 ;; Hardware stack levels required when called: 1
  2702 ;; This function calls:
  2703 ;;		i1_delay_100ms
  2704 ;; This function is called by:
  2705 ;;		Interrupt level 1
  2706 ;; This function uses a non-reentrant model
  2707 ;;
  2708                           
  2709     03B5                     _isr:	
  2710                           ;psect for function _isr
  2711                           
  2712                           
  2713                           ;main.c: 40:     INTCONbits.INTF = 0;
  2714     03B5  108B               	bcf	11,1	;volatile
  2715                           
  2716                           ;main.c: 42:     toggleHold = ~toggleHold;
  2717     03B6  09C6               	comf	_toggleHold,f
  2718     03B7  09C7               	comf	_toggleHold+1,f
  2719                           
  2720                           ;main.c: 43:     delay_100ms();
  2721     03B8  23D7               	fcall	i1_delay_100ms
  2722     03B9  1283               	bcf	3,5	;RP0=0, select bank0
  2723     03BA  080F               	movf	??_isr+1,w
  2724     03BB  008A               	movwf	10
  2725     03BC  0E0E               	swapf	??_isr,w
  2726     03BD  0083               	movwf	3
  2727     03BE  0ECE               	swapf	78,f
  2728     03BF  0E4E               	swapf	78,w
  2729     03C0  0009               	retfie
  2730     03C1                     __end_of_isr:
  2731                           
  2732                           	psect	intentry
  2733     0004                     __pintentry:	
  2734                           ;incstack = 0
  2735                           ; Regs used in _isr: [wreg+status,2+status,0+pclath+cstack]
  2736                           
  2737     0004                     interrupt_function:
  2738     004E                     saved_w	set	btemp
  2739     0004  00CE               	movwf	btemp
  2740     0005  0E03               	swapf	3,w
  2741     0006  1283               	bcf	3,5	;RP0=0, select bank0
  2742     0007  008E               	movwf	??_isr
  2743     0008  080A               	movf	10,w
  2744     0009  008F               	movwf	??_isr+1
  2745     000A  2BB5               	ljmp	_isr
  2746                           
  2747                           	psect	text20
  2748     03D7                     __ptext20:	
  2749 ;; *************** function i1_delay_100ms *****************
  2750 ;; Defined at:
  2751 ;;		line 26 in file "main.c"
  2752 ;; Parameters:    Size  Location     Type
  2753 ;;		None
  2754 ;; Auto vars:     Size  Location     Type
  2755 ;;		None
  2756 ;; Return value:  Size  Location     Type
  2757 ;;                  1    wreg      void 
  2758 ;; Registers used:
  2759 ;;		wreg
  2760 ;; Tracked objects:
  2761 ;;		On entry : 100/0
  2762 ;;		On exit  : 0/0
  2763 ;;		Unchanged: 0/0
  2764 ;; Data sizes:     COMMON   BANK0
  2765 ;;      Params:         0       0
  2766 ;;      Locals:         0       0
  2767 ;;      Temps:          0       2
  2768 ;;      Totals:         0       2
  2769 ;;Total ram usage:        2 bytes
  2770 ;; Hardware stack levels used: 1
  2771 ;; This function calls:
  2772 ;;		Nothing
  2773 ;; This function is called by:
  2774 ;;		_isr
  2775 ;; This function uses a non-reentrant model
  2776 ;;
  2777                           
  2778     03D7                     i1_delay_100ms:	
  2779                           ;psect for function i1_delay_100ms
  2780                           
  2781                           
  2782                           ;main.c: 27:     _delay((unsigned long)((100)*(4000000/4000.0)));
  2783                           
  2784                           ;incstack = 0
  2785                           ; Regs used in i1_delay_100ms: [wreg]
  2786     03D7  3082               	movlw	130
  2787     03D8  008D               	movwf	??i1_delay_100ms+1
  2788     03D9  30DD               	movlw	221
  2789     03DA  008C               	movwf	??i1_delay_100ms
  2790     03DB                     u97_27:
  2791     03DB  0B8C               	decfsz	??i1_delay_100ms,f
  2792     03DC  2BDB               	goto	u97_27
  2793     03DD  0B8D               	decfsz	??i1_delay_100ms+1,f
  2794     03DE  2BDB               	goto	u97_27
  2795     03DF  2BE0               	nop2
  2796     03E0  0008               	return
  2797     03E1                     __end_ofi1_delay_100ms:
  2798     004E                     btemp	set	78	;btemp
  2799     004E                     wtemp0	set	78
  2800                           
  2801                           	psect	config
  2802                           
  2803                           ;Config register CONFIG @ 0x2007
  2804                           ;	Oscillator Selection bits
  2805                           ;	FOSC = XT, XT oscillator
  2806                           ;	Watchdog Timer
  2807                           ;	WDTE = OFF, WDT disabled
  2808                           ;	Power-up Timer Enable bit
  2809                           ;	PWRTE = ON, Power-up Timer is enabled
  2810                           ;	Code Protection bit
  2811                           ;	CP = OFF, Code protection disabled
  2812     2007                     	org	8199
  2813     2007  3FF1               	dw	16369

Data Sizes:
    Strings     5
    Constant    0
    Data        8
    BSS         4
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON            0      0       0
    BANK0            66     50      62

Pointer List with Targets:

    strcpy@from	PTR const unsigned char  size(1) Largest target is 5
		 -> STR_1(CODE[5]), 

    strcpy@to	PTR unsigned char  size(1) Largest target is 8
		 -> welcomeMessage@msg(BANK0[8]), 

    strcpy@cp	PTR unsigned char  size(1) Largest target is 8
		 -> welcomeMessage@msg(BANK0[8]), 

    utoa@buf	PTR unsigned char  size(1) Largest target is 16
		 -> Lcd_Write_Int@temp(BANK0[16]), 

    sp__itoa	PTR unsigned char  size(1) Largest target is 0

    sp__utoa	PTR unsigned char  size(1) Largest target is 16
		 -> Lcd_Write_Int@temp(BANK0[16]), 

    Lcd_Write_String@a	PTR unsigned char  size(1) Largest target is 16
		 -> Lcd_Write_Int@temp(BANK0[16]), welcomeMessage@msg(BANK0[8]), 

    sp__strcpy	PTR unsigned char  size(1) Largest target is 8
		 -> welcomeMessage@msg(BANK0[8]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _isr in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_Lcd_Write_Int
    _welcomeMessage->_Lcd_Set_Cursor
    _delay_1000ms->_delay_100ms
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Clear->_Lcd_Cmd
    ___wmul->___lwdiv
    _Lcd_Write_Int->_utoa
    _utoa->___lwdiv
    ___lwdiv->___lwmod
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Init->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port

Critical Paths under _isr in BANK0

    _isr->i1_delay_100ms

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 8     8      0   10215
                                             42 BANK0      8     8      0
                          _Lcd_Clear
                           _Lcd_Init
                     _Lcd_Set_Cursor
                     _Lcd_Write_Char
                      _Lcd_Write_Int
                            ___lwdiv
                            ___lwmod
                             ___wmul
                        _delay_100ms
                           _readADC1
                           _readADC2
                     _welcomeMessage
 ---------------------------------------------------------------------------------
 (1) _welcomeMessage                                      12    12      0    2222
                                             14 BANK0     12    12      0
                          _Lcd_Clear
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
                       _delay_1000ms
                             _strcpy
 ---------------------------------------------------------------------------------
 (2) _strcpy                                               3     2      1     184
                                              4 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (2) _delay_1000ms                                         2     2      0      46
                                              6 BANK0      2     2      0
                        _delay_100ms
 ---------------------------------------------------------------------------------
 (3) _delay_100ms                                          2     2      0       0
                                              4 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _Lcd_Set_Cursor                                       6     5      1    1444
                                              8 BANK0      6     5      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Clear                                            2     2      0     110
                                              8 BANK0      2     2      0
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _readADC2                                             8     6      2     208
                                              4 BANK0      8     6      2
 ---------------------------------------------------------------------------------
 (1) _readADC1                                             8     6      2     208
                                              4 BANK0      8     6      2
 ---------------------------------------------------------------------------------
 (1) ___wmul                                               6     2      4     396
                                             16 BANK0      6     2      4
                            ___lwdiv (ARG)
                            ___lwmod (ARG)
 ---------------------------------------------------------------------------------
 (1) _Lcd_Write_Int                                       18    16      2    3382
                                             24 BANK0     18    16      2
                   _Lcd_Write_String
                               _utoa
 ---------------------------------------------------------------------------------
 (2) _utoa                                                 8     4      4    2335
                                             16 BANK0      8     4      4
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (1) ___lwmod                                              5     1      4     615
                                              4 BANK0      5     1      4
 ---------------------------------------------------------------------------------
 (1) ___lwdiv                                              7     3      4    1074
                                              9 BANK0      7     3      4
                            ___lwmod (ARG)
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_String                                     4     4      0     367
                                              9 BANK0      4     4      0
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (3) _Lcd_Write_Char                                       4     4      0     178
                                              5 BANK0      4     4      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             2     2      0     198
                                              8 BANK0      2     2      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (3) _Lcd_Cmd                                              3     3      0     110
                                              5 BANK0      3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (4) _Lcd_Port                                             1     1      0      88
                                              4 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _isr                                                  2     2      0       0
                                              2 BANK0      2     2      0
                      i1_delay_100ms
 ---------------------------------------------------------------------------------
 (6) i1_delay_100ms                                        2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Lcd_Clear
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Init
     _Lcd_Cmd
     _Lcd_Port
   _Lcd_Set_Cursor
     _Lcd_Cmd
   _Lcd_Write_Char
     _Lcd_Port
   _Lcd_Write_Int
     _Lcd_Write_String
       _Lcd_Write_Char
     _utoa
       ___lwdiv
         ___lwmod (ARG)
       ___lwmod
   ___lwdiv
   ___lwmod
   ___wmul
     ___lwdiv (ARG)
     ___lwmod (ARG)
   _delay_100ms
   _readADC1
   _readADC2
   _welcomeMessage
     _Lcd_Clear
     _Lcd_Set_Cursor
     _Lcd_Write_String
     _delay_1000ms
       _delay_100ms
     _strcpy

 _isr (ROOT)
   i1_delay_100ms

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               42     32      3E       3       93.9%
BITBANK0            42      0       0       5        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               0      0       0       1        0.0%
BITCOMMON            0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      3E       6        0.0%
ABS                  0      0      3E       4        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA              40      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.41 build 20230208172133 
Symbol Table                                                                                   Tue May 02 16:15:13 2023

                       pc 0002                        l90 036B                        l91 036C  
                      l92 0370                        l86 0361                        l87 0362  
                      l88 0366                        l89 0367                        fsr 0004  
     ___wmul@multiplicand 001E                       l241 0312                       l701 013D  
                     _RA0 0028                       _RA1 0029                       _RA2 002A  
                     _RB1 0031                       _RA3 002B                       _RB2 0032  
                     _RB3 0033                       _RB4 0034                       _RB5 0035  
                     _RB6 0036                       _RB7 0037                       u505 020A  
                     u515 0214                       u455 02F0                       u615 022D  
                     u545 025E                       u475 01F2                       u635 0246  
                     u565 026F                       u495 01FE                       u575 0278  
                     u817 03D1                       u690 02C0                       u907 01C8  
                     u827 03A2                       u595 0385                       u917 02FA  
                     u837 0156                       u927 0303                       u775 0313  
                     u847 015C                       u937 028D                       u785 031A  
                     u857 016B                       u947 0298                       u867 017D  
                     u957 02A2                       u877 01A1                       u967 0392  
                     u887 01A7                       u897 01B6                       _isr 03B5  
                     fsr0 0004                       indf 0000      __end_of_delay_1000ms 0388  
                    l1221 01FD                      l1231 021E                      l1305 0346  
                    l1227 0213                      l1219 01EF                      l1243 025B  
                    l1245 0269                      l1253 0282                      l1309 0102  
                    l1319 011D                      l1407 01C3                      l1431 0154  
                    l1263 0374                      l1249 0277                      l1283 023C  
                    l1531 0031                      l1381 019F                      l1533 0067  
                    l1447 0169                      l1457 0178                      l1299 032C  
                    l1475 030A                      l1397 01B4                      ?_isr 000C  
                    STR_1 03C7         ?_Lcd_Write_String 000C                      _main 0022  
                    btemp 004E                      _utoa 00FD                      start 000B  
      ??_Lcd_Write_String 0015           __end_of_Lcd_Cmd 039A                     ??_isr 000E  
                   ?_main 000C                     ?_utoa 001C           __end_of___lwdiv 0223  
         __end_of___lwmod 0287                     _TRISA 0085                     _TRISB 0086  
                   u97_27 03DB                     pclath 000A                     utoa@c 0022  
                   utoa@v 0020                     status 0003                     wtemp0 004E  
        __end_of_Lcd_Init 02B8          __end_of_Lcd_Port 0372           __initialization 000C  
            __end_of_main 00FD              __end_of_utoa 0151                    ??_main 0000  
                  ??_utoa 0000             i1_delay_100ms 03D7                 ??_Lcd_Cmd 0011  
            readADC1@bits 0016              readADC2@bits 0016              readADC1@volt 0014  
            readADC2@volt 0014          ??_welcomeMessage 001A                    _adcVal 0048  
        __end_of_readADC1 01E7          __end_of_readADC2 019C                    ___wmul 0308  
               ??___lwdiv 0000                 ??___lwmod 0000                    main@d1 0036  
                  main@d2 0038                    main@d3 003A                    main@d4 003C  
                  _strcpy 0343     __end_of_Lcd_Write_Int 03B5                    saved_w 004E  
          ?i1_delay_100ms 000C           Lcd_Set_Cursor@a 0016           Lcd_Set_Cursor@b 0014  
         Lcd_Set_Cursor@y 0018           Lcd_Set_Cursor@z 0017   __end_of__initialization 0020  
       __end_of_Lcd_Clear 03A8              _delay_1000ms 0372            __pcstackCOMMON 0000  
            __pidataBANK0 03E1            _Lcd_Set_Cursor 0223            _OPTION_REGbits 0081  
               ?_Lcd_Init 000C                 ?_Lcd_Port 000C            Lcd_Write_Int@a 0024  
              __pbssBANK0 0046             delay_1000ms@i 0012                __pmaintext 0022  
                 ?___wmul 001C                __pintentry 0004    __end_of_Lcd_Set_Cursor 0255  
                 ?_strcpy 0010           ??i1_delay_100ms 000C                ??_Lcd_Init 0014  
              ??_Lcd_Port 0000                __stringtab 03C1                 ?_readADC1 0010  
               ?_readADC2 0010            _Lcd_Write_Char 02E5                   _Lcd_Cmd 0388  
                 ___lwdiv 01E7                   ___lwmod 0255           ?_Lcd_Set_Cursor 0014  
                 __ptext1 02B8                   __ptext2 0343                   __ptext3 0372  
                 __ptext4 03CC                   __ptext5 0223                   __ptext6 039A  
                 __ptext7 0151                   __ptext8 019C                   __ptext9 0308  
           ??_delay_100ms 0010    __end_of_Lcd_Write_Char 0308      end_of_initialization 0020  
              ??_readADC1 0012                ??_readADC2 0012                 Lcd_Port@a 0010  
                 utoa@buf 0023         Lcd_Write_Int@temp 0026                   utoa@val 001C  
              _toggleHold 0046         welcomeMessage@msg 001E           ?_Lcd_Write_Char 000C  
       Lcd_Write_String@a 0018         Lcd_Write_String@i 0016       __end_of_delay_100ms 03D7  
               _Lcd_Clear 039A            __end_of___wmul 0329          _Lcd_Write_String 0329  
          __end_of_strcpy 035B       start_initialization 000C               __end_of_isr 03C1  
              ?_Lcd_Clear 000C                  ??___wmul 0000               __pdataBANK0 003E  
         Lcd_Write_Char@a 0014           Lcd_Write_Char@y 0013                  ??_strcpy 0000  
               ___latbits 0000             __pcstackBANK0 000C               _delay_100ms 03CC  
                ?_Lcd_Cmd 000C          ___lwdiv@dividend 0017          ??_Lcd_Set_Cursor 0015  
                ?___lwdiv 0015                  ?___lwmod 0010                 __pstrings 03C1  
           _Lcd_Write_Int 03A8     __end_ofi1_delay_100ms 03E1          ___lwdiv@quotient 0019  
       interrupt_function 0004            ___wmul@product 0020                  Lcd_Cmd@a 0013  
             ??_Lcd_Clear 0014            readADC1@rxData 0017               __stringbase 03C6  
       ___wmul@multiplier 001C            readADC2@rxData 0017            ?_Lcd_Write_Int 0024  
        ??_Lcd_Write_Char 0011                  _Lcd_Init 0287                  _Lcd_Port 035B  
__end_of_Lcd_Write_String 0343             ?_delay_1000ms 000C        __end_of__stringtab 03C7  
          _welcomeMessage 02B8           ___lwdiv@divisor 0015           ___lwdiv@counter 001B  
                __ptext10 03A8                  __ptext11 00FD                  __ptext20 03D7  
                __ptext12 0255                  __ptext13 01E7                  __ptext14 0329  
                __ptext15 02E5                  __ptext16 0287                  __ptext17 0388  
                __ptext18 035B                  __ptext19 03B5                  _readADC1 019C  
                _readADC2 0151                strcpy@from 0010            ??_delay_1000ms 0000  
         ??_Lcd_Write_Int 0000    __end_of_welcomeMessage 02E5                _INTCONbits 000B  
            ?_delay_100ms 000C        Lcd_Write_Char@temp 0012                  intlevel1 0000  
        ___lwmod@dividend 0012                 stringcode 03C1        Lcd_Set_Cursor@temp 0019  
         ?_welcomeMessage 000C                  utoa@base 001E           ___lwmod@divisor 0010  
                strcpy@cp 0012                  strcpy@to 0011           ___lwmod@counter 0014  
                stringdir 03C1                  stringtab 03C1        welcomeMessage@F331 003E  

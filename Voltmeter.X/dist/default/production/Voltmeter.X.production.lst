

Microchip MPLAB XC8 Assembler V2.41 build 20230208172133 
                                                                                               Tue Apr 25 15:34:48 2023

Microchip MPLAB XC8 C Compiler v2.41 (Free license) build 20230208172133 Og9 
     1                           	processor	16F84A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2,noexec
     5                           	psect	strings,global,class=STRING,delta=2,noexec
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    11                           	psect	maintext,global,class=CODE,split=1,delta=2
    12                           	psect	text1,local,class=CODE,merge=1,delta=2
    13                           	psect	text2,local,class=CODE,merge=1,delta=2,group=2
    14                           	psect	text3,local,class=CODE,merge=1,delta=2
    15                           	psect	text4,local,class=CODE,merge=1,delta=2
    16                           	psect	text5,local,class=CODE,merge=1,delta=2
    17                           	psect	text6,local,class=CODE,merge=1,delta=2,group=1
    18                           	psect	text7,local,class=CODE,merge=1,delta=2
    19                           	psect	text8,local,class=CODE,merge=1,delta=2,group=2
    20                           	psect	text9,local,class=CODE,merge=1,delta=2,group=1
    21                           	psect	text10,local,class=CODE,merge=1,delta=2,group=1
    22                           	psect	text11,local,class=CODE,merge=1,delta=2
    23                           	psect	text12,local,class=CODE,merge=1,delta=2
    24                           	psect	text13,local,class=CODE,merge=1,delta=2
    25                           	psect	text14,local,class=CODE,merge=1,delta=2
    26                           	psect	text15,local,class=CODE,merge=1,delta=2
    27                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    28                           	dabs	1,0x4E,2
    29     0000                     
    30                           ; Version 2.20
    31                           ; Generated 12/02/2020 GMT
    32                           ; 
    33                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    34                           ; All rights reserved.
    35                           ; 
    36                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    37                           ; 
    38                           ; Redistribution and use in source and binary forms, with or without modification, are
    39                           ; permitted provided that the following conditions are met:
    40                           ; 
    41                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    42                           ;        conditions and the following disclaimer.
    43                           ; 
    44                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    45                           ;        of conditions and the following disclaimer in the documentation and/or other
    46                           ;        materials provided with the distribution.
    47                           ; 
    48                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    49                           ;        software without specific prior written permission.
    50                           ; 
    51                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    52                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    53                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    54                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    55                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    56                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    57                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    58                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    59                           ; 
    60                           ; 
    61                           ; Code-generator required, PIC16F84A Definitions
    62                           ; 
    63                           ; SFR Addresses
    64     0000                     	;# 
    65     0001                     	;# 
    66     0002                     	;# 
    67     0003                     	;# 
    68     0004                     	;# 
    69     0005                     	;# 
    70     0006                     	;# 
    71     0008                     	;# 
    72     0009                     	;# 
    73     000A                     	;# 
    74     000B                     	;# 
    75     0081                     	;# 
    76     0085                     	;# 
    77     0086                     	;# 
    78     0088                     	;# 
    79     0089                     	;# 
    80     0000                     	;# 
    81     0001                     	;# 
    82     0002                     	;# 
    83     0003                     	;# 
    84     0004                     	;# 
    85     0005                     	;# 
    86     0006                     	;# 
    87     0008                     	;# 
    88     0009                     	;# 
    89     000A                     	;# 
    90     000B                     	;# 
    91     0081                     	;# 
    92     0085                     	;# 
    93     0086                     	;# 
    94     0088                     	;# 
    95     0089                     	;# 
    96     0000                     	;# 
    97     0001                     	;# 
    98     0002                     	;# 
    99     0003                     	;# 
   100     0004                     	;# 
   101     0005                     	;# 
   102     0006                     	;# 
   103     0008                     	;# 
   104     0009                     	;# 
   105     000A                     	;# 
   106     000B                     	;# 
   107     0081                     	;# 
   108     0085                     	;# 
   109     0086                     	;# 
   110     0088                     	;# 
   111     0089                     	;# 
   112     0000                     	;# 
   113     0001                     	;# 
   114     0002                     	;# 
   115     0003                     	;# 
   116     0004                     	;# 
   117     0005                     	;# 
   118     0006                     	;# 
   119     0008                     	;# 
   120     0009                     	;# 
   121     000A                     	;# 
   122     000B                     	;# 
   123     0081                     	;# 
   124     0085                     	;# 
   125     0086                     	;# 
   126     0088                     	;# 
   127     0089                     	;# 
   128                           
   129                           	psect	idataBANK0
   130     0112                     __pidataBANK0:
   131                           
   132                           ;initializer for welcomeMessage@F325
   133     0112  3457               	retlw	87
   134     0113  3465               	retlw	101
   135     0114  346C               	retlw	108
   136     0115  3463               	retlw	99
   137     0116  346F               	retlw	111
   138     0117  346D               	retlw	109
   139     0118  3465               	retlw	101
   140     0119  3400               	retlw	0
   141     0036                     _RB6	set	54
   142     002A                     _RA2	set	42
   143     0028                     _RA0	set	40
   144     0033                     _RB3	set	51
   145     0032                     _RB2	set	50
   146     0031                     _RB1	set	49
   147     0030                     _RB0	set	48
   148     0029                     _RA1	set	41
   149     0035                     _RB5	set	53
   150     0037                     _RB7	set	55
   151     0085                     _TRISA	set	133
   152     0086                     _TRISB	set	134
   153                           
   154                           	psect	strings
   155     0001                     __pstrings:
   156     0001                     stringtab:
   157     0001                     __stringtab:
   158     0001                     stringcode:	
   159                           ;	String table - string pointers are 1 byte each
   160                           
   161     0001                     stringdir:
   162     0001  3000               	movlw	high stringdir
   163     0002  008A               	movwf	10
   164     0003  0804               	movf	4,w
   165     0004  0A84               	incf	4,f
   166     0005  0782               	addwf	2,f
   167     0006                     __stringbase:
   168     0006  3400               	retlw	0
   169     0007                     __end_of__stringtab:
   170     0007                     STR_1:
   171     0007  3430               	retlw	48	;'0'
   172     0008  342D               	retlw	45	;'-'
   173     0009  3435               	retlw	53	;'5'
   174     000A  3456               	retlw	86	;'V'
   175     000B  3400               	retlw	0
   176                           
   177                           	psect	cinit
   178     03EC                     start_initialization:	
   179                           ; #config settings
   180                           
   181     03EC                     __initialization:
   182                           
   183                           ; Initialize objects allocated to BANK0
   184     03EC  2112               	fcall	__pidataBANK0	;fetch initializer
   185     03ED  00B9               	movwf	__pdataBANK0& (0+127)
   186     03EE  2113               	fcall	__pidataBANK0+1	;fetch initializer
   187     03EF  00BA               	movwf	(__pdataBANK0+1)& (0+127)
   188     03F0  2114               	fcall	__pidataBANK0+2	;fetch initializer
   189     03F1  00BB               	movwf	(__pdataBANK0+2)& (0+127)
   190     03F2  2115               	fcall	__pidataBANK0+3	;fetch initializer
   191     03F3  00BC               	movwf	(__pdataBANK0+3)& (0+127)
   192     03F4  2116               	fcall	__pidataBANK0+4	;fetch initializer
   193     03F5  00BD               	movwf	(__pdataBANK0+4)& (0+127)
   194     03F6  2117               	fcall	__pidataBANK0+5	;fetch initializer
   195     03F7  00BE               	movwf	(__pdataBANK0+5)& (0+127)
   196     03F8  2118               	fcall	__pidataBANK0+6	;fetch initializer
   197     03F9  00BF               	movwf	(__pdataBANK0+6)& (0+127)
   198     03FA  2119               	fcall	__pidataBANK0+7	;fetch initializer
   199     03FB  00C0               	movwf	(__pdataBANK0+7)& (0+127)
   200                           
   201                           ; Clear objects allocated to BANK0
   202     03FC  01C1               	clrf	__pbssBANK0& (0+127)
   203     03FD  01C2               	clrf	(__pbssBANK0+1)& (0+127)
   204     03FE                     end_of_initialization:	
   205                           ;End of C runtime variable initialization code
   206                           
   207     03FE                     __end_of__initialization:
   208     03FE  0183               	clrf	3
   209     03FF  2B89               	ljmp	_main	;jump to C main() function
   210                           
   211                           	psect	bssBANK0
   212     0041                     __pbssBANK0:
   213     0041                     _adcVal:
   214     0041                     	ds	2
   215                           
   216                           	psect	dataBANK0
   217     0039                     __pdataBANK0:
   218     0039                     welcomeMessage@F325:
   219     0039                     	ds	8
   220                           
   221                           	psect	cstackCOMMON
   222     0000                     __pcstackCOMMON:
   223     0000                     ??_strcpy:
   224     0000                     ??_Lcd_Write_Int:	
   225                           ; 1 bytes @ 0x0
   226                           
   227     0000                     ??_utoa:	
   228                           ; 1 bytes @ 0x0
   229                           
   230     0000                     ??_Lcd_Port:	
   231                           ; 1 bytes @ 0x0
   232                           
   233     0000                     ??___wmul:	
   234                           ; 1 bytes @ 0x0
   235                           
   236     0000                     ??___lwdiv:	
   237                           ; 1 bytes @ 0x0
   238                           
   239     0000                     ??___lwmod:	
   240                           ; 1 bytes @ 0x0
   241                           
   242                           
   243                           	psect	cstackBANK0
   244     000C                     __pcstackBANK0:	
   245                           ; 1 bytes @ 0x0
   246                           
   247     000C                     ?_Lcd_Clear:
   248     000C                     ?_Lcd_Write_String:	
   249                           ; 1 bytes @ 0x0
   250                           
   251     000C                     ?_strcpy:	
   252                           ; 1 bytes @ 0x0
   253                           
   254     000C                     ?_Lcd_Init:	
   255                           ; 1 bytes @ 0x0
   256                           
   257     000C                     ?_Lcd_Write_Char:	
   258                           ; 1 bytes @ 0x0
   259                           
   260     000C                     ?_welcomeMessage:	
   261                           ; 1 bytes @ 0x0
   262                           
   263     000C                     ?_main:	
   264                           ; 1 bytes @ 0x0
   265                           
   266     000C                     ?_Lcd_Port:	
   267                           ; 1 bytes @ 0x0
   268                           
   269     000C                     ?_Lcd_Cmd:	
   270                           ; 1 bytes @ 0x0
   271                           
   272     000C                     ?_readADC:	
   273                           ; 1 bytes @ 0x0
   274                           
   275     000C                     ?___lwmod:	
   276                           ; 2 bytes @ 0x0
   277                           
   278     000C                     Lcd_Port@a:	
   279                           ; 2 bytes @ 0x0
   280                           
   281     000C                     strcpy@from:	
   282                           ; 1 bytes @ 0x0
   283                           
   284     000C                     ___lwmod@divisor:	
   285                           ; 1 bytes @ 0x0
   286                           
   287                           
   288                           ; 2 bytes @ 0x0
   289     000C                     	ds	1
   290     000D                     ??_Lcd_Write_Char:
   291     000D                     ??_Lcd_Cmd:	
   292                           ; 1 bytes @ 0x1
   293                           
   294     000D                     strcpy@to:	
   295                           ; 1 bytes @ 0x1
   296                           
   297                           
   298                           ; 1 bytes @ 0x1
   299     000D                     	ds	1
   300     000E                     ??_readADC:
   301     000E                     Lcd_Write_Char@temp:	
   302                           ; 1 bytes @ 0x2
   303                           
   304     000E                     strcpy@cp:	
   305                           ; 1 bytes @ 0x2
   306                           
   307     000E                     ___lwmod@dividend:	
   308                           ; 1 bytes @ 0x2
   309                           
   310                           
   311                           ; 2 bytes @ 0x2
   312     000E                     	ds	1
   313     000F                     Lcd_Cmd@a:
   314     000F                     Lcd_Write_Char@y:	
   315                           ; 1 bytes @ 0x3
   316                           
   317                           
   318                           ; 1 bytes @ 0x3
   319     000F                     	ds	1
   320     0010                     ??_Lcd_Clear:
   321     0010                     ?_Lcd_Set_Cursor:	
   322                           ; 1 bytes @ 0x4
   323                           
   324     0010                     ??_Lcd_Init:	
   325                           ; 1 bytes @ 0x4
   326                           
   327     0010                     Lcd_Set_Cursor@b:	
   328                           ; 1 bytes @ 0x4
   329                           
   330     0010                     Lcd_Write_Char@a:	
   331                           ; 1 bytes @ 0x4
   332                           
   333     0010                     ___lwmod@counter:	
   334                           ; 1 bytes @ 0x4
   335                           
   336     0010                     readADC@volt:	
   337                           ; 1 bytes @ 0x4
   338                           
   339                           
   340                           ; 2 bytes @ 0x4
   341     0010                     	ds	1
   342     0011                     ??_Lcd_Set_Cursor:
   343     0011                     ??_Lcd_Write_String:	
   344                           ; 1 bytes @ 0x5
   345                           
   346     0011                     ?___lwdiv:	
   347                           ; 1 bytes @ 0x5
   348                           
   349     0011                     ___lwdiv@divisor:	
   350                           ; 2 bytes @ 0x5
   351                           
   352                           
   353                           ; 2 bytes @ 0x5
   354     0011                     	ds	1
   355     0012                     Lcd_Set_Cursor@a:
   356     0012                     readADC@bits:	
   357                           ; 1 bytes @ 0x6
   358                           
   359     0012                     Lcd_Write_String@i:	
   360                           ; 1 bytes @ 0x6
   361                           
   362                           
   363                           ; 2 bytes @ 0x6
   364     0012                     	ds	1
   365     0013                     Lcd_Set_Cursor@z:
   366     0013                     readADC@rxData:	
   367                           ; 1 bytes @ 0x7
   368                           
   369     0013                     ___lwdiv@dividend:	
   370                           ; 1 bytes @ 0x7
   371                           
   372                           
   373                           ; 2 bytes @ 0x7
   374     0013                     	ds	1
   375     0014                     Lcd_Set_Cursor@y:
   376     0014                     Lcd_Write_String@a:	
   377                           ; 1 bytes @ 0x8
   378                           
   379                           
   380                           ; 1 bytes @ 0x8
   381     0014                     	ds	1
   382     0015                     Lcd_Set_Cursor@temp:
   383     0015                     ___lwdiv@quotient:	
   384                           ; 1 bytes @ 0x9
   385                           
   386                           
   387                           ; 2 bytes @ 0x9
   388     0015                     	ds	1
   389     0016                     ??_welcomeMessage:
   390                           
   391                           ; 1 bytes @ 0xA
   392     0016                     	ds	1
   393     0017                     ___lwdiv@counter:
   394                           
   395                           ; 1 bytes @ 0xB
   396     0017                     	ds	1
   397     0018                     ?_utoa:
   398     0018                     ?___wmul:	
   399                           ; 1 bytes @ 0xC
   400                           
   401     0018                     ___wmul@multiplier:	
   402                           ; 2 bytes @ 0xC
   403                           
   404     0018                     utoa@val:	
   405                           ; 2 bytes @ 0xC
   406                           
   407                           
   408                           ; 2 bytes @ 0xC
   409     0018                     	ds	2
   410     001A                     ___wmul@multiplicand:
   411     001A                     utoa@base:	
   412                           ; 2 bytes @ 0xE
   413                           
   414     001A                     welcomeMessage@msg:	
   415                           ; 2 bytes @ 0xE
   416                           
   417                           
   418                           ; 8 bytes @ 0xE
   419     001A                     	ds	2
   420     001C                     ___wmul@product:
   421     001C                     utoa@v:	
   422                           ; 2 bytes @ 0x10
   423                           
   424                           
   425                           ; 2 bytes @ 0x10
   426     001C                     	ds	2
   427     001E                     utoa@c:
   428                           
   429                           ; 1 bytes @ 0x12
   430     001E                     	ds	1
   431     001F                     utoa@buf:
   432                           
   433                           ; 1 bytes @ 0x13
   434     001F                     	ds	1
   435     0020                     ?_Lcd_Write_Int:
   436     0020                     Lcd_Write_Int@a:	
   437                           ; 1 bytes @ 0x14
   438                           
   439                           
   440                           ; 2 bytes @ 0x14
   441     0020                     	ds	2
   442     0022                     Lcd_Write_Int@temp:
   443                           
   444                           ; 16 bytes @ 0x16
   445     0022                     	ds	16
   446     0032                     ??_main:
   447                           
   448                           ; 1 bytes @ 0x26
   449     0032                     	ds	3
   450     0035                     main@d1:
   451                           
   452                           ; 2 bytes @ 0x29
   453     0035                     	ds	2
   454     0037                     main@d2:
   455                           
   456                           ; 2 bytes @ 0x2B
   457     0037                     	ds	2
   458                           
   459                           	psect	maintext
   460     0389                     __pmaintext:	
   461 ;;
   462 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   463 ;;
   464 ;; *************** function _main *****************
   465 ;; Defined at:
   466 ;;		line 46 in file "main.c"
   467 ;; Parameters:    Size  Location     Type
   468 ;;		None
   469 ;; Auto vars:     Size  Location     Type
   470 ;;  d2              2   43[BANK0 ] unsigned short 
   471 ;;  d1              2   41[BANK0 ] unsigned short 
   472 ;; Return value:  Size  Location     Type
   473 ;;                  1    wreg      void 
   474 ;; Registers used:
   475 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   476 ;; Tracked objects:
   477 ;;		On entry : B00/0
   478 ;;		On exit  : 0/0
   479 ;;		Unchanged: 0/0
   480 ;; Data sizes:     COMMON   BANK0
   481 ;;      Params:         0       0
   482 ;;      Locals:         0       4
   483 ;;      Temps:          0       3
   484 ;;      Totals:         0       7
   485 ;;Total ram usage:        7 bytes
   486 ;; Hardware stack levels required when called: 4
   487 ;; This function calls:
   488 ;;		_Lcd_Clear
   489 ;;		_Lcd_Init
   490 ;;		_Lcd_Set_Cursor
   491 ;;		_Lcd_Write_Char
   492 ;;		_Lcd_Write_Int
   493 ;;		___lwdiv
   494 ;;		___lwmod
   495 ;;		___wmul
   496 ;;		_readADC
   497 ;;		_welcomeMessage
   498 ;; This function is called by:
   499 ;;		Startup code after reset
   500 ;; This function uses a non-reentrant model
   501 ;;
   502                           
   503     0389                     _main:	
   504                           ;psect for function _main
   505                           
   506                           
   507                           ;main.c: 47:     TRISB = 0b01000000;
   508                           
   509                           ;incstack = 0
   510                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   511     0389  3040               	movlw	64
   512     038A  1683               	bsf	3,5	;RP0=1, select bank1
   513     038B  0086               	movwf	6	;volatile
   514                           
   515                           ;main.c: 48:     TRISA = 0b00000;
   516     038C  0185               	clrf	5	;volatile
   517                           
   518                           ;main.c: 50:     RB7 = 1;
   519     038D  1283               	bcf	3,5	;RP0=0, select bank0
   520     038E  1786               	bsf	6,7	;volatile
   521                           
   522                           ;main.c: 51:     RB5 = 0;
   523     038F  1286               	bcf	6,5	;volatile
   524                           
   525                           ;main.c: 53:     RA1 = 0;
   526     0390  1085               	bcf	5,1	;volatile
   527                           
   528                           ;main.c: 55:     Lcd_Init();
   529     0391  21D3               	fcall	_Lcd_Init
   530                           
   531                           ;main.c: 56:     welcomeMessage();
   532     0392  22A4               	fcall	_welcomeMessage
   533     0393                     l1286:
   534                           
   535                           ;main.c: 59:         adcVal = readADC();
   536     0393  22E9               	fcall	_readADC
   537     0394  080D               	movf	?_readADC+1,w
   538     0395  00C2               	movwf	_adcVal+1
   539     0396  080C               	movf	?_readADC,w
   540     0397  00C1               	movwf	_adcVal
   541                           
   542                           ;main.c: 61:         unsigned short int d1;;main.c: 62:         unsigned short int d2;;m
      +                          ain.c: 65:         d1 = adcVal / 204;
   543     0398  30CC               	movlw	204
   544     0399  0091               	movwf	___lwdiv@divisor
   545     039A  3000               	movlw	0
   546     039B  0092               	movwf	___lwdiv@divisor+1
   547     039C  0842               	movf	_adcVal+1,w
   548     039D  0094               	movwf	___lwdiv@dividend+1
   549     039E  0841               	movf	_adcVal,w
   550     039F  0093               	movwf	___lwdiv@dividend
   551     03A0  2268               	fcall	___lwdiv
   552     03A1  0812               	movf	?___lwdiv+1,w
   553     03A2  00B6               	movwf	main@d1+1
   554     03A3  0811               	movf	?___lwdiv,w
   555     03A4  00B5               	movwf	main@d1
   556                           
   557                           ;main.c: 66:         d2= ((adcVal % 204)/51) *25;
   558     03A5  3033               	movlw	51
   559     03A6  0091               	movwf	___lwdiv@divisor
   560     03A7  3000               	movlw	0
   561     03A8  0092               	movwf	___lwdiv@divisor+1
   562     03A9  0842               	movf	_adcVal+1,w
   563     03AA  008F               	movwf	___lwmod@dividend+1
   564     03AB  0841               	movf	_adcVal,w
   565     03AC  008E               	movwf	___lwmod@dividend
   566     03AD  30CC               	movlw	204
   567     03AE  008C               	movwf	___lwmod@divisor
   568     03AF  3000               	movlw	0
   569     03B0  008D               	movwf	___lwmod@divisor+1
   570     03B1  2204               	fcall	___lwmod
   571     03B2  080D               	movf	?___lwmod+1,w
   572     03B3  0094               	movwf	___lwdiv@dividend+1
   573     03B4  080C               	movf	?___lwmod,w
   574     03B5  0093               	movwf	___lwdiv@dividend
   575     03B6  2268               	fcall	___lwdiv
   576     03B7  0812               	movf	?___lwdiv+1,w
   577     03B8  0099               	movwf	___wmul@multiplier+1
   578     03B9  0811               	movf	?___lwdiv,w
   579     03BA  0098               	movwf	___wmul@multiplier
   580     03BB  3019               	movlw	25
   581     03BC  009A               	movwf	___wmul@multiplicand
   582     03BD  3000               	movlw	0
   583     03BE  009B               	movwf	___wmul@multiplicand+1
   584     03BF  218F               	fcall	___wmul
   585     03C0  0819               	movf	?___wmul+1,w
   586     03C1  00B8               	movwf	main@d2+1
   587     03C2  0818               	movf	?___wmul,w
   588     03C3  00B7               	movwf	main@d2
   589                           
   590                           ;main.c: 71:         Lcd_Clear();
   591     03C4  2127               	fcall	_Lcd_Clear
   592                           
   593                           ;main.c: 72:         Lcd_Set_Cursor(1, 1);
   594     03C5  1283               	bcf	3,5	;RP0=0, select bank0
   595     03C6  0190               	clrf	Lcd_Set_Cursor@b
   596     03C7  0A90               	incf	Lcd_Set_Cursor@b,f
   597     03C8  3001               	movlw	1
   598     03C9  2236               	fcall	_Lcd_Set_Cursor
   599                           
   600                           ;main.c: 73:         Lcd_Write_Int(d1);
   601     03CA  0836               	movf	main@d1+1,w
   602     03CB  00A1               	movwf	Lcd_Write_Int@a+1
   603     03CC  0835               	movf	main@d1,w
   604     03CD  00A0               	movwf	Lcd_Write_Int@a
   605     03CE  211A               	fcall	_Lcd_Write_Int
   606                           
   607                           ;main.c: 74:         Lcd_Set_Cursor(1, 2);
   608     03CF  3002               	movlw	2
   609     03D0  0090               	movwf	Lcd_Set_Cursor@b
   610     03D1  3001               	movlw	1
   611     03D2  2236               	fcall	_Lcd_Set_Cursor
   612                           
   613                           ;main.c: 75:         Lcd_Write_Char('.');
   614     03D3  302E               	movlw	46
   615     03D4  21B0               	fcall	_Lcd_Write_Char
   616                           
   617                           ;main.c: 76:         Lcd_Set_Cursor(1, 3);
   618     03D5  3003               	movlw	3
   619     03D6  0090               	movwf	Lcd_Set_Cursor@b
   620     03D7  3001               	movlw	1
   621     03D8  2236               	fcall	_Lcd_Set_Cursor
   622                           
   623                           ;main.c: 77:         Lcd_Write_Int(d2);
   624     03D9  0838               	movf	main@d2+1,w
   625     03DA  00A1               	movwf	Lcd_Write_Int@a+1
   626     03DB  0837               	movf	main@d2,w
   627     03DC  00A0               	movwf	Lcd_Write_Int@a
   628     03DD  211A               	fcall	_Lcd_Write_Int
   629                           
   630                           ;main.c: 81:         _delay((unsigned long)((200)*(4000000/4000.0)));
   631     03DE  3002               	movlw	2
   632     03DF  00B4               	movwf	??_main+2
   633     03E0  3004               	movlw	4
   634     03E1  00B3               	movwf	??_main+1
   635     03E2  30BA               	movlw	186
   636     03E3  00B2               	movwf	??_main
   637     03E4                     u717:
   638     03E4  0BB2               	decfsz	??_main,f
   639     03E5  2BE4               	goto	u717
   640     03E6  0BB3               	decfsz	??_main+1,f
   641     03E7  2BE4               	goto	u717
   642     03E8  0BB4               	decfsz	??_main+2,f
   643     03E9  2BE4               	goto	u717
   644     03EA  0000               	nop
   645     03EB  2B93               	goto	l1286
   646     03EC                     __end_of_main:
   647                           
   648                           	psect	text1
   649     02A4                     __ptext1:	
   650 ;; *************** function _welcomeMessage *****************
   651 ;; Defined at:
   652 ;;		line 24 in file "main.c"
   653 ;; Parameters:    Size  Location     Type
   654 ;;		None
   655 ;; Auto vars:     Size  Location     Type
   656 ;;  msg             8   14[BANK0 ] unsigned char [8]
   657 ;; Return value:  Size  Location     Type
   658 ;;                  1    wreg      void 
   659 ;; Registers used:
   660 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   661 ;; Tracked objects:
   662 ;;		On entry : 100/0
   663 ;;		On exit  : 0/0
   664 ;;		Unchanged: 0/0
   665 ;; Data sizes:     COMMON   BANK0
   666 ;;      Params:         0       0
   667 ;;      Locals:         0       8
   668 ;;      Temps:          0       4
   669 ;;      Totals:         0      12
   670 ;;Total ram usage:       12 bytes
   671 ;; Hardware stack levels used: 1
   672 ;; Hardware stack levels required when called: 3
   673 ;; This function calls:
   674 ;;		_Lcd_Clear
   675 ;;		_Lcd_Set_Cursor
   676 ;;		_Lcd_Write_String
   677 ;;		_strcpy
   678 ;; This function is called by:
   679 ;;		_main
   680 ;; This function uses a non-reentrant model
   681 ;;
   682                           
   683     02A4                     _welcomeMessage:	
   684                           ;psect for function _welcomeMessage
   685                           
   686                           
   687                           ;main.c: 26:     char msg[] = "Welcome";
   688                           
   689                           ;incstack = 0
   690                           ; Regs used in _welcomeMessage: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   691     02A4  301A               	movlw	welcomeMessage@msg& (0+255)
   692     02A5  0084               	movwf	4
   693     02A6  3039               	movlw	low welcomeMessage@F325
   694     02A7  0096               	movwf	??_welcomeMessage
   695     02A8  0804               	movf	4,w
   696     02A9  0097               	movwf	??_welcomeMessage+1
   697     02AA  3008               	movlw	8
   698     02AB  0098               	movwf	??_welcomeMessage+2
   699     02AC                     u630:
   700     02AC  0816               	movf	??_welcomeMessage,w
   701     02AD  0084               	movwf	4
   702     02AE  1383               	bcf	3,7	;select IRP bank0
   703     02AF  0800               	movf	0,w
   704     02B0  0099               	movwf	??_welcomeMessage+3
   705     02B1  0A96               	incf	??_welcomeMessage,f
   706     02B2  0817               	movf	??_welcomeMessage+1,w
   707     02B3  0084               	movwf	4
   708     02B4  0819               	movf	??_welcomeMessage+3,w
   709     02B5  0080               	movwf	0
   710     02B6  0A97               	incf	??_welcomeMessage+1,f
   711     02B7  0B98               	decfsz	??_welcomeMessage+2,f
   712     02B8  2AAC               	goto	u630
   713                           
   714                           ;main.c: 27:     Lcd_Clear();
   715     02B9  2127               	fcall	_Lcd_Clear
   716                           
   717                           ;main.c: 28:     Lcd_Set_Cursor(1, 1);
   718     02BA  1283               	bcf	3,5	;RP0=0, select bank0
   719     02BB  0190               	clrf	Lcd_Set_Cursor@b
   720     02BC  0A90               	incf	Lcd_Set_Cursor@b,f
   721     02BD  3001               	movlw	1
   722     02BE  2236               	fcall	_Lcd_Set_Cursor
   723                           
   724                           ;main.c: 29:     Lcd_Write_String(msg);
   725     02BF  301A               	movlw	(low (welcomeMessage@msg| 0))& (0+255)
   726     02C0  2175               	fcall	_Lcd_Write_String
   727                           
   728                           ;main.c: 30:     _delay((unsigned long)((3000)*(4000000/4000.0)));
   729     02C1  3010               	movlw	16
   730     02C2  0098               	movwf	??_welcomeMessage+2
   731     02C3  3039               	movlw	57
   732     02C4  0097               	movwf	??_welcomeMessage+1
   733     02C5  300D               	movlw	13
   734     02C6  0096               	movwf	??_welcomeMessage
   735     02C7                     u727:
   736     02C7  0B96               	decfsz	??_welcomeMessage,f
   737     02C8  2AC7               	goto	u727
   738     02C9  0B97               	decfsz	??_welcomeMessage+1,f
   739     02CA  2AC7               	goto	u727
   740     02CB  0B98               	decfsz	??_welcomeMessage+2,f
   741     02CC  2AC7               	goto	u727
   742     02CD  2ACE               	nop2
   743                           
   744                           ;main.c: 31:     Lcd_Clear();
   745     02CE  2127               	fcall	_Lcd_Clear
   746                           
   747                           ;main.c: 32:     Lcd_Set_Cursor(1, 1);
   748     02CF  1283               	bcf	3,5	;RP0=0, select bank0
   749     02D0  0190               	clrf	Lcd_Set_Cursor@b
   750     02D1  0A90               	incf	Lcd_Set_Cursor@b,f
   751     02D2  3001               	movlw	1
   752     02D3  2236               	fcall	_Lcd_Set_Cursor
   753                           
   754                           ;main.c: 33:     strcpy(msg, "0-5V");
   755     02D4  3001               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   756     02D5  008C               	movwf	strcpy@from
   757     02D6  301A               	movlw	(low (welcomeMessage@msg| 0))& (0+255)
   758     02D7  215D               	fcall	_strcpy
   759                           
   760                           ;main.c: 35:     Lcd_Write_String(msg);
   761     02D8  301A               	movlw	(low (welcomeMessage@msg| 0))& (0+255)
   762     02D9  2175               	fcall	_Lcd_Write_String
   763                           
   764                           ;main.c: 36:     _delay((unsigned long)((2000)*(4000000/4000.0)));
   765     02DA  300B               	movlw	11
   766     02DB  0098               	movwf	??_welcomeMessage+2
   767     02DC  3026               	movlw	38
   768     02DD  0097               	movwf	??_welcomeMessage+1
   769     02DE  305D               	movlw	93
   770     02DF  0096               	movwf	??_welcomeMessage
   771     02E0                     u737:
   772     02E0  0B96               	decfsz	??_welcomeMessage,f
   773     02E1  2AE0               	goto	u737
   774     02E2  0B97               	decfsz	??_welcomeMessage+1,f
   775     02E3  2AE0               	goto	u737
   776     02E4  0B98               	decfsz	??_welcomeMessage+2,f
   777     02E5  2AE0               	goto	u737
   778     02E6  2AE7               	nop2
   779                           
   780                           ;main.c: 39:     Lcd_Clear();
   781     02E7  2127               	fcall	_Lcd_Clear
   782     02E8  0008               	return
   783     02E9                     __end_of_welcomeMessage:
   784                           
   785                           	psect	text2
   786     015D                     __ptext2:	
   787 ;; *************** function _strcpy *****************
   788 ;; Defined at:
   789 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\strcpy.c"
   790 ;; Parameters:    Size  Location     Type
   791 ;;  to              1    wreg     PTR unsigned char 
   792 ;;		 -> welcomeMessage@msg(8), 
   793 ;;  from            1    0[BANK0 ] PTR const unsigned char 
   794 ;;		 -> STR_1(5), 
   795 ;; Auto vars:     Size  Location     Type
   796 ;;  to              1    1[BANK0 ] PTR unsigned char 
   797 ;;		 -> welcomeMessage@msg(8), 
   798 ;;  cp              1    2[BANK0 ] PTR unsigned char 
   799 ;;		 -> welcomeMessage@msg(8), 
   800 ;; Return value:  Size  Location     Type
   801 ;;                  1    wreg      PTR unsigned char 
   802 ;; Registers used:
   803 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath
   804 ;; Tracked objects:
   805 ;;		On entry : 100/0
   806 ;;		On exit  : 900/0
   807 ;;		Unchanged: 0/0
   808 ;; Data sizes:     COMMON   BANK0
   809 ;;      Params:         0       1
   810 ;;      Locals:         0       2
   811 ;;      Temps:          0       0
   812 ;;      Totals:         0       3
   813 ;;Total ram usage:        3 bytes
   814 ;; Hardware stack levels used: 2
   815 ;; This function calls:
   816 ;;		Nothing
   817 ;; This function is called by:
   818 ;;		_welcomeMessage
   819 ;; This function uses a non-reentrant model
   820 ;;
   821                           
   822     015D                     _strcpy:	
   823                           ;psect for function _strcpy
   824                           
   825                           
   826                           ;incstack = 0
   827                           ; Regs used in _strcpy: [wreg-fsr0h+status,2+status,0+btemp+1+pclath]
   828                           ;strcpy@to stored from wreg
   829     015D  008D               	movwf	strcpy@to
   830     015E  080D               	movf	strcpy@to,w
   831     015F  008E               	movwf	strcpy@cp
   832     0160                     l1144:
   833     0160  080C               	movf	strcpy@from,w
   834     0161  0084               	movwf	4
   835     0162  2001               	fcall	stringdir
   836     0163  00CF               	movwf	79
   837     0164  080E               	movf	strcpy@cp,w
   838     0165  0084               	movwf	4
   839     0166  084F               	movf	79,w
   840     0167  1383               	bcf	3,7	;select IRP bank0
   841     0168  0080               	movwf	0
   842     0169  0800               	movf	0,w
   843     016A  1903               	btfsc	3,2
   844     016B  0008               	return
   845     016C  3001               	movlw	1
   846     016D  00CF               	movwf	79
   847     016E  084F               	movf	79,w
   848     016F  078E               	addwf	strcpy@cp,f
   849     0170  3001               	movlw	1
   850     0171  00CF               	movwf	79
   851     0172  084F               	movf	79,w
   852     0173  078C               	addwf	strcpy@from,f
   853     0174  2960               	goto	l1144
   854     0175                     __end_of_strcpy:
   855                           
   856                           	psect	text3
   857     0236                     __ptext3:	
   858 ;; *************** function _Lcd_Set_Cursor *****************
   859 ;; Defined at:
   860 ;;		line 52 in file "lcd.c"
   861 ;; Parameters:    Size  Location     Type
   862 ;;  a               1    wreg     unsigned char 
   863 ;;  b               1    4[BANK0 ] unsigned char 
   864 ;; Auto vars:     Size  Location     Type
   865 ;;  a               1    6[BANK0 ] unsigned char 
   866 ;;  temp            1    9[BANK0 ] unsigned char 
   867 ;;  y               1    8[BANK0 ] unsigned char 
   868 ;;  z               1    7[BANK0 ] unsigned char 
   869 ;; Return value:  Size  Location     Type
   870 ;;                  1    wreg      void 
   871 ;; Registers used:
   872 ;;		wreg, status,2, status,0, pclath, cstack
   873 ;; Tracked objects:
   874 ;;		On entry : 100/0
   875 ;;		On exit  : 100/0
   876 ;;		Unchanged: 0/0
   877 ;; Data sizes:     COMMON   BANK0
   878 ;;      Params:         0       1
   879 ;;      Locals:         0       4
   880 ;;      Temps:          0       1
   881 ;;      Totals:         0       6
   882 ;;Total ram usage:        6 bytes
   883 ;; Hardware stack levels used: 1
   884 ;; Hardware stack levels required when called: 2
   885 ;; This function calls:
   886 ;;		_Lcd_Cmd
   887 ;; This function is called by:
   888 ;;		_welcomeMessage
   889 ;;		_main
   890 ;; This function uses a non-reentrant model
   891 ;;
   892                           
   893     0236                     _Lcd_Set_Cursor:	
   894                           ;psect for function _Lcd_Set_Cursor
   895                           
   896                           
   897                           ;incstack = 0
   898                           ; Regs used in _Lcd_Set_Cursor: [wreg+status,2+status,0+pclath+cstack]
   899                           ;Lcd_Set_Cursor@a stored from wreg
   900     0236  0092               	movwf	Lcd_Set_Cursor@a
   901                           
   902                           ;lcd.c: 52: void Lcd_Set_Cursor(char a, char b);lcd.c: 53: {;lcd.c: 54:  char temp,z,y;;
      +                          lcd.c: 55:  if(a == 1)
   903     0237  0312               	decf	Lcd_Set_Cursor@a,w
   904     0238  1D03               	btfss	3,2
   905     0239  2A4F               	goto	l1122
   906                           
   907                           ;lcd.c: 56:  {;lcd.c: 57:    temp = (char) (0x80 + b - 1);
   908     023A  0810               	movf	Lcd_Set_Cursor@b,w
   909     023B  3E7F               	addlw	127
   910     023C  0095               	movwf	Lcd_Set_Cursor@temp
   911                           
   912                           ;lcd.c: 58:   z = temp>>4;
   913     023D  0815               	movf	Lcd_Set_Cursor@temp,w
   914     023E  0091               	movwf	??_Lcd_Set_Cursor
   915     023F  3004               	movlw	4
   916     0240                     u555:
   917     0240  1003               	clrc
   918     0241  0C91               	rrf	??_Lcd_Set_Cursor,f
   919     0242  3EFF               	addlw	-1
   920     0243  1D03               	skipz
   921     0244  2A40               	goto	u555
   922     0245  0811               	movf	??_Lcd_Set_Cursor,w
   923     0246  0093               	movwf	Lcd_Set_Cursor@z
   924                           
   925                           ;lcd.c: 59:   y = temp & 0x0F;
   926     0247  0815               	movf	Lcd_Set_Cursor@temp,w
   927     0248  390F               	andlw	15
   928     0249  0094               	movwf	Lcd_Set_Cursor@y
   929                           
   930                           ;lcd.c: 60:   Lcd_Cmd(z);
   931     024A  0813               	movf	Lcd_Set_Cursor@z,w
   932     024B  2135               	fcall	_Lcd_Cmd
   933                           
   934                           ;lcd.c: 61:   Lcd_Cmd(y);
   935     024C  0814               	movf	Lcd_Set_Cursor@y,w
   936     024D  2135               	fcall	_Lcd_Cmd
   937                           
   938                           ;lcd.c: 62:  }
   939     024E  0008               	return
   940     024F                     l1122:
   941     024F  3002               	movlw	2
   942     0250  0612               	xorwf	Lcd_Set_Cursor@a,w
   943     0251  1D03               	btfss	3,2
   944     0252  0008               	return
   945                           
   946                           ;lcd.c: 64:  {;lcd.c: 65:   temp = 0xC0 + b - 1;
   947     0253  0810               	movf	Lcd_Set_Cursor@b,w
   948     0254  3EBF               	addlw	191
   949     0255  0095               	movwf	Lcd_Set_Cursor@temp
   950                           
   951                           ;lcd.c: 66:   z = temp>>4;
   952     0256  0815               	movf	Lcd_Set_Cursor@temp,w
   953     0257  0091               	movwf	??_Lcd_Set_Cursor
   954     0258  3004               	movlw	4
   955     0259                     u575:
   956     0259  1003               	clrc
   957     025A  0C91               	rrf	??_Lcd_Set_Cursor,f
   958     025B  3EFF               	addlw	-1
   959     025C  1D03               	skipz
   960     025D  2A59               	goto	u575
   961     025E  0811               	movf	??_Lcd_Set_Cursor,w
   962     025F  0093               	movwf	Lcd_Set_Cursor@z
   963                           
   964                           ;lcd.c: 67:   y = temp & 0x0F;
   965     0260  0815               	movf	Lcd_Set_Cursor@temp,w
   966     0261  390F               	andlw	15
   967     0262  0094               	movwf	Lcd_Set_Cursor@y
   968                           
   969                           ;lcd.c: 68:   Lcd_Cmd(z);
   970     0263  0813               	movf	Lcd_Set_Cursor@z,w
   971     0264  2135               	fcall	_Lcd_Cmd
   972                           
   973                           ;lcd.c: 69:   Lcd_Cmd(y);
   974     0265  0814               	movf	Lcd_Set_Cursor@y,w
   975     0266  2135               	fcall	_Lcd_Cmd
   976     0267  0008               	return
   977     0268                     __end_of_Lcd_Set_Cursor:
   978                           
   979                           	psect	text4
   980     0127                     __ptext4:	
   981 ;; *************** function _Lcd_Clear *****************
   982 ;; Defined at:
   983 ;;		line 44 in file "lcd.c"
   984 ;; Parameters:    Size  Location     Type
   985 ;;		None
   986 ;; Auto vars:     Size  Location     Type
   987 ;;		None
   988 ;; Return value:  Size  Location     Type
   989 ;;                  1    wreg      void 
   990 ;; Registers used:
   991 ;;		wreg, status,2, status,0, pclath, cstack
   992 ;; Tracked objects:
   993 ;;		On entry : 0/0
   994 ;;		On exit  : 0/0
   995 ;;		Unchanged: 0/0
   996 ;; Data sizes:     COMMON   BANK0
   997 ;;      Params:         0       0
   998 ;;      Locals:         0       0
   999 ;;      Temps:          0       2
  1000 ;;      Totals:         0       2
  1001 ;;Total ram usage:        2 bytes
  1002 ;; Hardware stack levels used: 1
  1003 ;; Hardware stack levels required when called: 2
  1004 ;; This function calls:
  1005 ;;		_Lcd_Cmd
  1006 ;; This function is called by:
  1007 ;;		_welcomeMessage
  1008 ;;		_main
  1009 ;; This function uses a non-reentrant model
  1010 ;;
  1011                           
  1012     0127                     _Lcd_Clear:	
  1013                           ;psect for function _Lcd_Clear
  1014                           
  1015                           
  1016                           ;lcd.c: 46:  Lcd_Cmd(0x00);
  1017                           
  1018                           ;incstack = 0
  1019                           ; Regs used in _Lcd_Clear: [wreg+status,2+status,0+pclath+cstack]
  1020     0127  3000               	movlw	0
  1021     0128  2135               	fcall	_Lcd_Cmd
  1022                           
  1023                           ;lcd.c: 47:  Lcd_Cmd(0x01);
  1024     0129  3001               	movlw	1
  1025     012A  2135               	fcall	_Lcd_Cmd
  1026                           
  1027                           ;lcd.c: 48:     _delay((unsigned long)((2)*(4000000/4000.0)));
  1028     012B  3003               	movlw	3
  1029     012C  0091               	movwf	??_Lcd_Clear+1
  1030     012D  3097               	movlw	151
  1031     012E  0090               	movwf	??_Lcd_Clear
  1032     012F                     u747:
  1033     012F  0B90               	decfsz	??_Lcd_Clear,f
  1034     0130  292F               	goto	u747
  1035     0131  0B91               	decfsz	??_Lcd_Clear+1,f
  1036     0132  292F               	goto	u747
  1037     0133  2934               	nop2
  1038     0134  0008               	return
  1039     0135                     __end_of_Lcd_Clear:
  1040                           
  1041                           	psect	text5
  1042     02E9                     __ptext5:	
  1043 ;; *************** function _readADC *****************
  1044 ;; Defined at:
  1045 ;;		line 6 in file "adc.c"
  1046 ;; Parameters:    Size  Location     Type
  1047 ;;		None
  1048 ;; Auto vars:     Size  Location     Type
  1049 ;;  volt            2    4[BANK0 ] unsigned int 
  1050 ;;  rxData          1    7[BANK0 ] unsigned char 
  1051 ;;  bits            1    6[BANK0 ] unsigned char 
  1052 ;; Return value:  Size  Location     Type
  1053 ;;                  2    0[BANK0 ] unsigned int 
  1054 ;; Registers used:
  1055 ;;		wreg, status,2, status,0, btemp+1
  1056 ;; Tracked objects:
  1057 ;;		On entry : 0/0
  1058 ;;		On exit  : 100/0
  1059 ;;		Unchanged: 0/0
  1060 ;; Data sizes:     COMMON   BANK0
  1061 ;;      Params:         0       2
  1062 ;;      Locals:         0       4
  1063 ;;      Temps:          0       2
  1064 ;;      Totals:         0       8
  1065 ;;Total ram usage:        8 bytes
  1066 ;; Hardware stack levels used: 1
  1067 ;; This function calls:
  1068 ;;		Nothing
  1069 ;; This function is called by:
  1070 ;;		_main
  1071 ;; This function uses a non-reentrant model
  1072 ;;
  1073                           
  1074     02E9                     _readADC:	
  1075                           ;psect for function _readADC
  1076                           
  1077                           
  1078                           ;adc.c: 8:   unsigned char bits;;adc.c: 9:   unsigned char rxData = 0;
  1079                           
  1080                           ;incstack = 0
  1081                           ; Regs used in _readADC: [wreg+status,2+status,0+btemp+1]
  1082     02E9  1283               	bcf	3,5	;RP0=0, select bank0
  1083     02EA  0193               	clrf	readADC@rxData
  1084                           
  1085                           ;adc.c: 12:   RB7 = 0;
  1086     02EB  1386               	bcf	6,7	;volatile
  1087                           
  1088                           ;adc.c: 15:   for (bits = 0; bits < 3; bits++)
  1089     02EC  0192               	clrf	readADC@bits
  1090     02ED                     l1212:
  1091                           
  1092                           ;adc.c: 16:   {;adc.c: 17:       _delay((unsigned long)((100)*(4000000/4000000.0)));
  1093     02ED  3021               	movlw	33
  1094     02EE  008E               	movwf	??_readADC
  1095     02EF                     u757:
  1096     02EF  0B8E               	decfsz	??_readADC,f
  1097     02F0  2AEF               	goto	u757
  1098                           
  1099                           ;adc.c: 18:       RB5 = 1;
  1100     02F1  1283               	bcf	3,5	;RP0=0, select bank0
  1101     02F2  1686               	bsf	6,5	;volatile
  1102                           
  1103                           ;adc.c: 19:       _delay((unsigned long)((100)*(4000000/4000000.0)));
  1104     02F3  3021               	movlw	33
  1105     02F4  008E               	movwf	??_readADC
  1106     02F5                     u767:
  1107     02F5  0B8E               	decfsz	??_readADC,f
  1108     02F6  2AF5               	goto	u767
  1109                           
  1110                           ;adc.c: 20:       RB5 = 0;
  1111     02F7  1283               	bcf	3,5	;RP0=0, select bank0
  1112     02F8  1286               	bcf	6,5	;volatile
  1113                           
  1114                           ;adc.c: 21:   }
  1115     02F9  3001               	movlw	1
  1116     02FA  00CF               	movwf	79
  1117     02FB  084F               	movf	79,w
  1118     02FC  0792               	addwf	readADC@bits,f
  1119     02FD  3003               	movlw	3
  1120     02FE  0212               	subwf	readADC@bits,w
  1121     02FF  1C03               	skipc
  1122     0300  2AED               	goto	l1212
  1123                           
  1124                           ;adc.c: 24:   for (bits = 0; bits < 8; bits++)
  1125     0301  0192               	clrf	readADC@bits
  1126     0302                     l1228:
  1127                           
  1128                           ;adc.c: 25:   {;adc.c: 27:     _delay((unsigned long)((100)*(4000000/4000000.0)));
  1129     0302  3021               	movlw	33
  1130     0303  008E               	movwf	??_readADC
  1131     0304                     u777:
  1132     0304  0B8E               	decfsz	??_readADC,f
  1133     0305  2B04               	goto	u777
  1134                           
  1135                           ;adc.c: 28:     RB5 = 1;
  1136     0306  1283               	bcf	3,5	;RP0=0, select bank0
  1137     0307  1686               	bsf	6,5	;volatile
  1138                           
  1139                           ;adc.c: 31:     rxData = rxData << 1;
  1140     0308  0813               	movf	readADC@rxData,w
  1141     0309  008E               	movwf	??_readADC
  1142     030A  070E               	addwf	??_readADC,w
  1143     030B  0093               	movwf	readADC@rxData
  1144                           
  1145                           ;adc.c: 34:     if(RB6 == 1)
  1146     030C  1F06               	btfss	6,6	;volatile
  1147     030D  2B11               	goto	l1238
  1148                           
  1149                           ;adc.c: 35:       rxData = rxData | 0x01;
  1150     030E  0813               	movf	readADC@rxData,w
  1151     030F  3801               	iorlw	1
  1152     0310  2B13               	goto	L1
  1153     0311                     l1238:
  1154                           
  1155                           ;adc.c: 37:       rxData = rxData & 0xfe;
  1156     0311  0813               	movf	readADC@rxData,w
  1157     0312  39FE               	andlw	254
  1158     0313                     L1:
  1159     0313  0093               	movwf	readADC@rxData
  1160                           
  1161                           ;adc.c: 39:     _delay((unsigned long)((100)*(4000000/4000000.0)));
  1162     0314  3021               	movlw	33
  1163     0315  008E               	movwf	??_readADC
  1164     0316                     u787:
  1165     0316  0B8E               	decfsz	??_readADC,f
  1166     0317  2B16               	goto	u787
  1167                           
  1168                           ;adc.c: 40:     RB5 = 0;
  1169     0318  1283               	bcf	3,5	;RP0=0, select bank0
  1170     0319  1286               	bcf	6,5	;volatile
  1171                           
  1172                           ;adc.c: 41:     }
  1173     031A  3001               	movlw	1
  1174     031B  00CF               	movwf	79
  1175     031C  084F               	movf	79,w
  1176     031D  0792               	addwf	readADC@bits,f
  1177     031E  3008               	movlw	8
  1178     031F  0212               	subwf	readADC@bits,w
  1179     0320  1C03               	skipc
  1180     0321  2B02               	goto	l1228
  1181                           
  1182                           ;adc.c: 44:   RB7 = 1;
  1183     0322  1786               	bsf	6,7	;volatile
  1184                           
  1185                           ;adc.c: 47:   volt = (rxData << 2);
  1186     0323  0813               	movf	readADC@rxData,w
  1187     0324  008E               	movwf	??_readADC
  1188     0325  018F               	clrf	??_readADC+1
  1189     0326  1003               	clrc
  1190     0327  0D8E               	rlf	??_readADC,f
  1191     0328  0D8F               	rlf	??_readADC+1,f
  1192     0329  1003               	clrc
  1193     032A  0D8E               	rlf	??_readADC,f
  1194     032B  0D8F               	rlf	??_readADC+1,f
  1195     032C  080E               	movf	??_readADC,w
  1196     032D  0090               	movwf	readADC@volt
  1197     032E  080F               	movf	??_readADC+1,w
  1198     032F  0091               	movwf	readADC@volt+1
  1199                           
  1200                           ;adc.c: 48:   return volt;
  1201     0330  0811               	movf	readADC@volt+1,w
  1202     0331  008D               	movwf	?_readADC+1
  1203     0332  0810               	movf	readADC@volt,w
  1204     0333  008C               	movwf	?_readADC
  1205     0334  0008               	return
  1206     0335                     __end_of_readADC:
  1207                           
  1208                           	psect	text6
  1209     018F                     __ptext6:	
  1210 ;; *************** function ___wmul *****************
  1211 ;; Defined at:
  1212 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\Umul16.c"
  1213 ;; Parameters:    Size  Location     Type
  1214 ;;  multiplier      2   12[BANK0 ] unsigned int 
  1215 ;;  multiplicand    2   14[BANK0 ] unsigned int 
  1216 ;; Auto vars:     Size  Location     Type
  1217 ;;  product         2   16[BANK0 ] unsigned int 
  1218 ;; Return value:  Size  Location     Type
  1219 ;;                  2   12[BANK0 ] unsigned int 
  1220 ;; Registers used:
  1221 ;;		wreg, status,2, status,0
  1222 ;; Tracked objects:
  1223 ;;		On entry : 100/0
  1224 ;;		On exit  : 100/0
  1225 ;;		Unchanged: 0/0
  1226 ;; Data sizes:     COMMON   BANK0
  1227 ;;      Params:         0       4
  1228 ;;      Locals:         0       2
  1229 ;;      Temps:          0       0
  1230 ;;      Totals:         0       6
  1231 ;;Total ram usage:        6 bytes
  1232 ;; Hardware stack levels used: 1
  1233 ;; This function calls:
  1234 ;;		Nothing
  1235 ;; This function is called by:
  1236 ;;		_main
  1237 ;; This function uses a non-reentrant model
  1238 ;;
  1239                           
  1240     018F                     ___wmul:	
  1241                           ;psect for function ___wmul
  1242                           
  1243                           
  1244                           ;incstack = 0
  1245                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  1246     018F  019C               	clrf	___wmul@product
  1247     0190  019D               	clrf	___wmul@product+1
  1248     0191                     l1260:
  1249     0191  1C18               	btfss	___wmul@multiplier,0
  1250     0192  2999               	goto	l206
  1251     0193  081A               	movf	___wmul@multiplicand,w
  1252     0194  079C               	addwf	___wmul@product,f
  1253     0195  1803               	skipnc
  1254     0196  0A9D               	incf	___wmul@product+1,f
  1255     0197  081B               	movf	___wmul@multiplicand+1,w
  1256     0198  079D               	addwf	___wmul@product+1,f
  1257     0199                     l206:
  1258     0199  3001               	movlw	1
  1259     019A                     u685:
  1260     019A  1003               	clrc
  1261     019B  0D9A               	rlf	___wmul@multiplicand,f
  1262     019C  0D9B               	rlf	___wmul@multiplicand+1,f
  1263     019D  3EFF               	addlw	-1
  1264     019E  1D03               	skipz
  1265     019F  299A               	goto	u685
  1266     01A0  3001               	movlw	1
  1267     01A1                     u695:
  1268     01A1  1003               	clrc
  1269     01A2  0C99               	rrf	___wmul@multiplier+1,f
  1270     01A3  0C98               	rrf	___wmul@multiplier,f
  1271     01A4  3EFF               	addlw	-1
  1272     01A5  1D03               	skipz
  1273     01A6  29A1               	goto	u695
  1274     01A7  0818               	movf	___wmul@multiplier,w
  1275     01A8  0419               	iorwf	___wmul@multiplier+1,w
  1276     01A9  1D03               	btfss	3,2
  1277     01AA  2991               	goto	l1260
  1278     01AB  081D               	movf	___wmul@product+1,w
  1279     01AC  0099               	movwf	?___wmul+1
  1280     01AD  081C               	movf	___wmul@product,w
  1281     01AE  0098               	movwf	?___wmul
  1282     01AF  0008               	return
  1283     01B0                     __end_of___wmul:
  1284                           
  1285                           	psect	text7
  1286     011A                     __ptext7:	
  1287 ;; *************** function _Lcd_Write_Int *****************
  1288 ;; Defined at:
  1289 ;;		line 121 in file "lcd.c"
  1290 ;; Parameters:    Size  Location     Type
  1291 ;;  a               2   20[BANK0 ] unsigned int 
  1292 ;; Auto vars:     Size  Location     Type
  1293 ;;  temp           16   22[BANK0 ] unsigned char [16]
  1294 ;; Return value:  Size  Location     Type
  1295 ;;                  1    wreg      void 
  1296 ;; Registers used:
  1297 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1298 ;; Tracked objects:
  1299 ;;		On entry : 100/0
  1300 ;;		On exit  : 900/0
  1301 ;;		Unchanged: 0/0
  1302 ;; Data sizes:     COMMON   BANK0
  1303 ;;      Params:         0       2
  1304 ;;      Locals:         0      16
  1305 ;;      Temps:          0       0
  1306 ;;      Totals:         0      18
  1307 ;;Total ram usage:       18 bytes
  1308 ;; Hardware stack levels used: 1
  1309 ;; Hardware stack levels required when called: 3
  1310 ;; This function calls:
  1311 ;;		_Lcd_Write_String
  1312 ;;		_utoa
  1313 ;; This function is called by:
  1314 ;;		_main
  1315 ;; This function uses a non-reentrant model
  1316 ;;
  1317                           
  1318     011A                     _Lcd_Write_Int:	
  1319                           ;psect for function _Lcd_Write_Int
  1320                           
  1321                           
  1322                           ;lcd.c: 121: void Lcd_Write_Int(unsigned int a);lcd.c: 122: {;lcd.c: 123:     char temp[
      +                          16];;lcd.c: 124:     utoa((char*)temp, a, 10);
  1323                           
  1324                           ;incstack = 0
  1325                           ; Regs used in _Lcd_Write_Int: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1326     011A  0821               	movf	Lcd_Write_Int@a+1,w
  1327     011B  0099               	movwf	utoa@val+1
  1328     011C  0820               	movf	Lcd_Write_Int@a,w
  1329     011D  0098               	movwf	utoa@val
  1330     011E  300A               	movlw	10
  1331     011F  009A               	movwf	utoa@base
  1332     0120  3000               	movlw	0
  1333     0121  009B               	movwf	utoa@base+1
  1334     0122  3022               	movlw	(low (Lcd_Write_Int@temp| 0))& (0+255)
  1335     0123  2335               	fcall	_utoa
  1336                           
  1337                           ;lcd.c: 125:     Lcd_Write_String(temp);
  1338     0124  3022               	movlw	(low (Lcd_Write_Int@temp| 0))& (0+255)
  1339     0125  2175               	fcall	_Lcd_Write_String
  1340     0126  0008               	return
  1341     0127                     __end_of_Lcd_Write_Int:
  1342                           
  1343                           	psect	text8
  1344     0335                     __ptext8:	
  1345 ;; *************** function _utoa *****************
  1346 ;; Defined at:
  1347 ;;		line 17 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\itoa.c"
  1348 ;; Parameters:    Size  Location     Type
  1349 ;;  buf             1    wreg     PTR unsigned char 
  1350 ;;		 -> Lcd_Write_Int@temp(16), 
  1351 ;;  val             2   12[BANK0 ] unsigned int 
  1352 ;;  base            2   14[BANK0 ] int 
  1353 ;; Auto vars:     Size  Location     Type
  1354 ;;  buf             1   19[BANK0 ] PTR unsigned char 
  1355 ;;		 -> Lcd_Write_Int@temp(16), 
  1356 ;;  v               2   16[BANK0 ] unsigned int 
  1357 ;;  c               1   18[BANK0 ] unsigned char 
  1358 ;; Return value:  Size  Location     Type
  1359 ;;                  1    wreg      PTR unsigned char 
  1360 ;; Registers used:
  1361 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1362 ;; Tracked objects:
  1363 ;;		On entry : 100/0
  1364 ;;		On exit  : 900/0
  1365 ;;		Unchanged: 0/0
  1366 ;; Data sizes:     COMMON   BANK0
  1367 ;;      Params:         0       4
  1368 ;;      Locals:         0       4
  1369 ;;      Temps:          0       0
  1370 ;;      Totals:         0       8
  1371 ;;Total ram usage:        8 bytes
  1372 ;; Hardware stack levels used: 1
  1373 ;; Hardware stack levels required when called: 1
  1374 ;; This function calls:
  1375 ;;		___lwdiv
  1376 ;;		___lwmod
  1377 ;; This function is called by:
  1378 ;;		_Lcd_Write_Int
  1379 ;; This function uses a non-reentrant model
  1380 ;;
  1381                           
  1382     0335                     _utoa:	
  1383                           ;psect for function _utoa
  1384                           
  1385                           
  1386                           ;incstack = 0
  1387                           ; Regs used in _utoa: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1388                           ;utoa@buf stored from wreg
  1389     0335  009F               	movwf	utoa@buf
  1390     0336  0819               	movf	utoa@val+1,w
  1391     0337  009D               	movwf	utoa@v+1
  1392     0338  0818               	movf	utoa@val,w
  1393     0339  009C               	movwf	utoa@v
  1394     033A                     l1148:
  1395     033A  081B               	movf	utoa@base+1,w
  1396     033B  0092               	movwf	___lwdiv@divisor+1
  1397     033C  081A               	movf	utoa@base,w
  1398     033D  0091               	movwf	___lwdiv@divisor
  1399     033E  081D               	movf	utoa@v+1,w
  1400     033F  0094               	movwf	___lwdiv@dividend+1
  1401     0340  081C               	movf	utoa@v,w
  1402     0341  0093               	movwf	___lwdiv@dividend
  1403     0342  2268               	fcall	___lwdiv
  1404     0343  0812               	movf	?___lwdiv+1,w
  1405     0344  009D               	movwf	utoa@v+1
  1406     0345  0811               	movf	?___lwdiv,w
  1407     0346  009C               	movwf	utoa@v
  1408     0347  3001               	movlw	1
  1409     0348  00CF               	movwf	79
  1410     0349  084F               	movf	79,w
  1411     034A  079F               	addwf	utoa@buf,f
  1412     034B  081C               	movf	utoa@v,w
  1413     034C  041D               	iorwf	utoa@v+1,w
  1414     034D  1D03               	btfss	3,2
  1415     034E  2B3A               	goto	l1148
  1416     034F  081F               	movf	utoa@buf,w
  1417     0350  0084               	movwf	4
  1418     0351  1383               	bcf	3,7	;select IRP bank0
  1419     0352  0180               	clrf	0
  1420     0353  3001               	movlw	1
  1421     0354  029F               	subwf	utoa@buf,f
  1422     0355                     l1158:
  1423     0355  081B               	movf	utoa@base+1,w
  1424     0356  008D               	movwf	___lwmod@divisor+1
  1425     0357  081A               	movf	utoa@base,w
  1426     0358  008C               	movwf	___lwmod@divisor
  1427     0359  0819               	movf	utoa@val+1,w
  1428     035A  008F               	movwf	___lwmod@dividend+1
  1429     035B  0818               	movf	utoa@val,w
  1430     035C  008E               	movwf	___lwmod@dividend
  1431     035D  2204               	fcall	___lwmod
  1432     035E  080C               	movf	?___lwmod,w
  1433     035F  009E               	movwf	utoa@c
  1434     0360  081B               	movf	utoa@base+1,w
  1435     0361  0092               	movwf	___lwdiv@divisor+1
  1436     0362  081A               	movf	utoa@base,w
  1437     0363  0091               	movwf	___lwdiv@divisor
  1438     0364  0819               	movf	utoa@val+1,w
  1439     0365  0094               	movwf	___lwdiv@dividend+1
  1440     0366  0818               	movf	utoa@val,w
  1441     0367  0093               	movwf	___lwdiv@dividend
  1442     0368  2268               	fcall	___lwdiv
  1443     0369  0812               	movf	?___lwdiv+1,w
  1444     036A  0099               	movwf	utoa@val+1
  1445     036B  0811               	movf	?___lwdiv,w
  1446     036C  0098               	movwf	utoa@val
  1447     036D  300A               	movlw	10
  1448     036E  021E               	subwf	utoa@c,w
  1449     036F  1C03               	skipc
  1450     0370  2B75               	goto	l666
  1451     0371  3007               	movlw	7
  1452     0372  00CF               	movwf	79
  1453     0373  084F               	movf	79,w
  1454     0374  079E               	addwf	utoa@c,f
  1455     0375                     l666:
  1456     0375  3030               	movlw	48
  1457     0376  00CF               	movwf	79
  1458     0377  084F               	movf	79,w
  1459     0378  079E               	addwf	utoa@c,f
  1460     0379  081F               	movf	utoa@buf,w
  1461     037A  0084               	movwf	4
  1462     037B  081E               	movf	utoa@c,w
  1463     037C  1383               	bcf	3,7	;select IRP bank0
  1464     037D  0080               	movwf	0
  1465     037E  3001               	movlw	1
  1466     037F  029F               	subwf	utoa@buf,f
  1467     0380  0818               	movf	utoa@val,w
  1468     0381  0419               	iorwf	utoa@val+1,w
  1469     0382  1D03               	btfss	3,2
  1470     0383  2B55               	goto	l1158
  1471                           
  1472                           ;	Return value of _utoa is never used
  1473     0384  3001               	movlw	1
  1474     0385  00CF               	movwf	79
  1475     0386  084F               	movf	79,w
  1476     0387  079F               	addwf	utoa@buf,f
  1477     0388  0008               	return
  1478     0389                     __end_of_utoa:
  1479                           
  1480                           	psect	text9
  1481     0204                     __ptext9:	
  1482 ;; *************** function ___lwmod *****************
  1483 ;; Defined at:
  1484 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\lwmod.c"
  1485 ;; Parameters:    Size  Location     Type
  1486 ;;  divisor         2    0[BANK0 ] unsigned int 
  1487 ;;  dividend        2    2[BANK0 ] unsigned int 
  1488 ;; Auto vars:     Size  Location     Type
  1489 ;;  counter         1    4[BANK0 ] unsigned char 
  1490 ;; Return value:  Size  Location     Type
  1491 ;;                  2    0[BANK0 ] unsigned int 
  1492 ;; Registers used:
  1493 ;;		wreg, status,2, status,0, btemp+1
  1494 ;; Tracked objects:
  1495 ;;		On entry : 100/0
  1496 ;;		On exit  : 100/0
  1497 ;;		Unchanged: 0/0
  1498 ;; Data sizes:     COMMON   BANK0
  1499 ;;      Params:         0       4
  1500 ;;      Locals:         0       1
  1501 ;;      Temps:          0       0
  1502 ;;      Totals:         0       5
  1503 ;;Total ram usage:        5 bytes
  1504 ;; Hardware stack levels used: 1
  1505 ;; This function calls:
  1506 ;;		Nothing
  1507 ;; This function is called by:
  1508 ;;		_main
  1509 ;;		_utoa
  1510 ;; This function uses a non-reentrant model
  1511 ;;
  1512                           
  1513     0204                     ___lwmod:	
  1514                           ;psect for function ___lwmod
  1515                           
  1516                           
  1517                           ;incstack = 0
  1518                           ; Regs used in ___lwmod: [wreg+status,2+status,0+btemp+1]
  1519     0204  080C               	movf	___lwmod@divisor,w
  1520     0205  040D               	iorwf	___lwmod@divisor+1,w
  1521     0206  1903               	btfsc	3,2
  1522     0207  2A31               	goto	l1104
  1523     0208  0190               	clrf	___lwmod@counter
  1524     0209  0A90               	incf	___lwmod@counter,f
  1525     020A                     l1094:
  1526     020A  1B8D               	btfsc	___lwmod@divisor+1,7
  1527     020B  2A18               	goto	l1096
  1528     020C  3001               	movlw	1
  1529     020D                     u495:
  1530     020D  1003               	clrc
  1531     020E  0D8C               	rlf	___lwmod@divisor,f
  1532     020F  0D8D               	rlf	___lwmod@divisor+1,f
  1533     0210  3EFF               	addlw	-1
  1534     0211  1D03               	skipz
  1535     0212  2A0D               	goto	u495
  1536     0213  3001               	movlw	1
  1537     0214  00CF               	movwf	79
  1538     0215  084F               	movf	79,w
  1539     0216  0790               	addwf	___lwmod@counter,f
  1540     0217  2A0A               	goto	l1094
  1541     0218                     l1096:
  1542     0218  080D               	movf	___lwmod@divisor+1,w
  1543     0219  020F               	subwf	___lwmod@dividend+1,w
  1544     021A  1D03               	skipz
  1545     021B  2A1E               	goto	u515
  1546     021C  080C               	movf	___lwmod@divisor,w
  1547     021D  020E               	subwf	___lwmod@dividend,w
  1548     021E                     u515:
  1549     021E  1C03               	skipc
  1550     021F  2A26               	goto	l1100
  1551     0220  080C               	movf	___lwmod@divisor,w
  1552     0221  028E               	subwf	___lwmod@dividend,f
  1553     0222  080D               	movf	___lwmod@divisor+1,w
  1554     0223  1C03               	skipc
  1555     0224  038F               	decf	___lwmod@dividend+1,f
  1556     0225  028F               	subwf	___lwmod@dividend+1,f
  1557     0226                     l1100:
  1558     0226  3001               	movlw	1
  1559     0227                     u525:
  1560     0227  1003               	clrc
  1561     0228  0C8D               	rrf	___lwmod@divisor+1,f
  1562     0229  0C8C               	rrf	___lwmod@divisor,f
  1563     022A  3EFF               	addlw	-1
  1564     022B  1D03               	skipz
  1565     022C  2A27               	goto	u525
  1566     022D  3001               	movlw	1
  1567     022E  0290               	subwf	___lwmod@counter,f
  1568     022F  1D03               	btfss	3,2
  1569     0230  2A18               	goto	l1096
  1570     0231                     l1104:
  1571     0231  080F               	movf	___lwmod@dividend+1,w
  1572     0232  008D               	movwf	?___lwmod+1
  1573     0233  080E               	movf	___lwmod@dividend,w
  1574     0234  008C               	movwf	?___lwmod
  1575     0235  0008               	return
  1576     0236                     __end_of___lwmod:
  1577                           
  1578                           	psect	text10
  1579     0268                     __ptext10:	
  1580 ;; *************** function ___lwdiv *****************
  1581 ;; Defined at:
  1582 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\lwdiv.c"
  1583 ;; Parameters:    Size  Location     Type
  1584 ;;  divisor         2    5[BANK0 ] unsigned int 
  1585 ;;  dividend        2    7[BANK0 ] unsigned int 
  1586 ;; Auto vars:     Size  Location     Type
  1587 ;;  quotient        2    9[BANK0 ] unsigned int 
  1588 ;;  counter         1   11[BANK0 ] unsigned char 
  1589 ;; Return value:  Size  Location     Type
  1590 ;;                  2    5[BANK0 ] unsigned int 
  1591 ;; Registers used:
  1592 ;;		wreg, status,2, status,0, btemp+1
  1593 ;; Tracked objects:
  1594 ;;		On entry : 100/0
  1595 ;;		On exit  : 100/0
  1596 ;;		Unchanged: 0/0
  1597 ;; Data sizes:     COMMON   BANK0
  1598 ;;      Params:         0       4
  1599 ;;      Locals:         0       3
  1600 ;;      Temps:          0       0
  1601 ;;      Totals:         0       7
  1602 ;;Total ram usage:        7 bytes
  1603 ;; Hardware stack levels used: 1
  1604 ;; This function calls:
  1605 ;;		Nothing
  1606 ;; This function is called by:
  1607 ;;		_main
  1608 ;;		_utoa
  1609 ;; This function uses a non-reentrant model
  1610 ;;
  1611                           
  1612     0268                     ___lwdiv:	
  1613                           ;psect for function ___lwdiv
  1614                           
  1615                           
  1616                           ;incstack = 0
  1617                           ; Regs used in ___lwdiv: [wreg+status,2+status,0+btemp+1]
  1618     0268  0195               	clrf	___lwdiv@quotient
  1619     0269  0196               	clrf	___lwdiv@quotient+1
  1620     026A  0811               	movf	___lwdiv@divisor,w
  1621     026B  0412               	iorwf	___lwdiv@divisor+1,w
  1622     026C  1903               	btfsc	3,2
  1623     026D  2A9F               	goto	l1082
  1624     026E  0197               	clrf	___lwdiv@counter
  1625     026F  0A97               	incf	___lwdiv@counter,f
  1626     0270                     l1070:
  1627     0270  1B92               	btfsc	___lwdiv@divisor+1,7
  1628     0271  2A7E               	goto	l1072
  1629     0272  3001               	movlw	1
  1630     0273                     u425:
  1631     0273  1003               	clrc
  1632     0274  0D91               	rlf	___lwdiv@divisor,f
  1633     0275  0D92               	rlf	___lwdiv@divisor+1,f
  1634     0276  3EFF               	addlw	-1
  1635     0277  1D03               	skipz
  1636     0278  2A73               	goto	u425
  1637     0279  3001               	movlw	1
  1638     027A  00CF               	movwf	79
  1639     027B  084F               	movf	79,w
  1640     027C  0797               	addwf	___lwdiv@counter,f
  1641     027D  2A70               	goto	l1070
  1642     027E                     l1072:
  1643     027E  3001               	movlw	1
  1644     027F                     u445:
  1645     027F  1003               	clrc
  1646     0280  0D95               	rlf	___lwdiv@quotient,f
  1647     0281  0D96               	rlf	___lwdiv@quotient+1,f
  1648     0282  3EFF               	addlw	-1
  1649     0283  1D03               	skipz
  1650     0284  2A7F               	goto	u445
  1651     0285  0812               	movf	___lwdiv@divisor+1,w
  1652     0286  0214               	subwf	___lwdiv@dividend+1,w
  1653     0287  1D03               	skipz
  1654     0288  2A8B               	goto	u455
  1655     0289  0811               	movf	___lwdiv@divisor,w
  1656     028A  0213               	subwf	___lwdiv@dividend,w
  1657     028B                     u455:
  1658     028B  1C03               	skipc
  1659     028C  2A94               	goto	l1078
  1660     028D  0811               	movf	___lwdiv@divisor,w
  1661     028E  0293               	subwf	___lwdiv@dividend,f
  1662     028F  0812               	movf	___lwdiv@divisor+1,w
  1663     0290  1C03               	skipc
  1664     0291  0394               	decf	___lwdiv@dividend+1,f
  1665     0292  0294               	subwf	___lwdiv@dividend+1,f
  1666     0293  1415               	bsf	___lwdiv@quotient,0
  1667     0294                     l1078:
  1668     0294  3001               	movlw	1
  1669     0295                     u465:
  1670     0295  1003               	clrc
  1671     0296  0C92               	rrf	___lwdiv@divisor+1,f
  1672     0297  0C91               	rrf	___lwdiv@divisor,f
  1673     0298  3EFF               	addlw	-1
  1674     0299  1D03               	skipz
  1675     029A  2A95               	goto	u465
  1676     029B  3001               	movlw	1
  1677     029C  0297               	subwf	___lwdiv@counter,f
  1678     029D  1D03               	btfss	3,2
  1679     029E  2A7E               	goto	l1072
  1680     029F                     l1082:
  1681     029F  0816               	movf	___lwdiv@quotient+1,w
  1682     02A0  0092               	movwf	?___lwdiv+1
  1683     02A1  0815               	movf	___lwdiv@quotient,w
  1684     02A2  0091               	movwf	?___lwdiv
  1685     02A3  0008               	return
  1686     02A4                     __end_of___lwdiv:
  1687                           
  1688                           	psect	text11
  1689     0175                     __ptext11:	
  1690 ;; *************** function _Lcd_Write_String *****************
  1691 ;; Defined at:
  1692 ;;		line 111 in file "lcd.c"
  1693 ;; Parameters:    Size  Location     Type
  1694 ;;  a               1    wreg     PTR unsigned char 
  1695 ;;		 -> Lcd_Write_Int@temp(16), welcomeMessage@msg(8), 
  1696 ;; Auto vars:     Size  Location     Type
  1697 ;;  a               1    8[BANK0 ] PTR unsigned char 
  1698 ;;		 -> Lcd_Write_Int@temp(16), welcomeMessage@msg(8), 
  1699 ;;  i               2    6[BANK0 ] int 
  1700 ;; Return value:  Size  Location     Type
  1701 ;;                  1    wreg      void 
  1702 ;; Registers used:
  1703 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1704 ;; Tracked objects:
  1705 ;;		On entry : 100/0
  1706 ;;		On exit  : 900/0
  1707 ;;		Unchanged: 0/0
  1708 ;; Data sizes:     COMMON   BANK0
  1709 ;;      Params:         0       0
  1710 ;;      Locals:         0       3
  1711 ;;      Temps:          0       1
  1712 ;;      Totals:         0       4
  1713 ;;Total ram usage:        4 bytes
  1714 ;; Hardware stack levels used: 1
  1715 ;; Hardware stack levels required when called: 2
  1716 ;; This function calls:
  1717 ;;		_Lcd_Write_Char
  1718 ;; This function is called by:
  1719 ;;		_welcomeMessage
  1720 ;;		_Lcd_Write_Int
  1721 ;; This function uses a non-reentrant model
  1722 ;;
  1723                           
  1724     0175                     _Lcd_Write_String:	
  1725                           ;psect for function _Lcd_Write_String
  1726                           
  1727                           
  1728                           ;incstack = 0
  1729                           ; Regs used in _Lcd_Write_String: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1730                           ;Lcd_Write_String@a stored from wreg
  1731     0175  0094               	movwf	Lcd_Write_String@a
  1732                           
  1733                           ;lcd.c: 111: void Lcd_Write_String(char *a);lcd.c: 112: {;lcd.c: 113:  int i;;lcd.c: 114
      +                          :  for(i=0;a[i]!='\0';i++)
  1734     0176  0192               	clrf	Lcd_Write_String@i
  1735     0177  0193               	clrf	Lcd_Write_String@i+1
  1736     0178                     l1138:
  1737     0178  0812               	movf	Lcd_Write_String@i,w
  1738     0179  0714               	addwf	Lcd_Write_String@a,w
  1739     017A  0091               	movwf	??_Lcd_Write_String
  1740     017B  0811               	movf	??_Lcd_Write_String,w
  1741     017C  0084               	movwf	4
  1742     017D  1383               	bcf	3,7	;select IRP bank0
  1743     017E  0800               	movf	0,w
  1744     017F  1903               	btfsc	3,2
  1745     0180  0008               	return
  1746                           
  1747                           ;lcd.c: 115:     {;lcd.c: 116:         Lcd_Write_Char(a[i]);
  1748     0181  0812               	movf	Lcd_Write_String@i,w
  1749     0182  0714               	addwf	Lcd_Write_String@a,w
  1750     0183  0091               	movwf	??_Lcd_Write_String
  1751     0184  0811               	movf	??_Lcd_Write_String,w
  1752     0185  0084               	movwf	4
  1753     0186  0800               	movf	0,w
  1754     0187  21B0               	fcall	_Lcd_Write_Char
  1755                           
  1756                           ;lcd.c: 117:     }
  1757     0188  3001               	movlw	1
  1758     0189  0792               	addwf	Lcd_Write_String@i,f
  1759     018A  1803               	skipnc
  1760     018B  0A93               	incf	Lcd_Write_String@i+1,f
  1761     018C  3000               	movlw	0
  1762     018D  0793               	addwf	Lcd_Write_String@i+1,f
  1763     018E  2978               	goto	l1138
  1764     018F                     __end_of_Lcd_Write_String:
  1765                           
  1766                           	psect	text12
  1767     01B0                     __ptext12:	
  1768 ;; *************** function _Lcd_Write_Char *****************
  1769 ;; Defined at:
  1770 ;;		line 94 in file "lcd.c"
  1771 ;; Parameters:    Size  Location     Type
  1772 ;;  a               1    wreg     unsigned char 
  1773 ;; Auto vars:     Size  Location     Type
  1774 ;;  a               1    4[BANK0 ] unsigned char 
  1775 ;;  y               1    3[BANK0 ] unsigned char 
  1776 ;;  temp            1    2[BANK0 ] unsigned char 
  1777 ;; Return value:  Size  Location     Type
  1778 ;;                  1    wreg      void 
  1779 ;; Registers used:
  1780 ;;		wreg, status,2, status,0, pclath, cstack
  1781 ;; Tracked objects:
  1782 ;;		On entry : 100/0
  1783 ;;		On exit  : 100/0
  1784 ;;		Unchanged: 0/0
  1785 ;; Data sizes:     COMMON   BANK0
  1786 ;;      Params:         0       0
  1787 ;;      Locals:         0       3
  1788 ;;      Temps:          0       1
  1789 ;;      Totals:         0       4
  1790 ;;Total ram usage:        4 bytes
  1791 ;; Hardware stack levels used: 1
  1792 ;; Hardware stack levels required when called: 1
  1793 ;; This function calls:
  1794 ;;		_Lcd_Port
  1795 ;; This function is called by:
  1796 ;;		_main
  1797 ;;		_Lcd_Write_String
  1798 ;; This function uses a non-reentrant model
  1799 ;;
  1800                           
  1801     01B0                     _Lcd_Write_Char:	
  1802                           ;psect for function _Lcd_Write_Char
  1803                           
  1804                           
  1805                           ;incstack = 0
  1806                           ; Regs used in _Lcd_Write_Char: [wreg+status,2+status,0+pclath+cstack]
  1807                           ;Lcd_Write_Char@a stored from wreg
  1808     01B0  0090               	movwf	Lcd_Write_Char@a
  1809                           
  1810                           ;lcd.c: 94: void Lcd_Write_Char(char a);lcd.c: 95: {;lcd.c: 96:    char temp,y;;lcd.c: 9
      +                          7:    temp = a&0x0F;
  1811     01B1  0810               	movf	Lcd_Write_Char@a,w
  1812     01B2  390F               	andlw	15
  1813     01B3  008E               	movwf	Lcd_Write_Char@temp
  1814                           
  1815                           ;lcd.c: 98:    y = a&0xF0;
  1816     01B4  0810               	movf	Lcd_Write_Char@a,w
  1817     01B5  39F0               	andlw	240
  1818     01B6  008F               	movwf	Lcd_Write_Char@y
  1819                           
  1820                           ;lcd.c: 99:    RA0 = 1;
  1821     01B7  1405               	bsf	5,0	;volatile
  1822                           
  1823                           ;lcd.c: 100:    Lcd_Port(y>>4);
  1824     01B8  080F               	movf	Lcd_Write_Char@y,w
  1825     01B9  008D               	movwf	??_Lcd_Write_Char
  1826     01BA  3004               	movlw	4
  1827     01BB                     u405:
  1828     01BB  1003               	clrc
  1829     01BC  0C8D               	rrf	??_Lcd_Write_Char,f
  1830     01BD  3EFF               	addlw	-1
  1831     01BE  1D03               	skipz
  1832     01BF  29BB               	goto	u405
  1833     01C0  080D               	movf	??_Lcd_Write_Char,w
  1834     01C1  2147               	fcall	_Lcd_Port
  1835                           
  1836                           ;lcd.c: 101:    RA2 = 1;
  1837     01C2  1505               	bsf	5,2	;volatile
  1838                           
  1839                           ;lcd.c: 102:    _delay((unsigned long)((40)*(4000000/4000000.0)));
  1840     01C3  300D               	movlw	13
  1841     01C4  008D               	movwf	??_Lcd_Write_Char
  1842     01C5                     u797:
  1843     01C5  0B8D               	decfsz	??_Lcd_Write_Char,f
  1844     01C6  29C5               	goto	u797
  1845                           
  1846                           ;lcd.c: 103:    RA2 = 0;
  1847     01C7  1283               	bcf	3,5	;RP0=0, select bank0
  1848     01C8  1105               	bcf	5,2	;volatile
  1849                           
  1850                           ;lcd.c: 104:    Lcd_Port(temp);
  1851     01C9  080E               	movf	Lcd_Write_Char@temp,w
  1852     01CA  2147               	fcall	_Lcd_Port
  1853                           
  1854                           ;lcd.c: 105:    RA2 = 1;
  1855     01CB  1505               	bsf	5,2	;volatile
  1856                           
  1857                           ;lcd.c: 106:    _delay((unsigned long)((40)*(4000000/4000000.0)));
  1858     01CC  300D               	movlw	13
  1859     01CD  008D               	movwf	??_Lcd_Write_Char
  1860     01CE                     u807:
  1861     01CE  0B8D               	decfsz	??_Lcd_Write_Char,f
  1862     01CF  29CE               	goto	u807
  1863                           
  1864                           ;lcd.c: 107:    RA2 = 0;
  1865     01D0  1283               	bcf	3,5	;RP0=0, select bank0
  1866     01D1  1105               	bcf	5,2	;volatile
  1867     01D2  0008               	return
  1868     01D3                     __end_of_Lcd_Write_Char:
  1869                           
  1870                           	psect	text13
  1871     01D3                     __ptext13:	
  1872 ;; *************** function _Lcd_Init *****************
  1873 ;; Defined at:
  1874 ;;		line 74 in file "lcd.c"
  1875 ;; Parameters:    Size  Location     Type
  1876 ;;		None
  1877 ;; Auto vars:     Size  Location     Type
  1878 ;;		None
  1879 ;; Return value:  Size  Location     Type
  1880 ;;                  1    wreg      void 
  1881 ;; Registers used:
  1882 ;;		wreg, status,2, status,0, pclath, cstack
  1883 ;; Tracked objects:
  1884 ;;		On entry : B00/0
  1885 ;;		On exit  : 100/0
  1886 ;;		Unchanged: 0/0
  1887 ;; Data sizes:     COMMON   BANK0
  1888 ;;      Params:         0       0
  1889 ;;      Locals:         0       0
  1890 ;;      Temps:          0       2
  1891 ;;      Totals:         0       2
  1892 ;;Total ram usage:        2 bytes
  1893 ;; Hardware stack levels used: 1
  1894 ;; Hardware stack levels required when called: 2
  1895 ;; This function calls:
  1896 ;;		_Lcd_Cmd
  1897 ;;		_Lcd_Port
  1898 ;; This function is called by:
  1899 ;;		_main
  1900 ;; This function uses a non-reentrant model
  1901 ;;
  1902                           
  1903     01D3                     _Lcd_Init:	
  1904                           ;psect for function _Lcd_Init
  1905                           
  1906                           
  1907                           ;lcd.c: 76:   Lcd_Port(0x00);
  1908                           
  1909                           ;incstack = 0
  1910                           ; Regs used in _Lcd_Init: [wreg+status,2+status,0+pclath+cstack]
  1911     01D3  3000               	movlw	0
  1912     01D4  2147               	fcall	_Lcd_Port
  1913                           
  1914                           ;lcd.c: 77:    _delay((unsigned long)((20)*(4000000/4000.0)));
  1915     01D5  301A               	movlw	26
  1916     01D6  0091               	movwf	??_Lcd_Init+1
  1917     01D7  30F8               	movlw	248
  1918     01D8  0090               	movwf	??_Lcd_Init
  1919     01D9                     u817:
  1920     01D9  0B90               	decfsz	??_Lcd_Init,f
  1921     01DA  29D9               	goto	u817
  1922     01DB  0B91               	decfsz	??_Lcd_Init+1,f
  1923     01DC  29D9               	goto	u817
  1924     01DD  0000               	nop
  1925                           
  1926                           ;lcd.c: 78:   Lcd_Cmd(0x03);
  1927     01DE  3003               	movlw	3
  1928     01DF  2135               	fcall	_Lcd_Cmd
  1929                           
  1930                           ;lcd.c: 79:  _delay((unsigned long)((5)*(4000000/4000.0)));
  1931     01E0  3007               	movlw	7
  1932     01E1  0091               	movwf	??_Lcd_Init+1
  1933     01E2  307D               	movlw	125
  1934     01E3  0090               	movwf	??_Lcd_Init
  1935     01E4                     u827:
  1936     01E4  0B90               	decfsz	??_Lcd_Init,f
  1937     01E5  29E4               	goto	u827
  1938     01E6  0B91               	decfsz	??_Lcd_Init+1,f
  1939     01E7  29E4               	goto	u827
  1940                           
  1941                           ;lcd.c: 80:   Lcd_Cmd(0x03);
  1942     01E8  3003               	movlw	3
  1943     01E9  2135               	fcall	_Lcd_Cmd
  1944                           
  1945                           ;lcd.c: 81:  _delay((unsigned long)((11)*(4000000/4000.0)));
  1946     01EA  300F               	movlw	15
  1947     01EB  0091               	movwf	??_Lcd_Init+1
  1948     01EC  3047               	movlw	71
  1949     01ED  0090               	movwf	??_Lcd_Init
  1950     01EE                     u837:
  1951     01EE  0B90               	decfsz	??_Lcd_Init,f
  1952     01EF  29EE               	goto	u837
  1953     01F0  0B91               	decfsz	??_Lcd_Init+1,f
  1954     01F1  29EE               	goto	u837
  1955     01F2  29F3               	nop2
  1956                           
  1957                           ;lcd.c: 82:   Lcd_Cmd(0x03);
  1958     01F3  3003               	movlw	3
  1959     01F4  2135               	fcall	_Lcd_Cmd
  1960                           
  1961                           ;lcd.c: 84:   Lcd_Cmd(0x02);
  1962     01F5  3002               	movlw	2
  1963     01F6  2135               	fcall	_Lcd_Cmd
  1964                           
  1965                           ;lcd.c: 85:   Lcd_Cmd(0x02);
  1966     01F7  3002               	movlw	2
  1967     01F8  2135               	fcall	_Lcd_Cmd
  1968                           
  1969                           ;lcd.c: 86:   Lcd_Cmd(0x08);
  1970     01F9  3008               	movlw	8
  1971     01FA  2135               	fcall	_Lcd_Cmd
  1972                           
  1973                           ;lcd.c: 87:   Lcd_Cmd(0x00);
  1974     01FB  3000               	movlw	0
  1975     01FC  2135               	fcall	_Lcd_Cmd
  1976                           
  1977                           ;lcd.c: 88:   Lcd_Cmd(0x0C);
  1978     01FD  300C               	movlw	12
  1979     01FE  2135               	fcall	_Lcd_Cmd
  1980                           
  1981                           ;lcd.c: 89:   Lcd_Cmd(0x00);
  1982     01FF  3000               	movlw	0
  1983     0200  2135               	fcall	_Lcd_Cmd
  1984                           
  1985                           ;lcd.c: 90:   Lcd_Cmd(0x06);
  1986     0201  3006               	movlw	6
  1987     0202  2135               	fcall	_Lcd_Cmd
  1988     0203  0008               	return
  1989     0204                     __end_of_Lcd_Init:
  1990                           
  1991                           	psect	text14
  1992     0135                     __ptext14:	
  1993 ;; *************** function _Lcd_Cmd *****************
  1994 ;; Defined at:
  1995 ;;		line 31 in file "lcd.c"
  1996 ;; Parameters:    Size  Location     Type
  1997 ;;  a               1    wreg     unsigned char 
  1998 ;; Auto vars:     Size  Location     Type
  1999 ;;  a               1    3[BANK0 ] unsigned char 
  2000 ;; Return value:  Size  Location     Type
  2001 ;;                  1    wreg      void 
  2002 ;; Registers used:
  2003 ;;		wreg, status,2, status,0, pclath, cstack
  2004 ;; Tracked objects:
  2005 ;;		On entry : 0/0
  2006 ;;		On exit  : 100/0
  2007 ;;		Unchanged: 0/0
  2008 ;; Data sizes:     COMMON   BANK0
  2009 ;;      Params:         0       0
  2010 ;;      Locals:         0       1
  2011 ;;      Temps:          0       2
  2012 ;;      Totals:         0       3
  2013 ;;Total ram usage:        3 bytes
  2014 ;; Hardware stack levels used: 1
  2015 ;; Hardware stack levels required when called: 1
  2016 ;; This function calls:
  2017 ;;		_Lcd_Port
  2018 ;; This function is called by:
  2019 ;;		_Lcd_Clear
  2020 ;;		_Lcd_Set_Cursor
  2021 ;;		_Lcd_Init
  2022 ;; This function uses a non-reentrant model
  2023 ;;
  2024                           
  2025     0135                     _Lcd_Cmd:	
  2026                           ;psect for function _Lcd_Cmd
  2027                           
  2028                           
  2029                           ;incstack = 0
  2030                           ; Regs used in _Lcd_Cmd: [wreg+status,2+status,0+pclath+cstack]
  2031                           ;Lcd_Cmd@a stored from wreg
  2032     0135  1283               	bcf	3,5	;RP0=0, select bank0
  2033     0136  008F               	movwf	Lcd_Cmd@a
  2034                           
  2035                           ;lcd.c: 31: void Lcd_Cmd(char a);lcd.c: 32: {;lcd.c: 34:     RA0 = 0;
  2036     0137  1005               	bcf	5,0	;volatile
  2037                           
  2038                           ;lcd.c: 35:  Lcd_Port(a);
  2039     0138  080F               	movf	Lcd_Cmd@a,w
  2040     0139  2147               	fcall	_Lcd_Port
  2041                           
  2042                           ;lcd.c: 38:  RA2 = 1;
  2043     013A  1505               	bsf	5,2	;volatile
  2044                           
  2045                           ;lcd.c: 39:     _delay((unsigned long)((4)*(4000000/4000.0)));
  2046     013B  3006               	movlw	6
  2047     013C  008E               	movwf	??_Lcd_Cmd+1
  2048     013D  3030               	movlw	48
  2049     013E  008D               	movwf	??_Lcd_Cmd
  2050     013F                     u847:
  2051     013F  0B8D               	decfsz	??_Lcd_Cmd,f
  2052     0140  293F               	goto	u847
  2053     0141  0B8E               	decfsz	??_Lcd_Cmd+1,f
  2054     0142  293F               	goto	u847
  2055     0143  0000               	nop
  2056                           
  2057                           ;lcd.c: 40:     RA2 = 0;
  2058     0144  1283               	bcf	3,5	;RP0=0, select bank0
  2059     0145  1105               	bcf	5,2	;volatile
  2060     0146  0008               	return
  2061     0147                     __end_of_Lcd_Cmd:
  2062                           
  2063                           	psect	text15
  2064     0147                     __ptext15:	
  2065 ;; *************** function _Lcd_Port *****************
  2066 ;; Defined at:
  2067 ;;		line 7 in file "lcd.c"
  2068 ;; Parameters:    Size  Location     Type
  2069 ;;  a               1    wreg     unsigned char 
  2070 ;; Auto vars:     Size  Location     Type
  2071 ;;  a               1    0[BANK0 ] unsigned char 
  2072 ;; Return value:  Size  Location     Type
  2073 ;;                  1    wreg      void 
  2074 ;; Registers used:
  2075 ;;		wreg
  2076 ;; Tracked objects:
  2077 ;;		On entry : 100/0
  2078 ;;		On exit  : 100/0
  2079 ;;		Unchanged: 0/0
  2080 ;; Data sizes:     COMMON   BANK0
  2081 ;;      Params:         0       0
  2082 ;;      Locals:         0       1
  2083 ;;      Temps:          0       0
  2084 ;;      Totals:         0       1
  2085 ;;Total ram usage:        1 bytes
  2086 ;; Hardware stack levels used: 1
  2087 ;; This function calls:
  2088 ;;		Nothing
  2089 ;; This function is called by:
  2090 ;;		_Lcd_Cmd
  2091 ;;		_Lcd_Init
  2092 ;;		_Lcd_Write_Char
  2093 ;; This function uses a non-reentrant model
  2094 ;;
  2095                           
  2096     0147                     _Lcd_Port:	
  2097                           ;psect for function _Lcd_Port
  2098                           
  2099                           
  2100                           ;incstack = 0
  2101                           ; Regs used in _Lcd_Port: [wreg]
  2102                           ;Lcd_Port@a stored from wreg
  2103     0147  008C               	movwf	Lcd_Port@a
  2104                           
  2105                           ;lcd.c: 7: void Lcd_Port(char a);lcd.c: 8: {;lcd.c: 9:  if(a & 1)
  2106     0148  1C0C               	btfss	Lcd_Port@a,0
  2107     0149  294C               	goto	l62
  2108                           
  2109                           ;lcd.c: 10:   RB0 = 1;
  2110     014A  1406               	bsf	6,0	;volatile
  2111     014B  294D               	goto	l63
  2112     014C                     l62:	
  2113                           ;lcd.c: 11:  else
  2114                           
  2115                           
  2116                           ;lcd.c: 12:   RB0 = 0;
  2117     014C  1006               	bcf	6,0	;volatile
  2118     014D                     l63:
  2119                           
  2120                           ;lcd.c: 14:  if(a & 2)
  2121     014D  1C8C               	btfss	Lcd_Port@a,1
  2122     014E  2951               	goto	l64
  2123                           
  2124                           ;lcd.c: 15:   RB1 = 1;
  2125     014F  1486               	bsf	6,1	;volatile
  2126     0150  2952               	goto	l65
  2127     0151                     l64:	
  2128                           ;lcd.c: 16:  else
  2129                           
  2130                           
  2131                           ;lcd.c: 17:   RB1 = 0;
  2132     0151  1086               	bcf	6,1	;volatile
  2133     0152                     l65:
  2134                           
  2135                           ;lcd.c: 19:  if(a & 4)
  2136     0152  1D0C               	btfss	Lcd_Port@a,2
  2137     0153  2956               	goto	l66
  2138                           
  2139                           ;lcd.c: 20:   RB2 = 1;
  2140     0154  1506               	bsf	6,2	;volatile
  2141     0155  2957               	goto	l67
  2142     0156                     l66:	
  2143                           ;lcd.c: 21:  else
  2144                           
  2145                           
  2146                           ;lcd.c: 22:   RB2 = 0;
  2147     0156  1106               	bcf	6,2	;volatile
  2148     0157                     l67:
  2149                           
  2150                           ;lcd.c: 24:  if(a & 8)
  2151     0157  1D8C               	btfss	Lcd_Port@a,3
  2152     0158  295B               	goto	l68
  2153                           
  2154                           ;lcd.c: 25:   RB3 = 1;
  2155     0159  1586               	bsf	6,3	;volatile
  2156     015A  0008               	return
  2157     015B                     l68:	
  2158                           ;lcd.c: 26:  else
  2159                           
  2160                           
  2161                           ;lcd.c: 27:   RB3 = 0;
  2162     015B  1186               	bcf	6,3	;volatile
  2163     015C  0008               	return
  2164     015D                     __end_of_Lcd_Port:
  2165     004E                     btemp	set	78	;btemp
  2166     004E                     wtemp0	set	78
  2167                           
  2168                           	psect	config
  2169                           
  2170                           ;Config register CONFIG @ 0x2007
  2171                           ;	Oscillator Selection bits
  2172                           ;	FOSC = XT, XT oscillator
  2173                           ;	Watchdog Timer
  2174                           ;	WDTE = OFF, WDT disabled
  2175                           ;	Power-up Timer Enable bit
  2176                           ;	PWRTE = ON, Power-up Timer is enabled
  2177                           ;	Code Protection bit
  2178                           ;	CP = OFF, Code protection disabled
  2179     2007                     	org	8199
  2180     2007  3FF1               	dw	16369

Data Sizes:
    Strings     5
    Constant    0
    Data        8
    BSS         2
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON            0      0       0
    BANK0            66     45      55

Pointer List with Targets:

    strcpy@from	PTR const unsigned char  size(1) Largest target is 5
		 -> STR_1(CODE[5]), 

    strcpy@to	PTR unsigned char  size(1) Largest target is 8
		 -> welcomeMessage@msg(BANK0[8]), 

    strcpy@cp	PTR unsigned char  size(1) Largest target is 8
		 -> welcomeMessage@msg(BANK0[8]), 

    utoa@buf	PTR unsigned char  size(1) Largest target is 16
		 -> Lcd_Write_Int@temp(BANK0[16]), 

    sp__itoa	PTR unsigned char  size(1) Largest target is 0

    sp__utoa	PTR unsigned char  size(1) Largest target is 16
		 -> Lcd_Write_Int@temp(BANK0[16]), 

    Lcd_Write_String@a	PTR unsigned char  size(1) Largest target is 16
		 -> Lcd_Write_Int@temp(BANK0[16]), welcomeMessage@msg(BANK0[8]), 

    sp__strcpy	PTR unsigned char  size(1) Largest target is 8
		 -> welcomeMessage@msg(BANK0[8]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_Lcd_Write_Int
    _welcomeMessage->_Lcd_Set_Cursor
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Clear->_Lcd_Cmd
    ___wmul->___lwdiv
    _Lcd_Write_Int->_utoa
    _utoa->___lwdiv
    ___lwdiv->___lwmod
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Init->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 7     7      0    6939
                                             38 BANK0      7     7      0
                          _Lcd_Clear
                           _Lcd_Init
                     _Lcd_Set_Cursor
                     _Lcd_Write_Char
                      _Lcd_Write_Int
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _readADC
                     _welcomeMessage
 ---------------------------------------------------------------------------------
 (1) _welcomeMessage                                      12    12      0    1492
                                             10 BANK0     12    12      0
                          _Lcd_Clear
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
                             _strcpy
 ---------------------------------------------------------------------------------
 (3) _strcpy                                               3     2      1     184
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (2) _Lcd_Set_Cursor                                       6     5      1     760
                                              4 BANK0      6     5      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Clear                                            2     2      0     110
                                              4 BANK0      2     2      0
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _readADC                                              8     6      2     208
                                              0 BANK0      8     6      2
 ---------------------------------------------------------------------------------
 (1) ___wmul                                               6     2      4     244
                                             12 BANK0      6     2      4
                            ___lwdiv (ARG)
                            ___lwmod (ARG)
 ---------------------------------------------------------------------------------
 (1) _Lcd_Write_Int                                       18    16      2    2470
                                             20 BANK0     18    16      2
                   _Lcd_Write_String
                               _utoa
 ---------------------------------------------------------------------------------
 (2) _utoa                                                 8     4      4    1879
                                             12 BANK0      8     4      4
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (1) ___lwmod                                              5     1      4     463
                                              0 BANK0      5     1      4
 ---------------------------------------------------------------------------------
 (1) ___lwdiv                                              7     3      4     770
                                              5 BANK0      7     3      4
                            ___lwmod (ARG)
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_String                                     4     4      0     367
                                              5 BANK0      4     4      0
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (3) _Lcd_Write_Char                                       4     4      0     178
                                              1 BANK0      4     4      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             2     2      0     198
                                              4 BANK0      2     2      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (3) _Lcd_Cmd                                              3     3      0     110
                                              1 BANK0      3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (4) _Lcd_Port                                             1     1      0      88
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Lcd_Clear
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Init
     _Lcd_Cmd
     _Lcd_Port
   _Lcd_Set_Cursor
     _Lcd_Cmd
   _Lcd_Write_Char
     _Lcd_Port
   _Lcd_Write_Int
     _Lcd_Write_String
       _Lcd_Write_Char
     _utoa
       ___lwdiv
         ___lwmod (ARG)
       ___lwmod
   ___lwdiv
   ___lwmod
   ___wmul
     ___lwdiv (ARG)
     ___lwmod (ARG)
   _readADC
   _welcomeMessage
     _Lcd_Clear
     _Lcd_Set_Cursor
     _Lcd_Write_String
     _strcpy

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               42     2D      37       3       83.3%
BITBANK0            42      0       0       5        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               0      0       0       1        0.0%
BITCOMMON            0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      37       6        0.0%
ABS                  0      0      37       4        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA              40      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.41 build 20230208172133 
Symbol Table                                                                                   Tue Apr 25 15:34:48 2023

                       pc 0002                        l62 014C                        l63 014D  
                      l64 0151                        l65 0152                        l66 0156  
                      l67 0157                        l68 015B                        fsr 0004  
     ___wmul@multiplicand 001A                       l206 0199                       l666 0375  
                     _RA0 0028                       _RA1 0029                       _RB0 0030  
                     _RA2 002A                       _RB1 0031                       _RB2 0032  
                     _RB3 0033                       _RB5 0035                       _RB6 0036  
                     _RB7 0037                       u405 01BB                       u425 0273  
                     u515 021E                       u445 027F                       u525 0227  
                     u630 02AC                       u455 028B                       u465 0295  
                     u555 0240                       u717 03E4                       u807 01CE  
                     u495 020D                       u575 0259                       u727 02C7  
                     u817 01D9                       u737 02E0                       u827 01E4  
                     u747 012F                       u837 01EE                       u685 019A  
                     u757 02EF                       u847 013F                       u695 01A1  
                     u767 02F5                       u777 0304                       u787 0316  
                     u797 01C5                       fsr0 0004                       indf 0000  
                    l1100 0226                      l1104 0231                      l1122 024F  
                    l1212 02ED                      l1070 0270                      l1072 027E  
                    l1144 0160                      l1138 0178                      l1082 029F  
                    l1148 033A                      l1260 0191                      l1228 0302  
                    l1078 0294                      l1094 020A                      l1158 0355  
                    l1238 0311                      l1096 0218                      l1286 0393  
                    STR_1 0007         ?_Lcd_Write_String 000C                      _main 0389  
                    btemp 004E                      _utoa 0335                      start 0000  
      ??_Lcd_Write_String 0011           __end_of_Lcd_Cmd 0147                     ?_main 000C  
                   ?_utoa 0018           __end_of___lwdiv 02A4           __end_of___lwmod 0236  
                   _TRISA 0085                     _TRISB 0086               readADC@bits 0012  
         __end_of_readADC 0335               readADC@volt 0010                     pclath 000A  
                   utoa@c 001E                     utoa@v 001C                     status 0003  
                   wtemp0 004E          __end_of_Lcd_Init 0204          __end_of_Lcd_Port 015D  
         __initialization 03EC              __end_of_main 03EC              __end_of_utoa 0389  
                  ??_main 0032                    ??_utoa 0000                 ??_Lcd_Cmd 000D  
        ??_welcomeMessage 0016                    _adcVal 0041                    ___wmul 018F  
               ??___lwdiv 0000                 ??___lwmod 0000                    main@d1 0035  
                  main@d2 0037                    _strcpy 015D     __end_of_Lcd_Write_Int 0127  
               ??_readADC 000E           Lcd_Set_Cursor@a 0012           Lcd_Set_Cursor@b 0010  
         Lcd_Set_Cursor@y 0014           Lcd_Set_Cursor@z 0013   __end_of__initialization 03FE  
       __end_of_Lcd_Clear 0135            __pcstackCOMMON 0000              __pidataBANK0 0112  
          _Lcd_Set_Cursor 0236                 ?_Lcd_Init 000C                 ?_Lcd_Port 000C  
          Lcd_Write_Int@a 0020                __pbssBANK0 0041                __pmaintext 0389  
                 ?___wmul 0018    __end_of_Lcd_Set_Cursor 0268                   ?_strcpy 000C  
              ??_Lcd_Init 0010                ??_Lcd_Port 0000                __stringtab 0001  
          _Lcd_Write_Char 01B0                   _Lcd_Cmd 0135                   ___lwdiv 0268  
                 ___lwmod 0204             readADC@rxData 0013           ?_Lcd_Set_Cursor 0010  
                 __ptext1 02A4                   __ptext2 015D                   __ptext3 0236  
                 __ptext4 0127                   __ptext5 02E9                   __ptext6 018F  
                 __ptext7 011A                   __ptext8 0335                   __ptext9 0204  
                 _readADC 02E9    __end_of_Lcd_Write_Char 01D3      end_of_initialization 03FE  
               Lcd_Port@a 000C                   utoa@buf 001F         Lcd_Write_Int@temp 0022  
                 utoa@val 0018         welcomeMessage@msg 001A           ?_Lcd_Write_Char 000C  
       Lcd_Write_String@a 0014         Lcd_Write_String@i 0012                 _Lcd_Clear 0127  
          __end_of___wmul 01B0          _Lcd_Write_String 0175            __end_of_strcpy 0175  
     start_initialization 03EC                ?_Lcd_Clear 000C                  ??___wmul 0000  
             __pdataBANK0 0039           Lcd_Write_Char@a 0010           Lcd_Write_Char@y 000F  
                ??_strcpy 0000                 ___latbits 0000             __pcstackBANK0 000C  
                ?_Lcd_Cmd 000C          ___lwdiv@dividend 0013          ??_Lcd_Set_Cursor 0011  
                ?___lwdiv 0011                  ?___lwmod 000C                 __pstrings 0001  
                ?_readADC 000C             _Lcd_Write_Int 011A          ___lwdiv@quotient 0015  
          ___wmul@product 001C                  Lcd_Cmd@a 000F               ??_Lcd_Clear 0010  
             __stringbase 0006         ___wmul@multiplier 0018            ?_Lcd_Write_Int 0020  
        ??_Lcd_Write_Char 000D                  _Lcd_Init 01D3                  _Lcd_Port 0147  
__end_of_Lcd_Write_String 018F        __end_of__stringtab 0007            _welcomeMessage 02A4  
         ___lwdiv@divisor 0011           ___lwdiv@counter 0017                  __ptext10 0268  
                __ptext11 0175                  __ptext12 01B0                  __ptext13 01D3  
                __ptext14 0135                  __ptext15 0147                strcpy@from 000C  
         ??_Lcd_Write_Int 0000    __end_of_welcomeMessage 02E9        Lcd_Write_Char@temp 000E  
        ___lwmod@dividend 000E                 stringcode 0001        Lcd_Set_Cursor@temp 0015  
         ?_welcomeMessage 000C                  utoa@base 001A           ___lwmod@divisor 000C  
                strcpy@cp 000E                  strcpy@to 000D           ___lwmod@counter 0010  
                stringdir 0001                  stringtab 0001        welcomeMessage@F325 0039  

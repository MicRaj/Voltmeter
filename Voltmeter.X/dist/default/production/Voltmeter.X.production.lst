

Microchip MPLAB XC8 Assembler V2.41 build 20230208172133 
                                                                                               Tue Apr 25 15:25:09 2023

Microchip MPLAB XC8 C Compiler v2.41 (Free license) build 20230208172133 Og9 
     1                           	processor	16F84A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2,noexec
     5                           	psect	strings,global,class=STRING,delta=2,noexec
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    11                           	psect	maintext,global,class=CODE,split=1,delta=2
    12                           	psect	text1,local,class=CODE,merge=1,delta=2
    13                           	psect	text2,local,class=CODE,merge=1,delta=2,group=2
    14                           	psect	text3,local,class=CODE,merge=1,delta=2
    15                           	psect	text4,local,class=CODE,merge=1,delta=2
    16                           	psect	text5,local,class=CODE,merge=1,delta=2
    17                           	psect	text6,local,class=CODE,merge=1,delta=2,group=1
    18                           	psect	text7,local,class=CODE,merge=1,delta=2
    19                           	psect	text8,local,class=CODE,merge=1,delta=2,group=2
    20                           	psect	text9,local,class=CODE,merge=1,delta=2,group=1
    21                           	psect	text10,local,class=CODE,merge=1,delta=2,group=1
    22                           	psect	text11,local,class=CODE,merge=1,delta=2
    23                           	psect	text12,local,class=CODE,merge=1,delta=2
    24                           	psect	text13,local,class=CODE,merge=1,delta=2
    25                           	psect	text14,local,class=CODE,merge=1,delta=2
    26                           	psect	text15,local,class=CODE,merge=1,delta=2
    27                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    28                           	dabs	1,0x4E,2
    29     0000                     
    30                           ; Version 2.20
    31                           ; Generated 12/02/2020 GMT
    32                           ; 
    33                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    34                           ; All rights reserved.
    35                           ; 
    36                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    37                           ; 
    38                           ; Redistribution and use in source and binary forms, with or without modification, are
    39                           ; permitted provided that the following conditions are met:
    40                           ; 
    41                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    42                           ;        conditions and the following disclaimer.
    43                           ; 
    44                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    45                           ;        of conditions and the following disclaimer in the documentation and/or other
    46                           ;        materials provided with the distribution.
    47                           ; 
    48                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    49                           ;        software without specific prior written permission.
    50                           ; 
    51                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    52                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    53                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    54                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    55                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    56                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    57                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    58                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    59                           ; 
    60                           ; 
    61                           ; Code-generator required, PIC16F84A Definitions
    62                           ; 
    63                           ; SFR Addresses
    64     0000                     	;# 
    65     0001                     	;# 
    66     0002                     	;# 
    67     0003                     	;# 
    68     0004                     	;# 
    69     0005                     	;# 
    70     0006                     	;# 
    71     0008                     	;# 
    72     0009                     	;# 
    73     000A                     	;# 
    74     000B                     	;# 
    75     0081                     	;# 
    76     0085                     	;# 
    77     0086                     	;# 
    78     0088                     	;# 
    79     0089                     	;# 
    80     0000                     	;# 
    81     0001                     	;# 
    82     0002                     	;# 
    83     0003                     	;# 
    84     0004                     	;# 
    85     0005                     	;# 
    86     0006                     	;# 
    87     0008                     	;# 
    88     0009                     	;# 
    89     000A                     	;# 
    90     000B                     	;# 
    91     0081                     	;# 
    92     0085                     	;# 
    93     0086                     	;# 
    94     0088                     	;# 
    95     0089                     	;# 
    96     0000                     	;# 
    97     0001                     	;# 
    98     0002                     	;# 
    99     0003                     	;# 
   100     0004                     	;# 
   101     0005                     	;# 
   102     0006                     	;# 
   103     0008                     	;# 
   104     0009                     	;# 
   105     000A                     	;# 
   106     000B                     	;# 
   107     0081                     	;# 
   108     0085                     	;# 
   109     0086                     	;# 
   110     0088                     	;# 
   111     0089                     	;# 
   112     0000                     	;# 
   113     0001                     	;# 
   114     0002                     	;# 
   115     0003                     	;# 
   116     0004                     	;# 
   117     0005                     	;# 
   118     0006                     	;# 
   119     0008                     	;# 
   120     0009                     	;# 
   121     000A                     	;# 
   122     000B                     	;# 
   123     0081                     	;# 
   124     0085                     	;# 
   125     0086                     	;# 
   126     0088                     	;# 
   127     0089                     	;# 
   128                           
   129                           	psect	idataBANK0
   130     00DA                     __pidataBANK0:
   131                           
   132                           ;initializer for welcomeMessage@F325
   133     00DA  3457               	retlw	87
   134     00DB  3465               	retlw	101
   135     00DC  346C               	retlw	108
   136     00DD  3463               	retlw	99
   137     00DE  346F               	retlw	111
   138     00DF  346D               	retlw	109
   139     00E0  3465               	retlw	101
   140     00E1  3454               	retlw	84
   141     00E2  3400               	retlw	0
   142     0036                     _RB6	set	54
   143     002A                     _RA2	set	42
   144     0028                     _RA0	set	40
   145     0033                     _RB3	set	51
   146     0032                     _RB2	set	50
   147     0031                     _RB1	set	49
   148     0030                     _RB0	set	48
   149     0029                     _RA1	set	41
   150     0035                     _RB5	set	53
   151     0037                     _RB7	set	55
   152     0085                     _TRISA	set	133
   153     0086                     _TRISB	set	134
   154                           
   155                           	psect	strings
   156     0001                     __pstrings:
   157     0001                     stringtab:
   158     0001                     __stringtab:
   159     0001                     stringcode:	
   160                           ;	String table - string pointers are 1 byte each
   161                           
   162     0001                     stringdir:
   163     0001  3000               	movlw	high stringdir
   164     0002  008A               	movwf	10
   165     0003  0804               	movf	4,w
   166     0004  0A84               	incf	4,f
   167     0005  0782               	addwf	2,f
   168     0006                     __stringbase:
   169     0006  3400               	retlw	0
   170     0007                     __end_of__stringtab:
   171     0007                     STR_1:
   172     0007  3430               	retlw	48	;'0'
   173     0008  342D               	retlw	45	;'-'
   174     0009  3435               	retlw	53	;'5'
   175     000A  3456               	retlw	86	;'V'
   176     000B  3400               	retlw	0
   177                           
   178                           	psect	cinit
   179     03EA                     start_initialization:	
   180                           ; #config settings
   181                           
   182     03EA                     __initialization:
   183                           
   184                           ; Initialize objects allocated to BANK0
   185     03EA  20DA               	fcall	__pidataBANK0	;fetch initializer
   186     03EB  00C3               	movwf	__pdataBANK0& (0+127)
   187     03EC  20DB               	fcall	__pidataBANK0+1	;fetch initializer
   188     03ED  00C4               	movwf	(__pdataBANK0+1)& (0+127)
   189     03EE  20DC               	fcall	__pidataBANK0+2	;fetch initializer
   190     03EF  00C5               	movwf	(__pdataBANK0+2)& (0+127)
   191     03F0  20DD               	fcall	__pidataBANK0+3	;fetch initializer
   192     03F1  00C6               	movwf	(__pdataBANK0+3)& (0+127)
   193     03F2  20DE               	fcall	__pidataBANK0+4	;fetch initializer
   194     03F3  00C7               	movwf	(__pdataBANK0+4)& (0+127)
   195     03F4  20DF               	fcall	__pidataBANK0+5	;fetch initializer
   196     03F5  00C8               	movwf	(__pdataBANK0+5)& (0+127)
   197     03F6  20E0               	fcall	__pidataBANK0+6	;fetch initializer
   198     03F7  00C9               	movwf	(__pdataBANK0+6)& (0+127)
   199     03F8  20E1               	fcall	__pidataBANK0+7	;fetch initializer
   200     03F9  00CA               	movwf	(__pdataBANK0+7)& (0+127)
   201     03FA  20E2               	fcall	__pidataBANK0+8	;fetch initializer
   202     03FB  00CB               	movwf	(__pdataBANK0+8)& (0+127)
   203                           
   204                           ; Clear objects allocated to BANK0
   205     03FC  01CC               	clrf	__pbssBANK0& (0+127)
   206     03FD  01CD               	clrf	(__pbssBANK0+1)& (0+127)
   207     03FE                     end_of_initialization:	
   208                           ;End of C runtime variable initialization code
   209                           
   210     03FE                     __end_of__initialization:
   211     03FE  0183               	clrf	3
   212     03FF  2B52               	ljmp	_main	;jump to C main() function
   213                           
   214                           	psect	bssBANK0
   215     004C                     __pbssBANK0:
   216     004C                     _adcVal:
   217     004C                     	ds	2
   218                           
   219                           	psect	dataBANK0
   220     0043                     __pdataBANK0:
   221     0043                     welcomeMessage@F325:
   222     0043                     	ds	9
   223                           
   224                           	psect	cstackCOMMON
   225     0000                     __pcstackCOMMON:
   226     0000                     ??_strcpy:
   227     0000                     ??_Lcd_Write_Int:	
   228                           ; 1 bytes @ 0x0
   229                           
   230     0000                     ??_utoa:	
   231                           ; 1 bytes @ 0x0
   232                           
   233     0000                     ??_Lcd_Port:	
   234                           ; 1 bytes @ 0x0
   235                           
   236     0000                     ??___wmul:	
   237                           ; 1 bytes @ 0x0
   238                           
   239     0000                     ??___lwdiv:	
   240                           ; 1 bytes @ 0x0
   241                           
   242     0000                     ??___lwmod:	
   243                           ; 1 bytes @ 0x0
   244                           
   245                           
   246                           	psect	cstackBANK0
   247     000C                     __pcstackBANK0:	
   248                           ; 1 bytes @ 0x0
   249                           
   250     000C                     ?_Lcd_Clear:
   251     000C                     ?_Lcd_Write_String:	
   252                           ; 1 bytes @ 0x0
   253                           
   254     000C                     ?_strcpy:	
   255                           ; 1 bytes @ 0x0
   256                           
   257     000C                     ?_Lcd_Init:	
   258                           ; 1 bytes @ 0x0
   259                           
   260     000C                     ?_Lcd_Write_Char:	
   261                           ; 1 bytes @ 0x0
   262                           
   263     000C                     ?_welcomeMessage:	
   264                           ; 1 bytes @ 0x0
   265                           
   266     000C                     ?_main:	
   267                           ; 1 bytes @ 0x0
   268                           
   269     000C                     ?_Lcd_Port:	
   270                           ; 1 bytes @ 0x0
   271                           
   272     000C                     ?_Lcd_Cmd:	
   273                           ; 1 bytes @ 0x0
   274                           
   275     000C                     ?_readADC:	
   276                           ; 1 bytes @ 0x0
   277                           
   278     000C                     ?___lwmod:	
   279                           ; 2 bytes @ 0x0
   280                           
   281     000C                     Lcd_Port@a:	
   282                           ; 2 bytes @ 0x0
   283                           
   284     000C                     strcpy@from:	
   285                           ; 1 bytes @ 0x0
   286                           
   287     000C                     ___lwmod@divisor:	
   288                           ; 1 bytes @ 0x0
   289                           
   290                           
   291                           ; 2 bytes @ 0x0
   292     000C                     	ds	1
   293     000D                     ??_Lcd_Write_Char:
   294     000D                     ??_Lcd_Cmd:	
   295                           ; 1 bytes @ 0x1
   296                           
   297     000D                     strcpy@to:	
   298                           ; 1 bytes @ 0x1
   299                           
   300                           
   301                           ; 1 bytes @ 0x1
   302     000D                     	ds	1
   303     000E                     ??_readADC:
   304     000E                     Lcd_Write_Char@temp:	
   305                           ; 1 bytes @ 0x2
   306                           
   307     000E                     strcpy@cp:	
   308                           ; 1 bytes @ 0x2
   309                           
   310     000E                     ___lwmod@dividend:	
   311                           ; 1 bytes @ 0x2
   312                           
   313                           
   314                           ; 2 bytes @ 0x2
   315     000E                     	ds	1
   316     000F                     Lcd_Cmd@a:
   317     000F                     Lcd_Write_Char@y:	
   318                           ; 1 bytes @ 0x3
   319                           
   320                           
   321                           ; 1 bytes @ 0x3
   322     000F                     	ds	1
   323     0010                     ??_Lcd_Clear:
   324     0010                     ?_Lcd_Set_Cursor:	
   325                           ; 1 bytes @ 0x4
   326                           
   327     0010                     ??_Lcd_Init:	
   328                           ; 1 bytes @ 0x4
   329                           
   330     0010                     Lcd_Set_Cursor@b:	
   331                           ; 1 bytes @ 0x4
   332                           
   333     0010                     Lcd_Write_Char@a:	
   334                           ; 1 bytes @ 0x4
   335                           
   336     0010                     ___lwmod@counter:	
   337                           ; 1 bytes @ 0x4
   338                           
   339     0010                     readADC@volt:	
   340                           ; 1 bytes @ 0x4
   341                           
   342                           
   343                           ; 2 bytes @ 0x4
   344     0010                     	ds	1
   345     0011                     ??_Lcd_Set_Cursor:
   346     0011                     ??_Lcd_Write_String:	
   347                           ; 1 bytes @ 0x5
   348                           
   349     0011                     ?___wmul:	
   350                           ; 1 bytes @ 0x5
   351                           
   352     0011                     ___wmul@multiplier:	
   353                           ; 2 bytes @ 0x5
   354                           
   355                           
   356                           ; 2 bytes @ 0x5
   357     0011                     	ds	1
   358     0012                     Lcd_Set_Cursor@a:
   359     0012                     readADC@bits:	
   360                           ; 1 bytes @ 0x6
   361                           
   362     0012                     Lcd_Write_String@i:	
   363                           ; 1 bytes @ 0x6
   364                           
   365                           
   366                           ; 2 bytes @ 0x6
   367     0012                     	ds	1
   368     0013                     Lcd_Set_Cursor@z:
   369     0013                     readADC@rxData:	
   370                           ; 1 bytes @ 0x7
   371                           
   372     0013                     ___wmul@multiplicand:	
   373                           ; 1 bytes @ 0x7
   374                           
   375                           
   376                           ; 2 bytes @ 0x7
   377     0013                     	ds	1
   378     0014                     Lcd_Set_Cursor@y:
   379     0014                     Lcd_Write_String@a:	
   380                           ; 1 bytes @ 0x8
   381                           
   382                           
   383                           ; 1 bytes @ 0x8
   384     0014                     	ds	1
   385     0015                     Lcd_Set_Cursor@temp:
   386     0015                     ___wmul@product:	
   387                           ; 1 bytes @ 0x9
   388                           
   389                           
   390                           ; 2 bytes @ 0x9
   391     0015                     	ds	1
   392     0016                     ??_welcomeMessage:
   393                           
   394                           ; 1 bytes @ 0xA
   395     0016                     	ds	1
   396     0017                     ?___lwdiv:
   397     0017                     ___lwdiv@divisor:	
   398                           ; 2 bytes @ 0xB
   399                           
   400                           
   401                           ; 2 bytes @ 0xB
   402     0017                     	ds	2
   403     0019                     ___lwdiv@dividend:
   404                           
   405                           ; 2 bytes @ 0xD
   406     0019                     	ds	1
   407     001A                     welcomeMessage@msg:
   408                           
   409                           ; 9 bytes @ 0xE
   410     001A                     	ds	1
   411     001B                     ___lwdiv@quotient:
   412                           
   413                           ; 2 bytes @ 0xF
   414     001B                     	ds	2
   415     001D                     ___lwdiv@counter:
   416                           
   417                           ; 1 bytes @ 0x11
   418     001D                     	ds	1
   419     001E                     ?_utoa:
   420     001E                     utoa@val:	
   421                           ; 1 bytes @ 0x12
   422                           
   423                           
   424                           ; 2 bytes @ 0x12
   425     001E                     	ds	2
   426     0020                     utoa@base:
   427                           
   428                           ; 2 bytes @ 0x14
   429     0020                     	ds	2
   430     0022                     utoa@v:
   431                           
   432                           ; 2 bytes @ 0x16
   433     0022                     	ds	2
   434     0024                     utoa@c:
   435                           
   436                           ; 1 bytes @ 0x18
   437     0024                     	ds	1
   438     0025                     utoa@buf:
   439                           
   440                           ; 1 bytes @ 0x19
   441     0025                     	ds	1
   442     0026                     ?_Lcd_Write_Int:
   443     0026                     Lcd_Write_Int@a:	
   444                           ; 1 bytes @ 0x1A
   445                           
   446                           
   447                           ; 2 bytes @ 0x1A
   448     0026                     	ds	2
   449     0028                     Lcd_Write_Int@temp:
   450                           
   451                           ; 16 bytes @ 0x1C
   452     0028                     	ds	16
   453     0038                     ??_main:
   454                           
   455                           ; 1 bytes @ 0x2C
   456     0038                     	ds	3
   457     003B                     main@d1:
   458                           
   459                           ; 2 bytes @ 0x2F
   460     003B                     	ds	2
   461     003D                     main@d2:
   462                           
   463                           ; 2 bytes @ 0x31
   464     003D                     	ds	2
   465     003F                     main@d3:
   466                           
   467                           ; 2 bytes @ 0x33
   468     003F                     	ds	2
   469     0041                     _main$764:
   470                           
   471                           ; 2 bytes @ 0x35
   472     0041                     	ds	2
   473                           
   474                           	psect	maintext
   475     0352                     __pmaintext:	
   476 ;;
   477 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   478 ;;
   479 ;; *************** function _main *****************
   480 ;; Defined at:
   481 ;;		line 46 in file "main.c"
   482 ;; Parameters:    Size  Location     Type
   483 ;;		None
   484 ;; Auto vars:     Size  Location     Type
   485 ;;  d3              2   51[BANK0 ] unsigned short 
   486 ;;  d2              2   49[BANK0 ] unsigned short 
   487 ;;  d1              2   47[BANK0 ] unsigned short 
   488 ;; Return value:  Size  Location     Type
   489 ;;                  1    wreg      void 
   490 ;; Registers used:
   491 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   492 ;; Tracked objects:
   493 ;;		On entry : B00/0
   494 ;;		On exit  : 0/0
   495 ;;		Unchanged: 0/0
   496 ;; Data sizes:     COMMON   BANK0
   497 ;;      Params:         0       0
   498 ;;      Locals:         0       8
   499 ;;      Temps:          0       3
   500 ;;      Totals:         0      11
   501 ;;Total ram usage:       11 bytes
   502 ;; Hardware stack levels required when called: 4
   503 ;; This function calls:
   504 ;;		_Lcd_Clear
   505 ;;		_Lcd_Init
   506 ;;		_Lcd_Set_Cursor
   507 ;;		_Lcd_Write_Char
   508 ;;		_Lcd_Write_Int
   509 ;;		___lwdiv
   510 ;;		___lwmod
   511 ;;		___wmul
   512 ;;		_readADC
   513 ;;		_welcomeMessage
   514 ;; This function is called by:
   515 ;;		Startup code after reset
   516 ;; This function uses a non-reentrant model
   517 ;;
   518                           
   519     0352                     _main:	
   520                           ;psect for function _main
   521                           
   522                           
   523                           ;main.c: 47:     TRISB = 0b01000000;
   524                           
   525                           ;incstack = 0
   526                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   527     0352  3040               	movlw	64
   528     0353  1683               	bsf	3,5	;RP0=1, select bank1
   529     0354  0086               	movwf	6	;volatile
   530                           
   531                           ;main.c: 48:     TRISA = 0b00000;
   532     0355  0185               	clrf	5	;volatile
   533                           
   534                           ;main.c: 50:     RB7 = 1;
   535     0356  1283               	bcf	3,5	;RP0=0, select bank0
   536     0357  1786               	bsf	6,7	;volatile
   537                           
   538                           ;main.c: 51:     RB5 = 0;
   539     0358  1286               	bcf	6,5	;volatile
   540                           
   541                           ;main.c: 53:     RA1 = 0;
   542     0359  1085               	bcf	5,1	;volatile
   543                           
   544                           ;main.c: 55:     Lcd_Init();
   545     035A  219C               	fcall	_Lcd_Init
   546                           
   547                           ;main.c: 56:     welcomeMessage();
   548     035B  226D               	fcall	_welcomeMessage
   549     035C                     l1294:
   550                           
   551                           ;main.c: 59:         adcVal = readADC();
   552     035C  22B2               	fcall	_readADC
   553     035D  080D               	movf	?_readADC+1,w
   554     035E  00CD               	movwf	_adcVal+1
   555     035F  080C               	movf	?_readADC,w
   556     0360  00CC               	movwf	_adcVal
   557                           
   558                           ;main.c: 61:         unsigned short int d1;;main.c: 62:         unsigned short int d2;;m
      +                          ain.c: 63:         unsigned short int d3;;main.c: 65:         d1 = adcVal / 204;
   559     0361  30CC               	movlw	204
   560     0362  0097               	movwf	___lwdiv@divisor
   561     0363  3000               	movlw	0
   562     0364  0098               	movwf	___lwdiv@divisor+1
   563     0365  084D               	movf	_adcVal+1,w
   564     0366  009A               	movwf	___lwdiv@dividend+1
   565     0367  084C               	movf	_adcVal,w
   566     0368  0099               	movwf	___lwdiv@dividend
   567     0369  2231               	fcall	___lwdiv
   568     036A  0818               	movf	?___lwdiv+1,w
   569     036B  00BC               	movwf	main@d1+1
   570     036C  0817               	movf	?___lwdiv,w
   571     036D  00BB               	movwf	main@d1
   572                           
   573                           ;main.c: 66:         d2 = (adcVal % 204)*10/204;
   574     036E  30CC               	movlw	204
   575     036F  0097               	movwf	___lwdiv@divisor
   576     0370  3000               	movlw	0
   577     0371  0098               	movwf	___lwdiv@divisor+1
   578     0372  084D               	movf	_adcVal+1,w
   579     0373  008F               	movwf	___lwmod@dividend+1
   580     0374  084C               	movf	_adcVal,w
   581     0375  008E               	movwf	___lwmod@dividend
   582     0376  30CC               	movlw	204
   583     0377  008C               	movwf	___lwmod@divisor
   584     0378  3000               	movlw	0
   585     0379  008D               	movwf	___lwmod@divisor+1
   586     037A  21CD               	fcall	___lwmod
   587     037B  080D               	movf	?___lwmod+1,w
   588     037C  0092               	movwf	___wmul@multiplier+1
   589     037D  080C               	movf	?___lwmod,w
   590     037E  0091               	movwf	___wmul@multiplier
   591     037F  300A               	movlw	10
   592     0380  0093               	movwf	___wmul@multiplicand
   593     0381  3000               	movlw	0
   594     0382  0094               	movwf	___wmul@multiplicand+1
   595     0383  2158               	fcall	___wmul
   596     0384  0812               	movf	?___wmul+1,w
   597     0385  009A               	movwf	___lwdiv@dividend+1
   598     0386  0811               	movf	?___wmul,w
   599     0387  0099               	movwf	___lwdiv@dividend
   600     0388  2231               	fcall	___lwdiv
   601     0389  0818               	movf	?___lwdiv+1,w
   602     038A  00BE               	movwf	main@d2+1
   603     038B  0817               	movf	?___lwdiv,w
   604     038C  00BD               	movwf	main@d2
   605                           
   606                           ;main.c: 67:         d3 = ((adcVal*10)%204)*10/204;
   607     038D  084D               	movf	_adcVal+1,w
   608     038E  0092               	movwf	___wmul@multiplier+1
   609     038F  084C               	movf	_adcVal,w
   610     0390  0091               	movwf	___wmul@multiplier
   611     0391  300A               	movlw	10
   612     0392  0093               	movwf	___wmul@multiplicand
   613     0393  3000               	movlw	0
   614     0394  0094               	movwf	___wmul@multiplicand+1
   615     0395  2158               	fcall	___wmul
   616     0396  0812               	movf	?___wmul+1,w
   617     0397  008F               	movwf	___lwmod@dividend+1
   618     0398  0811               	movf	?___wmul,w
   619     0399  008E               	movwf	___lwmod@dividend
   620     039A  30CC               	movlw	204
   621     039B  008C               	movwf	___lwmod@divisor
   622     039C  3000               	movlw	0
   623     039D  008D               	movwf	___lwmod@divisor+1
   624     039E  21CD               	fcall	___lwmod
   625     039F  080D               	movf	?___lwmod+1,w
   626     03A0  00C2               	movwf	_main$764+1
   627     03A1  080C               	movf	?___lwmod,w
   628     03A2  00C1               	movwf	_main$764
   629                           
   630                           ;main.c: 67:         d3 = ((adcVal*10)%204)*10/204;
   631     03A3  30CC               	movlw	204
   632     03A4  0097               	movwf	___lwdiv@divisor
   633     03A5  3000               	movlw	0
   634     03A6  0098               	movwf	___lwdiv@divisor+1
   635     03A7  0842               	movf	_main$764+1,w
   636     03A8  0092               	movwf	___wmul@multiplier+1
   637     03A9  0841               	movf	_main$764,w
   638     03AA  0091               	movwf	___wmul@multiplier
   639     03AB  300A               	movlw	10
   640     03AC  0093               	movwf	___wmul@multiplicand
   641     03AD  3000               	movlw	0
   642     03AE  0094               	movwf	___wmul@multiplicand+1
   643     03AF  2158               	fcall	___wmul
   644     03B0  0812               	movf	?___wmul+1,w
   645     03B1  009A               	movwf	___lwdiv@dividend+1
   646     03B2  0811               	movf	?___wmul,w
   647     03B3  0099               	movwf	___lwdiv@dividend
   648     03B4  2231               	fcall	___lwdiv
   649     03B5  0818               	movf	?___lwdiv+1,w
   650     03B6  00C0               	movwf	main@d3+1
   651     03B7  0817               	movf	?___lwdiv,w
   652     03B8  00BF               	movwf	main@d3
   653                           
   654                           ;main.c: 70:         Lcd_Clear();
   655     03B9  20F0               	fcall	_Lcd_Clear
   656                           
   657                           ;main.c: 71:         Lcd_Set_Cursor(1, 1);
   658     03BA  1283               	bcf	3,5	;RP0=0, select bank0
   659     03BB  0190               	clrf	Lcd_Set_Cursor@b
   660     03BC  0A90               	incf	Lcd_Set_Cursor@b,f
   661     03BD  3001               	movlw	1
   662     03BE  21FF               	fcall	_Lcd_Set_Cursor
   663                           
   664                           ;main.c: 72:         Lcd_Write_Int(d1);
   665     03BF  083C               	movf	main@d1+1,w
   666     03C0  00A7               	movwf	Lcd_Write_Int@a+1
   667     03C1  083B               	movf	main@d1,w
   668     03C2  00A6               	movwf	Lcd_Write_Int@a
   669     03C3  20E3               	fcall	_Lcd_Write_Int
   670                           
   671                           ;main.c: 73:         Lcd_Set_Cursor(1, 2);
   672     03C4  3002               	movlw	2
   673     03C5  0090               	movwf	Lcd_Set_Cursor@b
   674     03C6  3001               	movlw	1
   675     03C7  21FF               	fcall	_Lcd_Set_Cursor
   676                           
   677                           ;main.c: 74:         Lcd_Write_Char('.');
   678     03C8  302E               	movlw	46
   679     03C9  2179               	fcall	_Lcd_Write_Char
   680                           
   681                           ;main.c: 75:         Lcd_Set_Cursor(1, 3);
   682     03CA  3003               	movlw	3
   683     03CB  0090               	movwf	Lcd_Set_Cursor@b
   684     03CC  3001               	movlw	1
   685     03CD  21FF               	fcall	_Lcd_Set_Cursor
   686                           
   687                           ;main.c: 76:         Lcd_Write_Int(d2);
   688     03CE  083E               	movf	main@d2+1,w
   689     03CF  00A7               	movwf	Lcd_Write_Int@a+1
   690     03D0  083D               	movf	main@d2,w
   691     03D1  00A6               	movwf	Lcd_Write_Int@a
   692     03D2  20E3               	fcall	_Lcd_Write_Int
   693                           
   694                           ;main.c: 77:         Lcd_Set_Cursor(1, 4);
   695     03D3  3004               	movlw	4
   696     03D4  0090               	movwf	Lcd_Set_Cursor@b
   697     03D5  3001               	movlw	1
   698     03D6  21FF               	fcall	_Lcd_Set_Cursor
   699                           
   700                           ;main.c: 78:         Lcd_Write_Int(d3);
   701     03D7  0840               	movf	main@d3+1,w
   702     03D8  00A7               	movwf	Lcd_Write_Int@a+1
   703     03D9  083F               	movf	main@d3,w
   704     03DA  00A6               	movwf	Lcd_Write_Int@a
   705     03DB  20E3               	fcall	_Lcd_Write_Int
   706                           
   707                           ;main.c: 80:         _delay((unsigned long)((200)*(4000000/4000.0)));
   708     03DC  3002               	movlw	2
   709     03DD  00BA               	movwf	??_main+2
   710     03DE  3004               	movlw	4
   711     03DF  00B9               	movwf	??_main+1
   712     03E0  30BA               	movlw	186
   713     03E1  00B8               	movwf	??_main
   714     03E2                     u717:
   715     03E2  0BB8               	decfsz	??_main,f
   716     03E3  2BE2               	goto	u717
   717     03E4  0BB9               	decfsz	??_main+1,f
   718     03E5  2BE2               	goto	u717
   719     03E6  0BBA               	decfsz	??_main+2,f
   720     03E7  2BE2               	goto	u717
   721     03E8  0000               	nop
   722     03E9  2B5C               	goto	l1294
   723     03EA                     __end_of_main:
   724                           
   725                           	psect	text1
   726     026D                     __ptext1:	
   727 ;; *************** function _welcomeMessage *****************
   728 ;; Defined at:
   729 ;;		line 24 in file "main.c"
   730 ;; Parameters:    Size  Location     Type
   731 ;;		None
   732 ;; Auto vars:     Size  Location     Type
   733 ;;  msg             9   14[BANK0 ] unsigned char [9]
   734 ;; Return value:  Size  Location     Type
   735 ;;                  1    wreg      void 
   736 ;; Registers used:
   737 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   738 ;; Tracked objects:
   739 ;;		On entry : 100/0
   740 ;;		On exit  : 0/0
   741 ;;		Unchanged: 0/0
   742 ;; Data sizes:     COMMON   BANK0
   743 ;;      Params:         0       0
   744 ;;      Locals:         0       9
   745 ;;      Temps:          0       4
   746 ;;      Totals:         0      13
   747 ;;Total ram usage:       13 bytes
   748 ;; Hardware stack levels used: 1
   749 ;; Hardware stack levels required when called: 3
   750 ;; This function calls:
   751 ;;		_Lcd_Clear
   752 ;;		_Lcd_Set_Cursor
   753 ;;		_Lcd_Write_String
   754 ;;		_strcpy
   755 ;; This function is called by:
   756 ;;		_main
   757 ;; This function uses a non-reentrant model
   758 ;;
   759                           
   760     026D                     _welcomeMessage:	
   761                           ;psect for function _welcomeMessage
   762                           
   763                           
   764                           ;main.c: 26:     char msg[] = "WelcomeT";
   765                           
   766                           ;incstack = 0
   767                           ; Regs used in _welcomeMessage: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   768     026D  301A               	movlw	welcomeMessage@msg& (0+255)
   769     026E  0084               	movwf	4
   770     026F  3043               	movlw	low welcomeMessage@F325
   771     0270  0096               	movwf	??_welcomeMessage
   772     0271  0804               	movf	4,w
   773     0272  0097               	movwf	??_welcomeMessage+1
   774     0273  3009               	movlw	9
   775     0274  0098               	movwf	??_welcomeMessage+2
   776     0275                     u630:
   777     0275  0816               	movf	??_welcomeMessage,w
   778     0276  0084               	movwf	4
   779     0277  1383               	bcf	3,7	;select IRP bank0
   780     0278  0800               	movf	0,w
   781     0279  0099               	movwf	??_welcomeMessage+3
   782     027A  0A96               	incf	??_welcomeMessage,f
   783     027B  0817               	movf	??_welcomeMessage+1,w
   784     027C  0084               	movwf	4
   785     027D  0819               	movf	??_welcomeMessage+3,w
   786     027E  0080               	movwf	0
   787     027F  0A97               	incf	??_welcomeMessage+1,f
   788     0280  0B98               	decfsz	??_welcomeMessage+2,f
   789     0281  2A75               	goto	u630
   790                           
   791                           ;main.c: 27:     Lcd_Clear();
   792     0282  20F0               	fcall	_Lcd_Clear
   793                           
   794                           ;main.c: 28:     Lcd_Set_Cursor(1, 1);
   795     0283  1283               	bcf	3,5	;RP0=0, select bank0
   796     0284  0190               	clrf	Lcd_Set_Cursor@b
   797     0285  0A90               	incf	Lcd_Set_Cursor@b,f
   798     0286  3001               	movlw	1
   799     0287  21FF               	fcall	_Lcd_Set_Cursor
   800                           
   801                           ;main.c: 29:     Lcd_Write_String(msg);
   802     0288  301A               	movlw	(low (welcomeMessage@msg| 0))& (0+255)
   803     0289  213E               	fcall	_Lcd_Write_String
   804                           
   805                           ;main.c: 30:     _delay((unsigned long)((3000)*(4000000/4000.0)));
   806     028A  3010               	movlw	16
   807     028B  0098               	movwf	??_welcomeMessage+2
   808     028C  3039               	movlw	57
   809     028D  0097               	movwf	??_welcomeMessage+1
   810     028E  300D               	movlw	13
   811     028F  0096               	movwf	??_welcomeMessage
   812     0290                     u727:
   813     0290  0B96               	decfsz	??_welcomeMessage,f
   814     0291  2A90               	goto	u727
   815     0292  0B97               	decfsz	??_welcomeMessage+1,f
   816     0293  2A90               	goto	u727
   817     0294  0B98               	decfsz	??_welcomeMessage+2,f
   818     0295  2A90               	goto	u727
   819     0296  2A97               	nop2
   820                           
   821                           ;main.c: 31:     Lcd_Clear();
   822     0297  20F0               	fcall	_Lcd_Clear
   823                           
   824                           ;main.c: 32:     Lcd_Set_Cursor(1, 1);
   825     0298  1283               	bcf	3,5	;RP0=0, select bank0
   826     0299  0190               	clrf	Lcd_Set_Cursor@b
   827     029A  0A90               	incf	Lcd_Set_Cursor@b,f
   828     029B  3001               	movlw	1
   829     029C  21FF               	fcall	_Lcd_Set_Cursor
   830                           
   831                           ;main.c: 33:     strcpy(msg, "0-5V");
   832     029D  3001               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   833     029E  008C               	movwf	strcpy@from
   834     029F  301A               	movlw	(low (welcomeMessage@msg| 0))& (0+255)
   835     02A0  2126               	fcall	_strcpy
   836                           
   837                           ;main.c: 35:     Lcd_Write_String(msg);
   838     02A1  301A               	movlw	(low (welcomeMessage@msg| 0))& (0+255)
   839     02A2  213E               	fcall	_Lcd_Write_String
   840                           
   841                           ;main.c: 36:     _delay((unsigned long)((2000)*(4000000/4000.0)));
   842     02A3  300B               	movlw	11
   843     02A4  0098               	movwf	??_welcomeMessage+2
   844     02A5  3026               	movlw	38
   845     02A6  0097               	movwf	??_welcomeMessage+1
   846     02A7  305D               	movlw	93
   847     02A8  0096               	movwf	??_welcomeMessage
   848     02A9                     u737:
   849     02A9  0B96               	decfsz	??_welcomeMessage,f
   850     02AA  2AA9               	goto	u737
   851     02AB  0B97               	decfsz	??_welcomeMessage+1,f
   852     02AC  2AA9               	goto	u737
   853     02AD  0B98               	decfsz	??_welcomeMessage+2,f
   854     02AE  2AA9               	goto	u737
   855     02AF  2AB0               	nop2
   856                           
   857                           ;main.c: 39:     Lcd_Clear();
   858     02B0  20F0               	fcall	_Lcd_Clear
   859     02B1  0008               	return
   860     02B2                     __end_of_welcomeMessage:
   861                           
   862                           	psect	text2
   863     0126                     __ptext2:	
   864 ;; *************** function _strcpy *****************
   865 ;; Defined at:
   866 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\strcpy.c"
   867 ;; Parameters:    Size  Location     Type
   868 ;;  to              1    wreg     PTR unsigned char 
   869 ;;		 -> welcomeMessage@msg(9), 
   870 ;;  from            1    0[BANK0 ] PTR const unsigned char 
   871 ;;		 -> STR_1(5), 
   872 ;; Auto vars:     Size  Location     Type
   873 ;;  to              1    1[BANK0 ] PTR unsigned char 
   874 ;;		 -> welcomeMessage@msg(9), 
   875 ;;  cp              1    2[BANK0 ] PTR unsigned char 
   876 ;;		 -> welcomeMessage@msg(9), 
   877 ;; Return value:  Size  Location     Type
   878 ;;                  1    wreg      PTR unsigned char 
   879 ;; Registers used:
   880 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath
   881 ;; Tracked objects:
   882 ;;		On entry : 100/0
   883 ;;		On exit  : 900/0
   884 ;;		Unchanged: 0/0
   885 ;; Data sizes:     COMMON   BANK0
   886 ;;      Params:         0       1
   887 ;;      Locals:         0       2
   888 ;;      Temps:          0       0
   889 ;;      Totals:         0       3
   890 ;;Total ram usage:        3 bytes
   891 ;; Hardware stack levels used: 2
   892 ;; This function calls:
   893 ;;		Nothing
   894 ;; This function is called by:
   895 ;;		_welcomeMessage
   896 ;; This function uses a non-reentrant model
   897 ;;
   898                           
   899     0126                     _strcpy:	
   900                           ;psect for function _strcpy
   901                           
   902                           
   903                           ;incstack = 0
   904                           ; Regs used in _strcpy: [wreg-fsr0h+status,2+status,0+btemp+1+pclath]
   905                           ;strcpy@to stored from wreg
   906     0126  008D               	movwf	strcpy@to
   907     0127  080D               	movf	strcpy@to,w
   908     0128  008E               	movwf	strcpy@cp
   909     0129                     l1152:
   910     0129  080C               	movf	strcpy@from,w
   911     012A  0084               	movwf	4
   912     012B  2001               	fcall	stringdir
   913     012C  00CF               	movwf	79
   914     012D  080E               	movf	strcpy@cp,w
   915     012E  0084               	movwf	4
   916     012F  084F               	movf	79,w
   917     0130  1383               	bcf	3,7	;select IRP bank0
   918     0131  0080               	movwf	0
   919     0132  0800               	movf	0,w
   920     0133  1903               	btfsc	3,2
   921     0134  0008               	return
   922     0135  3001               	movlw	1
   923     0136  00CF               	movwf	79
   924     0137  084F               	movf	79,w
   925     0138  078E               	addwf	strcpy@cp,f
   926     0139  3001               	movlw	1
   927     013A  00CF               	movwf	79
   928     013B  084F               	movf	79,w
   929     013C  078C               	addwf	strcpy@from,f
   930     013D  2929               	goto	l1152
   931     013E                     __end_of_strcpy:
   932                           
   933                           	psect	text3
   934     01FF                     __ptext3:	
   935 ;; *************** function _Lcd_Set_Cursor *****************
   936 ;; Defined at:
   937 ;;		line 52 in file "lcd.c"
   938 ;; Parameters:    Size  Location     Type
   939 ;;  a               1    wreg     unsigned char 
   940 ;;  b               1    4[BANK0 ] unsigned char 
   941 ;; Auto vars:     Size  Location     Type
   942 ;;  a               1    6[BANK0 ] unsigned char 
   943 ;;  temp            1    9[BANK0 ] unsigned char 
   944 ;;  y               1    8[BANK0 ] unsigned char 
   945 ;;  z               1    7[BANK0 ] unsigned char 
   946 ;; Return value:  Size  Location     Type
   947 ;;                  1    wreg      void 
   948 ;; Registers used:
   949 ;;		wreg, status,2, status,0, pclath, cstack
   950 ;; Tracked objects:
   951 ;;		On entry : 100/0
   952 ;;		On exit  : 100/0
   953 ;;		Unchanged: 0/0
   954 ;; Data sizes:     COMMON   BANK0
   955 ;;      Params:         0       1
   956 ;;      Locals:         0       4
   957 ;;      Temps:          0       1
   958 ;;      Totals:         0       6
   959 ;;Total ram usage:        6 bytes
   960 ;; Hardware stack levels used: 1
   961 ;; Hardware stack levels required when called: 2
   962 ;; This function calls:
   963 ;;		_Lcd_Cmd
   964 ;; This function is called by:
   965 ;;		_welcomeMessage
   966 ;;		_main
   967 ;; This function uses a non-reentrant model
   968 ;;
   969                           
   970     01FF                     _Lcd_Set_Cursor:	
   971                           ;psect for function _Lcd_Set_Cursor
   972                           
   973                           
   974                           ;incstack = 0
   975                           ; Regs used in _Lcd_Set_Cursor: [wreg+status,2+status,0+pclath+cstack]
   976                           ;Lcd_Set_Cursor@a stored from wreg
   977     01FF  0092               	movwf	Lcd_Set_Cursor@a
   978                           
   979                           ;lcd.c: 52: void Lcd_Set_Cursor(char a, char b);lcd.c: 53: {;lcd.c: 54:  char temp,z,y;;
      +                          lcd.c: 55:  if(a == 1)
   980     0200  0312               	decf	Lcd_Set_Cursor@a,w
   981     0201  1D03               	btfss	3,2
   982     0202  2A18               	goto	l1130
   983                           
   984                           ;lcd.c: 56:  {;lcd.c: 57:    temp = (char) (0x80 + b - 1);
   985     0203  0810               	movf	Lcd_Set_Cursor@b,w
   986     0204  3E7F               	addlw	127
   987     0205  0095               	movwf	Lcd_Set_Cursor@temp
   988                           
   989                           ;lcd.c: 58:   z = temp>>4;
   990     0206  0815               	movf	Lcd_Set_Cursor@temp,w
   991     0207  0091               	movwf	??_Lcd_Set_Cursor
   992     0208  3004               	movlw	4
   993     0209                     u555:
   994     0209  1003               	clrc
   995     020A  0C91               	rrf	??_Lcd_Set_Cursor,f
   996     020B  3EFF               	addlw	-1
   997     020C  1D03               	skipz
   998     020D  2A09               	goto	u555
   999     020E  0811               	movf	??_Lcd_Set_Cursor,w
  1000     020F  0093               	movwf	Lcd_Set_Cursor@z
  1001                           
  1002                           ;lcd.c: 59:   y = temp & 0x0F;
  1003     0210  0815               	movf	Lcd_Set_Cursor@temp,w
  1004     0211  390F               	andlw	15
  1005     0212  0094               	movwf	Lcd_Set_Cursor@y
  1006                           
  1007                           ;lcd.c: 60:   Lcd_Cmd(z);
  1008     0213  0813               	movf	Lcd_Set_Cursor@z,w
  1009     0214  20FE               	fcall	_Lcd_Cmd
  1010                           
  1011                           ;lcd.c: 61:   Lcd_Cmd(y);
  1012     0215  0814               	movf	Lcd_Set_Cursor@y,w
  1013     0216  20FE               	fcall	_Lcd_Cmd
  1014                           
  1015                           ;lcd.c: 62:  }
  1016     0217  0008               	return
  1017     0218                     l1130:
  1018     0218  3002               	movlw	2
  1019     0219  0612               	xorwf	Lcd_Set_Cursor@a,w
  1020     021A  1D03               	btfss	3,2
  1021     021B  0008               	return
  1022                           
  1023                           ;lcd.c: 64:  {;lcd.c: 65:   temp = 0xC0 + b - 1;
  1024     021C  0810               	movf	Lcd_Set_Cursor@b,w
  1025     021D  3EBF               	addlw	191
  1026     021E  0095               	movwf	Lcd_Set_Cursor@temp
  1027                           
  1028                           ;lcd.c: 66:   z = temp>>4;
  1029     021F  0815               	movf	Lcd_Set_Cursor@temp,w
  1030     0220  0091               	movwf	??_Lcd_Set_Cursor
  1031     0221  3004               	movlw	4
  1032     0222                     u575:
  1033     0222  1003               	clrc
  1034     0223  0C91               	rrf	??_Lcd_Set_Cursor,f
  1035     0224  3EFF               	addlw	-1
  1036     0225  1D03               	skipz
  1037     0226  2A22               	goto	u575
  1038     0227  0811               	movf	??_Lcd_Set_Cursor,w
  1039     0228  0093               	movwf	Lcd_Set_Cursor@z
  1040                           
  1041                           ;lcd.c: 67:   y = temp & 0x0F;
  1042     0229  0815               	movf	Lcd_Set_Cursor@temp,w
  1043     022A  390F               	andlw	15
  1044     022B  0094               	movwf	Lcd_Set_Cursor@y
  1045                           
  1046                           ;lcd.c: 68:   Lcd_Cmd(z);
  1047     022C  0813               	movf	Lcd_Set_Cursor@z,w
  1048     022D  20FE               	fcall	_Lcd_Cmd
  1049                           
  1050                           ;lcd.c: 69:   Lcd_Cmd(y);
  1051     022E  0814               	movf	Lcd_Set_Cursor@y,w
  1052     022F  20FE               	fcall	_Lcd_Cmd
  1053     0230  0008               	return
  1054     0231                     __end_of_Lcd_Set_Cursor:
  1055                           
  1056                           	psect	text4
  1057     00F0                     __ptext4:	
  1058 ;; *************** function _Lcd_Clear *****************
  1059 ;; Defined at:
  1060 ;;		line 44 in file "lcd.c"
  1061 ;; Parameters:    Size  Location     Type
  1062 ;;		None
  1063 ;; Auto vars:     Size  Location     Type
  1064 ;;		None
  1065 ;; Return value:  Size  Location     Type
  1066 ;;                  1    wreg      void 
  1067 ;; Registers used:
  1068 ;;		wreg, status,2, status,0, pclath, cstack
  1069 ;; Tracked objects:
  1070 ;;		On entry : 0/0
  1071 ;;		On exit  : 0/0
  1072 ;;		Unchanged: 0/0
  1073 ;; Data sizes:     COMMON   BANK0
  1074 ;;      Params:         0       0
  1075 ;;      Locals:         0       0
  1076 ;;      Temps:          0       2
  1077 ;;      Totals:         0       2
  1078 ;;Total ram usage:        2 bytes
  1079 ;; Hardware stack levels used: 1
  1080 ;; Hardware stack levels required when called: 2
  1081 ;; This function calls:
  1082 ;;		_Lcd_Cmd
  1083 ;; This function is called by:
  1084 ;;		_welcomeMessage
  1085 ;;		_main
  1086 ;; This function uses a non-reentrant model
  1087 ;;
  1088                           
  1089     00F0                     _Lcd_Clear:	
  1090                           ;psect for function _Lcd_Clear
  1091                           
  1092                           
  1093                           ;lcd.c: 46:  Lcd_Cmd(0x00);
  1094                           
  1095                           ;incstack = 0
  1096                           ; Regs used in _Lcd_Clear: [wreg+status,2+status,0+pclath+cstack]
  1097     00F0  3000               	movlw	0
  1098     00F1  20FE               	fcall	_Lcd_Cmd
  1099                           
  1100                           ;lcd.c: 47:  Lcd_Cmd(0x01);
  1101     00F2  3001               	movlw	1
  1102     00F3  20FE               	fcall	_Lcd_Cmd
  1103                           
  1104                           ;lcd.c: 48:     _delay((unsigned long)((2)*(4000000/4000.0)));
  1105     00F4  3003               	movlw	3
  1106     00F5  0091               	movwf	??_Lcd_Clear+1
  1107     00F6  3097               	movlw	151
  1108     00F7  0090               	movwf	??_Lcd_Clear
  1109     00F8                     u747:
  1110     00F8  0B90               	decfsz	??_Lcd_Clear,f
  1111     00F9  28F8               	goto	u747
  1112     00FA  0B91               	decfsz	??_Lcd_Clear+1,f
  1113     00FB  28F8               	goto	u747
  1114     00FC  28FD               	nop2
  1115     00FD  0008               	return
  1116     00FE                     __end_of_Lcd_Clear:
  1117                           
  1118                           	psect	text5
  1119     02B2                     __ptext5:	
  1120 ;; *************** function _readADC *****************
  1121 ;; Defined at:
  1122 ;;		line 6 in file "adc.c"
  1123 ;; Parameters:    Size  Location     Type
  1124 ;;		None
  1125 ;; Auto vars:     Size  Location     Type
  1126 ;;  volt            2    4[BANK0 ] unsigned int 
  1127 ;;  rxData          1    7[BANK0 ] unsigned char 
  1128 ;;  bits            1    6[BANK0 ] unsigned char 
  1129 ;; Return value:  Size  Location     Type
  1130 ;;                  2    0[BANK0 ] unsigned int 
  1131 ;; Registers used:
  1132 ;;		wreg, status,2, status,0, btemp+1
  1133 ;; Tracked objects:
  1134 ;;		On entry : 0/0
  1135 ;;		On exit  : 100/0
  1136 ;;		Unchanged: 0/0
  1137 ;; Data sizes:     COMMON   BANK0
  1138 ;;      Params:         0       2
  1139 ;;      Locals:         0       4
  1140 ;;      Temps:          0       2
  1141 ;;      Totals:         0       8
  1142 ;;Total ram usage:        8 bytes
  1143 ;; Hardware stack levels used: 1
  1144 ;; This function calls:
  1145 ;;		Nothing
  1146 ;; This function is called by:
  1147 ;;		_main
  1148 ;; This function uses a non-reentrant model
  1149 ;;
  1150                           
  1151     02B2                     _readADC:	
  1152                           ;psect for function _readADC
  1153                           
  1154                           
  1155                           ;adc.c: 8:   unsigned char bits;;adc.c: 9:   unsigned char rxData = 0;
  1156                           
  1157                           ;incstack = 0
  1158                           ; Regs used in _readADC: [wreg+status,2+status,0+btemp+1]
  1159     02B2  1283               	bcf	3,5	;RP0=0, select bank0
  1160     02B3  0193               	clrf	readADC@rxData
  1161                           
  1162                           ;adc.c: 12:   RB7 = 0;
  1163     02B4  1386               	bcf	6,7	;volatile
  1164                           
  1165                           ;adc.c: 15:   for (bits = 0; bits < 3; bits++)
  1166     02B5  0192               	clrf	readADC@bits
  1167     02B6                     l1220:
  1168                           
  1169                           ;adc.c: 16:   {;adc.c: 17:       _delay((unsigned long)((100)*(4000000/4000000.0)));
  1170     02B6  3021               	movlw	33
  1171     02B7  008E               	movwf	??_readADC
  1172     02B8                     u757:
  1173     02B8  0B8E               	decfsz	??_readADC,f
  1174     02B9  2AB8               	goto	u757
  1175                           
  1176                           ;adc.c: 18:       RB5 = 1;
  1177     02BA  1283               	bcf	3,5	;RP0=0, select bank0
  1178     02BB  1686               	bsf	6,5	;volatile
  1179                           
  1180                           ;adc.c: 19:       _delay((unsigned long)((100)*(4000000/4000000.0)));
  1181     02BC  3021               	movlw	33
  1182     02BD  008E               	movwf	??_readADC
  1183     02BE                     u767:
  1184     02BE  0B8E               	decfsz	??_readADC,f
  1185     02BF  2ABE               	goto	u767
  1186                           
  1187                           ;adc.c: 20:       RB5 = 0;
  1188     02C0  1283               	bcf	3,5	;RP0=0, select bank0
  1189     02C1  1286               	bcf	6,5	;volatile
  1190                           
  1191                           ;adc.c: 21:   }
  1192     02C2  3001               	movlw	1
  1193     02C3  00CF               	movwf	79
  1194     02C4  084F               	movf	79,w
  1195     02C5  0792               	addwf	readADC@bits,f
  1196     02C6  3003               	movlw	3
  1197     02C7  0212               	subwf	readADC@bits,w
  1198     02C8  1C03               	skipc
  1199     02C9  2AB6               	goto	l1220
  1200                           
  1201                           ;adc.c: 24:   for (bits = 0; bits < 8; bits++)
  1202     02CA  0192               	clrf	readADC@bits
  1203     02CB                     l1236:
  1204                           
  1205                           ;adc.c: 25:   {;adc.c: 27:     _delay((unsigned long)((100)*(4000000/4000000.0)));
  1206     02CB  3021               	movlw	33
  1207     02CC  008E               	movwf	??_readADC
  1208     02CD                     u777:
  1209     02CD  0B8E               	decfsz	??_readADC,f
  1210     02CE  2ACD               	goto	u777
  1211                           
  1212                           ;adc.c: 28:     RB5 = 1;
  1213     02CF  1283               	bcf	3,5	;RP0=0, select bank0
  1214     02D0  1686               	bsf	6,5	;volatile
  1215                           
  1216                           ;adc.c: 31:     rxData = rxData << 1;
  1217     02D1  0813               	movf	readADC@rxData,w
  1218     02D2  008E               	movwf	??_readADC
  1219     02D3  070E               	addwf	??_readADC,w
  1220     02D4  0093               	movwf	readADC@rxData
  1221                           
  1222                           ;adc.c: 34:     if(RB6 == 1)
  1223     02D5  1F06               	btfss	6,6	;volatile
  1224     02D6  2ADA               	goto	l1246
  1225                           
  1226                           ;adc.c: 35:       rxData = rxData | 0x01;
  1227     02D7  0813               	movf	readADC@rxData,w
  1228     02D8  3801               	iorlw	1
  1229     02D9  2ADC               	goto	L1
  1230     02DA                     l1246:
  1231                           
  1232                           ;adc.c: 37:       rxData = rxData & 0xfe;
  1233     02DA  0813               	movf	readADC@rxData,w
  1234     02DB  39FE               	andlw	254
  1235     02DC                     L1:
  1236     02DC  0093               	movwf	readADC@rxData
  1237                           
  1238                           ;adc.c: 39:     _delay((unsigned long)((100)*(4000000/4000000.0)));
  1239     02DD  3021               	movlw	33
  1240     02DE  008E               	movwf	??_readADC
  1241     02DF                     u787:
  1242     02DF  0B8E               	decfsz	??_readADC,f
  1243     02E0  2ADF               	goto	u787
  1244                           
  1245                           ;adc.c: 40:     RB5 = 0;
  1246     02E1  1283               	bcf	3,5	;RP0=0, select bank0
  1247     02E2  1286               	bcf	6,5	;volatile
  1248                           
  1249                           ;adc.c: 41:     }
  1250     02E3  3001               	movlw	1
  1251     02E4  00CF               	movwf	79
  1252     02E5  084F               	movf	79,w
  1253     02E6  0792               	addwf	readADC@bits,f
  1254     02E7  3008               	movlw	8
  1255     02E8  0212               	subwf	readADC@bits,w
  1256     02E9  1C03               	skipc
  1257     02EA  2ACB               	goto	l1236
  1258                           
  1259                           ;adc.c: 44:   RB7 = 1;
  1260     02EB  1786               	bsf	6,7	;volatile
  1261                           
  1262                           ;adc.c: 47:   volt = (rxData << 2);
  1263     02EC  0813               	movf	readADC@rxData,w
  1264     02ED  008E               	movwf	??_readADC
  1265     02EE  018F               	clrf	??_readADC+1
  1266     02EF  1003               	clrc
  1267     02F0  0D8E               	rlf	??_readADC,f
  1268     02F1  0D8F               	rlf	??_readADC+1,f
  1269     02F2  1003               	clrc
  1270     02F3  0D8E               	rlf	??_readADC,f
  1271     02F4  0D8F               	rlf	??_readADC+1,f
  1272     02F5  080E               	movf	??_readADC,w
  1273     02F6  0090               	movwf	readADC@volt
  1274     02F7  080F               	movf	??_readADC+1,w
  1275     02F8  0091               	movwf	readADC@volt+1
  1276                           
  1277                           ;adc.c: 48:   return volt;
  1278     02F9  0811               	movf	readADC@volt+1,w
  1279     02FA  008D               	movwf	?_readADC+1
  1280     02FB  0810               	movf	readADC@volt,w
  1281     02FC  008C               	movwf	?_readADC
  1282     02FD  0008               	return
  1283     02FE                     __end_of_readADC:
  1284                           
  1285                           	psect	text6
  1286     0158                     __ptext6:	
  1287 ;; *************** function ___wmul *****************
  1288 ;; Defined at:
  1289 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\Umul16.c"
  1290 ;; Parameters:    Size  Location     Type
  1291 ;;  multiplier      2    5[BANK0 ] unsigned int 
  1292 ;;  multiplicand    2    7[BANK0 ] unsigned int 
  1293 ;; Auto vars:     Size  Location     Type
  1294 ;;  product         2    9[BANK0 ] unsigned int 
  1295 ;; Return value:  Size  Location     Type
  1296 ;;                  2    5[BANK0 ] unsigned int 
  1297 ;; Registers used:
  1298 ;;		wreg, status,2, status,0
  1299 ;; Tracked objects:
  1300 ;;		On entry : 100/0
  1301 ;;		On exit  : 100/0
  1302 ;;		Unchanged: 0/0
  1303 ;; Data sizes:     COMMON   BANK0
  1304 ;;      Params:         0       4
  1305 ;;      Locals:         0       2
  1306 ;;      Temps:          0       0
  1307 ;;      Totals:         0       6
  1308 ;;Total ram usage:        6 bytes
  1309 ;; Hardware stack levels used: 1
  1310 ;; This function calls:
  1311 ;;		Nothing
  1312 ;; This function is called by:
  1313 ;;		_main
  1314 ;; This function uses a non-reentrant model
  1315 ;;
  1316                           
  1317     0158                     ___wmul:	
  1318                           ;psect for function ___wmul
  1319                           
  1320                           
  1321                           ;incstack = 0
  1322                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  1323     0158  0195               	clrf	___wmul@product
  1324     0159  0196               	clrf	___wmul@product+1
  1325     015A                     l1268:
  1326     015A  1C11               	btfss	___wmul@multiplier,0
  1327     015B  2962               	goto	l206
  1328     015C  0813               	movf	___wmul@multiplicand,w
  1329     015D  0795               	addwf	___wmul@product,f
  1330     015E  1803               	skipnc
  1331     015F  0A96               	incf	___wmul@product+1,f
  1332     0160  0814               	movf	___wmul@multiplicand+1,w
  1333     0161  0796               	addwf	___wmul@product+1,f
  1334     0162                     l206:
  1335     0162  3001               	movlw	1
  1336     0163                     u685:
  1337     0163  1003               	clrc
  1338     0164  0D93               	rlf	___wmul@multiplicand,f
  1339     0165  0D94               	rlf	___wmul@multiplicand+1,f
  1340     0166  3EFF               	addlw	-1
  1341     0167  1D03               	skipz
  1342     0168  2963               	goto	u685
  1343     0169  3001               	movlw	1
  1344     016A                     u695:
  1345     016A  1003               	clrc
  1346     016B  0C92               	rrf	___wmul@multiplier+1,f
  1347     016C  0C91               	rrf	___wmul@multiplier,f
  1348     016D  3EFF               	addlw	-1
  1349     016E  1D03               	skipz
  1350     016F  296A               	goto	u695
  1351     0170  0811               	movf	___wmul@multiplier,w
  1352     0171  0412               	iorwf	___wmul@multiplier+1,w
  1353     0172  1D03               	btfss	3,2
  1354     0173  295A               	goto	l1268
  1355     0174  0816               	movf	___wmul@product+1,w
  1356     0175  0092               	movwf	?___wmul+1
  1357     0176  0815               	movf	___wmul@product,w
  1358     0177  0091               	movwf	?___wmul
  1359     0178  0008               	return
  1360     0179                     __end_of___wmul:
  1361                           
  1362                           	psect	text7
  1363     00E3                     __ptext7:	
  1364 ;; *************** function _Lcd_Write_Int *****************
  1365 ;; Defined at:
  1366 ;;		line 121 in file "lcd.c"
  1367 ;; Parameters:    Size  Location     Type
  1368 ;;  a               2   26[BANK0 ] unsigned int 
  1369 ;; Auto vars:     Size  Location     Type
  1370 ;;  temp           16   28[BANK0 ] unsigned char [16]
  1371 ;; Return value:  Size  Location     Type
  1372 ;;                  1    wreg      void 
  1373 ;; Registers used:
  1374 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1375 ;; Tracked objects:
  1376 ;;		On entry : 100/0
  1377 ;;		On exit  : 900/0
  1378 ;;		Unchanged: 0/0
  1379 ;; Data sizes:     COMMON   BANK0
  1380 ;;      Params:         0       2
  1381 ;;      Locals:         0      16
  1382 ;;      Temps:          0       0
  1383 ;;      Totals:         0      18
  1384 ;;Total ram usage:       18 bytes
  1385 ;; Hardware stack levels used: 1
  1386 ;; Hardware stack levels required when called: 3
  1387 ;; This function calls:
  1388 ;;		_Lcd_Write_String
  1389 ;;		_utoa
  1390 ;; This function is called by:
  1391 ;;		_main
  1392 ;; This function uses a non-reentrant model
  1393 ;;
  1394                           
  1395     00E3                     _Lcd_Write_Int:	
  1396                           ;psect for function _Lcd_Write_Int
  1397                           
  1398                           
  1399                           ;lcd.c: 121: void Lcd_Write_Int(unsigned int a);lcd.c: 122: {;lcd.c: 123:     char temp[
      +                          16];;lcd.c: 124:     utoa((char*)temp, a, 10);
  1400                           
  1401                           ;incstack = 0
  1402                           ; Regs used in _Lcd_Write_Int: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1403     00E3  0827               	movf	Lcd_Write_Int@a+1,w
  1404     00E4  009F               	movwf	utoa@val+1
  1405     00E5  0826               	movf	Lcd_Write_Int@a,w
  1406     00E6  009E               	movwf	utoa@val
  1407     00E7  300A               	movlw	10
  1408     00E8  00A0               	movwf	utoa@base
  1409     00E9  3000               	movlw	0
  1410     00EA  00A1               	movwf	utoa@base+1
  1411     00EB  3028               	movlw	(low (Lcd_Write_Int@temp| 0))& (0+255)
  1412     00EC  22FE               	fcall	_utoa
  1413                           
  1414                           ;lcd.c: 125:     Lcd_Write_String(temp);
  1415     00ED  3028               	movlw	(low (Lcd_Write_Int@temp| 0))& (0+255)
  1416     00EE  213E               	fcall	_Lcd_Write_String
  1417     00EF  0008               	return
  1418     00F0                     __end_of_Lcd_Write_Int:
  1419                           
  1420                           	psect	text8
  1421     02FE                     __ptext8:	
  1422 ;; *************** function _utoa *****************
  1423 ;; Defined at:
  1424 ;;		line 17 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\itoa.c"
  1425 ;; Parameters:    Size  Location     Type
  1426 ;;  buf             1    wreg     PTR unsigned char 
  1427 ;;		 -> Lcd_Write_Int@temp(16), 
  1428 ;;  val             2   18[BANK0 ] unsigned int 
  1429 ;;  base            2   20[BANK0 ] int 
  1430 ;; Auto vars:     Size  Location     Type
  1431 ;;  buf             1   25[BANK0 ] PTR unsigned char 
  1432 ;;		 -> Lcd_Write_Int@temp(16), 
  1433 ;;  v               2   22[BANK0 ] unsigned int 
  1434 ;;  c               1   24[BANK0 ] unsigned char 
  1435 ;; Return value:  Size  Location     Type
  1436 ;;                  1    wreg      PTR unsigned char 
  1437 ;; Registers used:
  1438 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1439 ;; Tracked objects:
  1440 ;;		On entry : 100/0
  1441 ;;		On exit  : 900/0
  1442 ;;		Unchanged: 0/0
  1443 ;; Data sizes:     COMMON   BANK0
  1444 ;;      Params:         0       4
  1445 ;;      Locals:         0       4
  1446 ;;      Temps:          0       0
  1447 ;;      Totals:         0       8
  1448 ;;Total ram usage:        8 bytes
  1449 ;; Hardware stack levels used: 1
  1450 ;; Hardware stack levels required when called: 1
  1451 ;; This function calls:
  1452 ;;		___lwdiv
  1453 ;;		___lwmod
  1454 ;; This function is called by:
  1455 ;;		_Lcd_Write_Int
  1456 ;; This function uses a non-reentrant model
  1457 ;;
  1458                           
  1459     02FE                     _utoa:	
  1460                           ;psect for function _utoa
  1461                           
  1462                           
  1463                           ;incstack = 0
  1464                           ; Regs used in _utoa: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1465                           ;utoa@buf stored from wreg
  1466     02FE  00A5               	movwf	utoa@buf
  1467     02FF  081F               	movf	utoa@val+1,w
  1468     0300  00A3               	movwf	utoa@v+1
  1469     0301  081E               	movf	utoa@val,w
  1470     0302  00A2               	movwf	utoa@v
  1471     0303                     l1156:
  1472     0303  0821               	movf	utoa@base+1,w
  1473     0304  0098               	movwf	___lwdiv@divisor+1
  1474     0305  0820               	movf	utoa@base,w
  1475     0306  0097               	movwf	___lwdiv@divisor
  1476     0307  0823               	movf	utoa@v+1,w
  1477     0308  009A               	movwf	___lwdiv@dividend+1
  1478     0309  0822               	movf	utoa@v,w
  1479     030A  0099               	movwf	___lwdiv@dividend
  1480     030B  2231               	fcall	___lwdiv
  1481     030C  0818               	movf	?___lwdiv+1,w
  1482     030D  00A3               	movwf	utoa@v+1
  1483     030E  0817               	movf	?___lwdiv,w
  1484     030F  00A2               	movwf	utoa@v
  1485     0310  3001               	movlw	1
  1486     0311  00CF               	movwf	79
  1487     0312  084F               	movf	79,w
  1488     0313  07A5               	addwf	utoa@buf,f
  1489     0314  0822               	movf	utoa@v,w
  1490     0315  0423               	iorwf	utoa@v+1,w
  1491     0316  1D03               	btfss	3,2
  1492     0317  2B03               	goto	l1156
  1493     0318  0825               	movf	utoa@buf,w
  1494     0319  0084               	movwf	4
  1495     031A  1383               	bcf	3,7	;select IRP bank0
  1496     031B  0180               	clrf	0
  1497     031C  3001               	movlw	1
  1498     031D  02A5               	subwf	utoa@buf,f
  1499     031E                     l1166:
  1500     031E  0821               	movf	utoa@base+1,w
  1501     031F  008D               	movwf	___lwmod@divisor+1
  1502     0320  0820               	movf	utoa@base,w
  1503     0321  008C               	movwf	___lwmod@divisor
  1504     0322  081F               	movf	utoa@val+1,w
  1505     0323  008F               	movwf	___lwmod@dividend+1
  1506     0324  081E               	movf	utoa@val,w
  1507     0325  008E               	movwf	___lwmod@dividend
  1508     0326  21CD               	fcall	___lwmod
  1509     0327  080C               	movf	?___lwmod,w
  1510     0328  00A4               	movwf	utoa@c
  1511     0329  0821               	movf	utoa@base+1,w
  1512     032A  0098               	movwf	___lwdiv@divisor+1
  1513     032B  0820               	movf	utoa@base,w
  1514     032C  0097               	movwf	___lwdiv@divisor
  1515     032D  081F               	movf	utoa@val+1,w
  1516     032E  009A               	movwf	___lwdiv@dividend+1
  1517     032F  081E               	movf	utoa@val,w
  1518     0330  0099               	movwf	___lwdiv@dividend
  1519     0331  2231               	fcall	___lwdiv
  1520     0332  0818               	movf	?___lwdiv+1,w
  1521     0333  009F               	movwf	utoa@val+1
  1522     0334  0817               	movf	?___lwdiv,w
  1523     0335  009E               	movwf	utoa@val
  1524     0336  300A               	movlw	10
  1525     0337  0224               	subwf	utoa@c,w
  1526     0338  1C03               	skipc
  1527     0339  2B3E               	goto	l666
  1528     033A  3007               	movlw	7
  1529     033B  00CF               	movwf	79
  1530     033C  084F               	movf	79,w
  1531     033D  07A4               	addwf	utoa@c,f
  1532     033E                     l666:
  1533     033E  3030               	movlw	48
  1534     033F  00CF               	movwf	79
  1535     0340  084F               	movf	79,w
  1536     0341  07A4               	addwf	utoa@c,f
  1537     0342  0825               	movf	utoa@buf,w
  1538     0343  0084               	movwf	4
  1539     0344  0824               	movf	utoa@c,w
  1540     0345  1383               	bcf	3,7	;select IRP bank0
  1541     0346  0080               	movwf	0
  1542     0347  3001               	movlw	1
  1543     0348  02A5               	subwf	utoa@buf,f
  1544     0349  081E               	movf	utoa@val,w
  1545     034A  041F               	iorwf	utoa@val+1,w
  1546     034B  1D03               	btfss	3,2
  1547     034C  2B1E               	goto	l1166
  1548                           
  1549                           ;	Return value of _utoa is never used
  1550     034D  3001               	movlw	1
  1551     034E  00CF               	movwf	79
  1552     034F  084F               	movf	79,w
  1553     0350  07A5               	addwf	utoa@buf,f
  1554     0351  0008               	return
  1555     0352                     __end_of_utoa:
  1556                           
  1557                           	psect	text9
  1558     01CD                     __ptext9:	
  1559 ;; *************** function ___lwmod *****************
  1560 ;; Defined at:
  1561 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\lwmod.c"
  1562 ;; Parameters:    Size  Location     Type
  1563 ;;  divisor         2    0[BANK0 ] unsigned int 
  1564 ;;  dividend        2    2[BANK0 ] unsigned int 
  1565 ;; Auto vars:     Size  Location     Type
  1566 ;;  counter         1    4[BANK0 ] unsigned char 
  1567 ;; Return value:  Size  Location     Type
  1568 ;;                  2    0[BANK0 ] unsigned int 
  1569 ;; Registers used:
  1570 ;;		wreg, status,2, status,0, btemp+1
  1571 ;; Tracked objects:
  1572 ;;		On entry : 100/0
  1573 ;;		On exit  : 100/0
  1574 ;;		Unchanged: 0/0
  1575 ;; Data sizes:     COMMON   BANK0
  1576 ;;      Params:         0       4
  1577 ;;      Locals:         0       1
  1578 ;;      Temps:          0       0
  1579 ;;      Totals:         0       5
  1580 ;;Total ram usage:        5 bytes
  1581 ;; Hardware stack levels used: 1
  1582 ;; This function calls:
  1583 ;;		Nothing
  1584 ;; This function is called by:
  1585 ;;		_main
  1586 ;;		_utoa
  1587 ;; This function uses a non-reentrant model
  1588 ;;
  1589                           
  1590     01CD                     ___lwmod:	
  1591                           ;psect for function ___lwmod
  1592                           
  1593                           
  1594                           ;incstack = 0
  1595                           ; Regs used in ___lwmod: [wreg+status,2+status,0+btemp+1]
  1596     01CD  080C               	movf	___lwmod@divisor,w
  1597     01CE  040D               	iorwf	___lwmod@divisor+1,w
  1598     01CF  1903               	btfsc	3,2
  1599     01D0  29FA               	goto	l1112
  1600     01D1  0190               	clrf	___lwmod@counter
  1601     01D2  0A90               	incf	___lwmod@counter,f
  1602     01D3                     l1102:
  1603     01D3  1B8D               	btfsc	___lwmod@divisor+1,7
  1604     01D4  29E1               	goto	l1104
  1605     01D5  3001               	movlw	1
  1606     01D6                     u495:
  1607     01D6  1003               	clrc
  1608     01D7  0D8C               	rlf	___lwmod@divisor,f
  1609     01D8  0D8D               	rlf	___lwmod@divisor+1,f
  1610     01D9  3EFF               	addlw	-1
  1611     01DA  1D03               	skipz
  1612     01DB  29D6               	goto	u495
  1613     01DC  3001               	movlw	1
  1614     01DD  00CF               	movwf	79
  1615     01DE  084F               	movf	79,w
  1616     01DF  0790               	addwf	___lwmod@counter,f
  1617     01E0  29D3               	goto	l1102
  1618     01E1                     l1104:
  1619     01E1  080D               	movf	___lwmod@divisor+1,w
  1620     01E2  020F               	subwf	___lwmod@dividend+1,w
  1621     01E3  1D03               	skipz
  1622     01E4  29E7               	goto	u515
  1623     01E5  080C               	movf	___lwmod@divisor,w
  1624     01E6  020E               	subwf	___lwmod@dividend,w
  1625     01E7                     u515:
  1626     01E7  1C03               	skipc
  1627     01E8  29EF               	goto	l1108
  1628     01E9  080C               	movf	___lwmod@divisor,w
  1629     01EA  028E               	subwf	___lwmod@dividend,f
  1630     01EB  080D               	movf	___lwmod@divisor+1,w
  1631     01EC  1C03               	skipc
  1632     01ED  038F               	decf	___lwmod@dividend+1,f
  1633     01EE  028F               	subwf	___lwmod@dividend+1,f
  1634     01EF                     l1108:
  1635     01EF  3001               	movlw	1
  1636     01F0                     u525:
  1637     01F0  1003               	clrc
  1638     01F1  0C8D               	rrf	___lwmod@divisor+1,f
  1639     01F2  0C8C               	rrf	___lwmod@divisor,f
  1640     01F3  3EFF               	addlw	-1
  1641     01F4  1D03               	skipz
  1642     01F5  29F0               	goto	u525
  1643     01F6  3001               	movlw	1
  1644     01F7  0290               	subwf	___lwmod@counter,f
  1645     01F8  1D03               	btfss	3,2
  1646     01F9  29E1               	goto	l1104
  1647     01FA                     l1112:
  1648     01FA  080F               	movf	___lwmod@dividend+1,w
  1649     01FB  008D               	movwf	?___lwmod+1
  1650     01FC  080E               	movf	___lwmod@dividend,w
  1651     01FD  008C               	movwf	?___lwmod
  1652     01FE  0008               	return
  1653     01FF                     __end_of___lwmod:
  1654                           
  1655                           	psect	text10
  1656     0231                     __ptext10:	
  1657 ;; *************** function ___lwdiv *****************
  1658 ;; Defined at:
  1659 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\lwdiv.c"
  1660 ;; Parameters:    Size  Location     Type
  1661 ;;  divisor         2   11[BANK0 ] unsigned int 
  1662 ;;  dividend        2   13[BANK0 ] unsigned int 
  1663 ;; Auto vars:     Size  Location     Type
  1664 ;;  quotient        2   15[BANK0 ] unsigned int 
  1665 ;;  counter         1   17[BANK0 ] unsigned char 
  1666 ;; Return value:  Size  Location     Type
  1667 ;;                  2   11[BANK0 ] unsigned int 
  1668 ;; Registers used:
  1669 ;;		wreg, status,2, status,0, btemp+1
  1670 ;; Tracked objects:
  1671 ;;		On entry : 100/0
  1672 ;;		On exit  : 100/0
  1673 ;;		Unchanged: 0/0
  1674 ;; Data sizes:     COMMON   BANK0
  1675 ;;      Params:         0       4
  1676 ;;      Locals:         0       3
  1677 ;;      Temps:          0       0
  1678 ;;      Totals:         0       7
  1679 ;;Total ram usage:        7 bytes
  1680 ;; Hardware stack levels used: 1
  1681 ;; This function calls:
  1682 ;;		Nothing
  1683 ;; This function is called by:
  1684 ;;		_main
  1685 ;;		_utoa
  1686 ;; This function uses a non-reentrant model
  1687 ;;
  1688                           
  1689     0231                     ___lwdiv:	
  1690                           ;psect for function ___lwdiv
  1691                           
  1692                           
  1693                           ;incstack = 0
  1694                           ; Regs used in ___lwdiv: [wreg+status,2+status,0+btemp+1]
  1695     0231  019B               	clrf	___lwdiv@quotient
  1696     0232  019C               	clrf	___lwdiv@quotient+1
  1697     0233  0817               	movf	___lwdiv@divisor,w
  1698     0234  0418               	iorwf	___lwdiv@divisor+1,w
  1699     0235  1903               	btfsc	3,2
  1700     0236  2A68               	goto	l1090
  1701     0237  019D               	clrf	___lwdiv@counter
  1702     0238  0A9D               	incf	___lwdiv@counter,f
  1703     0239                     l1078:
  1704     0239  1B98               	btfsc	___lwdiv@divisor+1,7
  1705     023A  2A47               	goto	l1080
  1706     023B  3001               	movlw	1
  1707     023C                     u425:
  1708     023C  1003               	clrc
  1709     023D  0D97               	rlf	___lwdiv@divisor,f
  1710     023E  0D98               	rlf	___lwdiv@divisor+1,f
  1711     023F  3EFF               	addlw	-1
  1712     0240  1D03               	skipz
  1713     0241  2A3C               	goto	u425
  1714     0242  3001               	movlw	1
  1715     0243  00CF               	movwf	79
  1716     0244  084F               	movf	79,w
  1717     0245  079D               	addwf	___lwdiv@counter,f
  1718     0246  2A39               	goto	l1078
  1719     0247                     l1080:
  1720     0247  3001               	movlw	1
  1721     0248                     u445:
  1722     0248  1003               	clrc
  1723     0249  0D9B               	rlf	___lwdiv@quotient,f
  1724     024A  0D9C               	rlf	___lwdiv@quotient+1,f
  1725     024B  3EFF               	addlw	-1
  1726     024C  1D03               	skipz
  1727     024D  2A48               	goto	u445
  1728     024E  0818               	movf	___lwdiv@divisor+1,w
  1729     024F  021A               	subwf	___lwdiv@dividend+1,w
  1730     0250  1D03               	skipz
  1731     0251  2A54               	goto	u455
  1732     0252  0817               	movf	___lwdiv@divisor,w
  1733     0253  0219               	subwf	___lwdiv@dividend,w
  1734     0254                     u455:
  1735     0254  1C03               	skipc
  1736     0255  2A5D               	goto	l1086
  1737     0256  0817               	movf	___lwdiv@divisor,w
  1738     0257  0299               	subwf	___lwdiv@dividend,f
  1739     0258  0818               	movf	___lwdiv@divisor+1,w
  1740     0259  1C03               	skipc
  1741     025A  039A               	decf	___lwdiv@dividend+1,f
  1742     025B  029A               	subwf	___lwdiv@dividend+1,f
  1743     025C  141B               	bsf	___lwdiv@quotient,0
  1744     025D                     l1086:
  1745     025D  3001               	movlw	1
  1746     025E                     u465:
  1747     025E  1003               	clrc
  1748     025F  0C98               	rrf	___lwdiv@divisor+1,f
  1749     0260  0C97               	rrf	___lwdiv@divisor,f
  1750     0261  3EFF               	addlw	-1
  1751     0262  1D03               	skipz
  1752     0263  2A5E               	goto	u465
  1753     0264  3001               	movlw	1
  1754     0265  029D               	subwf	___lwdiv@counter,f
  1755     0266  1D03               	btfss	3,2
  1756     0267  2A47               	goto	l1080
  1757     0268                     l1090:
  1758     0268  081C               	movf	___lwdiv@quotient+1,w
  1759     0269  0098               	movwf	?___lwdiv+1
  1760     026A  081B               	movf	___lwdiv@quotient,w
  1761     026B  0097               	movwf	?___lwdiv
  1762     026C  0008               	return
  1763     026D                     __end_of___lwdiv:
  1764                           
  1765                           	psect	text11
  1766     013E                     __ptext11:	
  1767 ;; *************** function _Lcd_Write_String *****************
  1768 ;; Defined at:
  1769 ;;		line 111 in file "lcd.c"
  1770 ;; Parameters:    Size  Location     Type
  1771 ;;  a               1    wreg     PTR unsigned char 
  1772 ;;		 -> Lcd_Write_Int@temp(16), welcomeMessage@msg(9), 
  1773 ;; Auto vars:     Size  Location     Type
  1774 ;;  a               1    8[BANK0 ] PTR unsigned char 
  1775 ;;		 -> Lcd_Write_Int@temp(16), welcomeMessage@msg(9), 
  1776 ;;  i               2    6[BANK0 ] int 
  1777 ;; Return value:  Size  Location     Type
  1778 ;;                  1    wreg      void 
  1779 ;; Registers used:
  1780 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1781 ;; Tracked objects:
  1782 ;;		On entry : 100/0
  1783 ;;		On exit  : 900/0
  1784 ;;		Unchanged: 0/0
  1785 ;; Data sizes:     COMMON   BANK0
  1786 ;;      Params:         0       0
  1787 ;;      Locals:         0       3
  1788 ;;      Temps:          0       1
  1789 ;;      Totals:         0       4
  1790 ;;Total ram usage:        4 bytes
  1791 ;; Hardware stack levels used: 1
  1792 ;; Hardware stack levels required when called: 2
  1793 ;; This function calls:
  1794 ;;		_Lcd_Write_Char
  1795 ;; This function is called by:
  1796 ;;		_welcomeMessage
  1797 ;;		_Lcd_Write_Int
  1798 ;; This function uses a non-reentrant model
  1799 ;;
  1800                           
  1801     013E                     _Lcd_Write_String:	
  1802                           ;psect for function _Lcd_Write_String
  1803                           
  1804                           
  1805                           ;incstack = 0
  1806                           ; Regs used in _Lcd_Write_String: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1807                           ;Lcd_Write_String@a stored from wreg
  1808     013E  0094               	movwf	Lcd_Write_String@a
  1809                           
  1810                           ;lcd.c: 111: void Lcd_Write_String(char *a);lcd.c: 112: {;lcd.c: 113:  int i;;lcd.c: 114
      +                          :  for(i=0;a[i]!='\0';i++)
  1811     013F  0192               	clrf	Lcd_Write_String@i
  1812     0140  0193               	clrf	Lcd_Write_String@i+1
  1813     0141                     l1146:
  1814     0141  0812               	movf	Lcd_Write_String@i,w
  1815     0142  0714               	addwf	Lcd_Write_String@a,w
  1816     0143  0091               	movwf	??_Lcd_Write_String
  1817     0144  0811               	movf	??_Lcd_Write_String,w
  1818     0145  0084               	movwf	4
  1819     0146  1383               	bcf	3,7	;select IRP bank0
  1820     0147  0800               	movf	0,w
  1821     0148  1903               	btfsc	3,2
  1822     0149  0008               	return
  1823                           
  1824                           ;lcd.c: 115:     {;lcd.c: 116:         Lcd_Write_Char(a[i]);
  1825     014A  0812               	movf	Lcd_Write_String@i,w
  1826     014B  0714               	addwf	Lcd_Write_String@a,w
  1827     014C  0091               	movwf	??_Lcd_Write_String
  1828     014D  0811               	movf	??_Lcd_Write_String,w
  1829     014E  0084               	movwf	4
  1830     014F  0800               	movf	0,w
  1831     0150  2179               	fcall	_Lcd_Write_Char
  1832                           
  1833                           ;lcd.c: 117:     }
  1834     0151  3001               	movlw	1
  1835     0152  0792               	addwf	Lcd_Write_String@i,f
  1836     0153  1803               	skipnc
  1837     0154  0A93               	incf	Lcd_Write_String@i+1,f
  1838     0155  3000               	movlw	0
  1839     0156  0793               	addwf	Lcd_Write_String@i+1,f
  1840     0157  2941               	goto	l1146
  1841     0158                     __end_of_Lcd_Write_String:
  1842                           
  1843                           	psect	text12
  1844     0179                     __ptext12:	
  1845 ;; *************** function _Lcd_Write_Char *****************
  1846 ;; Defined at:
  1847 ;;		line 94 in file "lcd.c"
  1848 ;; Parameters:    Size  Location     Type
  1849 ;;  a               1    wreg     unsigned char 
  1850 ;; Auto vars:     Size  Location     Type
  1851 ;;  a               1    4[BANK0 ] unsigned char 
  1852 ;;  y               1    3[BANK0 ] unsigned char 
  1853 ;;  temp            1    2[BANK0 ] unsigned char 
  1854 ;; Return value:  Size  Location     Type
  1855 ;;                  1    wreg      void 
  1856 ;; Registers used:
  1857 ;;		wreg, status,2, status,0, pclath, cstack
  1858 ;; Tracked objects:
  1859 ;;		On entry : 100/0
  1860 ;;		On exit  : 100/0
  1861 ;;		Unchanged: 0/0
  1862 ;; Data sizes:     COMMON   BANK0
  1863 ;;      Params:         0       0
  1864 ;;      Locals:         0       3
  1865 ;;      Temps:          0       1
  1866 ;;      Totals:         0       4
  1867 ;;Total ram usage:        4 bytes
  1868 ;; Hardware stack levels used: 1
  1869 ;; Hardware stack levels required when called: 1
  1870 ;; This function calls:
  1871 ;;		_Lcd_Port
  1872 ;; This function is called by:
  1873 ;;		_main
  1874 ;;		_Lcd_Write_String
  1875 ;; This function uses a non-reentrant model
  1876 ;;
  1877                           
  1878     0179                     _Lcd_Write_Char:	
  1879                           ;psect for function _Lcd_Write_Char
  1880                           
  1881                           
  1882                           ;incstack = 0
  1883                           ; Regs used in _Lcd_Write_Char: [wreg+status,2+status,0+pclath+cstack]
  1884                           ;Lcd_Write_Char@a stored from wreg
  1885     0179  0090               	movwf	Lcd_Write_Char@a
  1886                           
  1887                           ;lcd.c: 94: void Lcd_Write_Char(char a);lcd.c: 95: {;lcd.c: 96:    char temp,y;;lcd.c: 9
      +                          7:    temp = a&0x0F;
  1888     017A  0810               	movf	Lcd_Write_Char@a,w
  1889     017B  390F               	andlw	15
  1890     017C  008E               	movwf	Lcd_Write_Char@temp
  1891                           
  1892                           ;lcd.c: 98:    y = a&0xF0;
  1893     017D  0810               	movf	Lcd_Write_Char@a,w
  1894     017E  39F0               	andlw	240
  1895     017F  008F               	movwf	Lcd_Write_Char@y
  1896                           
  1897                           ;lcd.c: 99:    RA0 = 1;
  1898     0180  1405               	bsf	5,0	;volatile
  1899                           
  1900                           ;lcd.c: 100:    Lcd_Port(y>>4);
  1901     0181  080F               	movf	Lcd_Write_Char@y,w
  1902     0182  008D               	movwf	??_Lcd_Write_Char
  1903     0183  3004               	movlw	4
  1904     0184                     u405:
  1905     0184  1003               	clrc
  1906     0185  0C8D               	rrf	??_Lcd_Write_Char,f
  1907     0186  3EFF               	addlw	-1
  1908     0187  1D03               	skipz
  1909     0188  2984               	goto	u405
  1910     0189  080D               	movf	??_Lcd_Write_Char,w
  1911     018A  2110               	fcall	_Lcd_Port
  1912                           
  1913                           ;lcd.c: 101:    RA2 = 1;
  1914     018B  1505               	bsf	5,2	;volatile
  1915                           
  1916                           ;lcd.c: 102:    _delay((unsigned long)((40)*(4000000/4000000.0)));
  1917     018C  300D               	movlw	13
  1918     018D  008D               	movwf	??_Lcd_Write_Char
  1919     018E                     u797:
  1920     018E  0B8D               	decfsz	??_Lcd_Write_Char,f
  1921     018F  298E               	goto	u797
  1922                           
  1923                           ;lcd.c: 103:    RA2 = 0;
  1924     0190  1283               	bcf	3,5	;RP0=0, select bank0
  1925     0191  1105               	bcf	5,2	;volatile
  1926                           
  1927                           ;lcd.c: 104:    Lcd_Port(temp);
  1928     0192  080E               	movf	Lcd_Write_Char@temp,w
  1929     0193  2110               	fcall	_Lcd_Port
  1930                           
  1931                           ;lcd.c: 105:    RA2 = 1;
  1932     0194  1505               	bsf	5,2	;volatile
  1933                           
  1934                           ;lcd.c: 106:    _delay((unsigned long)((40)*(4000000/4000000.0)));
  1935     0195  300D               	movlw	13
  1936     0196  008D               	movwf	??_Lcd_Write_Char
  1937     0197                     u807:
  1938     0197  0B8D               	decfsz	??_Lcd_Write_Char,f
  1939     0198  2997               	goto	u807
  1940                           
  1941                           ;lcd.c: 107:    RA2 = 0;
  1942     0199  1283               	bcf	3,5	;RP0=0, select bank0
  1943     019A  1105               	bcf	5,2	;volatile
  1944     019B  0008               	return
  1945     019C                     __end_of_Lcd_Write_Char:
  1946                           
  1947                           	psect	text13
  1948     019C                     __ptext13:	
  1949 ;; *************** function _Lcd_Init *****************
  1950 ;; Defined at:
  1951 ;;		line 74 in file "lcd.c"
  1952 ;; Parameters:    Size  Location     Type
  1953 ;;		None
  1954 ;; Auto vars:     Size  Location     Type
  1955 ;;		None
  1956 ;; Return value:  Size  Location     Type
  1957 ;;                  1    wreg      void 
  1958 ;; Registers used:
  1959 ;;		wreg, status,2, status,0, pclath, cstack
  1960 ;; Tracked objects:
  1961 ;;		On entry : B00/0
  1962 ;;		On exit  : 100/0
  1963 ;;		Unchanged: 0/0
  1964 ;; Data sizes:     COMMON   BANK0
  1965 ;;      Params:         0       0
  1966 ;;      Locals:         0       0
  1967 ;;      Temps:          0       2
  1968 ;;      Totals:         0       2
  1969 ;;Total ram usage:        2 bytes
  1970 ;; Hardware stack levels used: 1
  1971 ;; Hardware stack levels required when called: 2
  1972 ;; This function calls:
  1973 ;;		_Lcd_Cmd
  1974 ;;		_Lcd_Port
  1975 ;; This function is called by:
  1976 ;;		_main
  1977 ;; This function uses a non-reentrant model
  1978 ;;
  1979                           
  1980     019C                     _Lcd_Init:	
  1981                           ;psect for function _Lcd_Init
  1982                           
  1983                           
  1984                           ;lcd.c: 76:   Lcd_Port(0x00);
  1985                           
  1986                           ;incstack = 0
  1987                           ; Regs used in _Lcd_Init: [wreg+status,2+status,0+pclath+cstack]
  1988     019C  3000               	movlw	0
  1989     019D  2110               	fcall	_Lcd_Port
  1990                           
  1991                           ;lcd.c: 77:    _delay((unsigned long)((20)*(4000000/4000.0)));
  1992     019E  301A               	movlw	26
  1993     019F  0091               	movwf	??_Lcd_Init+1
  1994     01A0  30F8               	movlw	248
  1995     01A1  0090               	movwf	??_Lcd_Init
  1996     01A2                     u817:
  1997     01A2  0B90               	decfsz	??_Lcd_Init,f
  1998     01A3  29A2               	goto	u817
  1999     01A4  0B91               	decfsz	??_Lcd_Init+1,f
  2000     01A5  29A2               	goto	u817
  2001     01A6  0000               	nop
  2002                           
  2003                           ;lcd.c: 78:   Lcd_Cmd(0x03);
  2004     01A7  3003               	movlw	3
  2005     01A8  20FE               	fcall	_Lcd_Cmd
  2006                           
  2007                           ;lcd.c: 79:  _delay((unsigned long)((5)*(4000000/4000.0)));
  2008     01A9  3007               	movlw	7
  2009     01AA  0091               	movwf	??_Lcd_Init+1
  2010     01AB  307D               	movlw	125
  2011     01AC  0090               	movwf	??_Lcd_Init
  2012     01AD                     u827:
  2013     01AD  0B90               	decfsz	??_Lcd_Init,f
  2014     01AE  29AD               	goto	u827
  2015     01AF  0B91               	decfsz	??_Lcd_Init+1,f
  2016     01B0  29AD               	goto	u827
  2017                           
  2018                           ;lcd.c: 80:   Lcd_Cmd(0x03);
  2019     01B1  3003               	movlw	3
  2020     01B2  20FE               	fcall	_Lcd_Cmd
  2021                           
  2022                           ;lcd.c: 81:  _delay((unsigned long)((11)*(4000000/4000.0)));
  2023     01B3  300F               	movlw	15
  2024     01B4  0091               	movwf	??_Lcd_Init+1
  2025     01B5  3047               	movlw	71
  2026     01B6  0090               	movwf	??_Lcd_Init
  2027     01B7                     u837:
  2028     01B7  0B90               	decfsz	??_Lcd_Init,f
  2029     01B8  29B7               	goto	u837
  2030     01B9  0B91               	decfsz	??_Lcd_Init+1,f
  2031     01BA  29B7               	goto	u837
  2032     01BB  29BC               	nop2
  2033                           
  2034                           ;lcd.c: 82:   Lcd_Cmd(0x03);
  2035     01BC  3003               	movlw	3
  2036     01BD  20FE               	fcall	_Lcd_Cmd
  2037                           
  2038                           ;lcd.c: 84:   Lcd_Cmd(0x02);
  2039     01BE  3002               	movlw	2
  2040     01BF  20FE               	fcall	_Lcd_Cmd
  2041                           
  2042                           ;lcd.c: 85:   Lcd_Cmd(0x02);
  2043     01C0  3002               	movlw	2
  2044     01C1  20FE               	fcall	_Lcd_Cmd
  2045                           
  2046                           ;lcd.c: 86:   Lcd_Cmd(0x08);
  2047     01C2  3008               	movlw	8
  2048     01C3  20FE               	fcall	_Lcd_Cmd
  2049                           
  2050                           ;lcd.c: 87:   Lcd_Cmd(0x00);
  2051     01C4  3000               	movlw	0
  2052     01C5  20FE               	fcall	_Lcd_Cmd
  2053                           
  2054                           ;lcd.c: 88:   Lcd_Cmd(0x0C);
  2055     01C6  300C               	movlw	12
  2056     01C7  20FE               	fcall	_Lcd_Cmd
  2057                           
  2058                           ;lcd.c: 89:   Lcd_Cmd(0x00);
  2059     01C8  3000               	movlw	0
  2060     01C9  20FE               	fcall	_Lcd_Cmd
  2061                           
  2062                           ;lcd.c: 90:   Lcd_Cmd(0x06);
  2063     01CA  3006               	movlw	6
  2064     01CB  20FE               	fcall	_Lcd_Cmd
  2065     01CC  0008               	return
  2066     01CD                     __end_of_Lcd_Init:
  2067                           
  2068                           	psect	text14
  2069     00FE                     __ptext14:	
  2070 ;; *************** function _Lcd_Cmd *****************
  2071 ;; Defined at:
  2072 ;;		line 31 in file "lcd.c"
  2073 ;; Parameters:    Size  Location     Type
  2074 ;;  a               1    wreg     unsigned char 
  2075 ;; Auto vars:     Size  Location     Type
  2076 ;;  a               1    3[BANK0 ] unsigned char 
  2077 ;; Return value:  Size  Location     Type
  2078 ;;                  1    wreg      void 
  2079 ;; Registers used:
  2080 ;;		wreg, status,2, status,0, pclath, cstack
  2081 ;; Tracked objects:
  2082 ;;		On entry : 0/0
  2083 ;;		On exit  : 100/0
  2084 ;;		Unchanged: 0/0
  2085 ;; Data sizes:     COMMON   BANK0
  2086 ;;      Params:         0       0
  2087 ;;      Locals:         0       1
  2088 ;;      Temps:          0       2
  2089 ;;      Totals:         0       3
  2090 ;;Total ram usage:        3 bytes
  2091 ;; Hardware stack levels used: 1
  2092 ;; Hardware stack levels required when called: 1
  2093 ;; This function calls:
  2094 ;;		_Lcd_Port
  2095 ;; This function is called by:
  2096 ;;		_Lcd_Clear
  2097 ;;		_Lcd_Set_Cursor
  2098 ;;		_Lcd_Init
  2099 ;; This function uses a non-reentrant model
  2100 ;;
  2101                           
  2102     00FE                     _Lcd_Cmd:	
  2103                           ;psect for function _Lcd_Cmd
  2104                           
  2105                           
  2106                           ;incstack = 0
  2107                           ; Regs used in _Lcd_Cmd: [wreg+status,2+status,0+pclath+cstack]
  2108                           ;Lcd_Cmd@a stored from wreg
  2109     00FE  1283               	bcf	3,5	;RP0=0, select bank0
  2110     00FF  008F               	movwf	Lcd_Cmd@a
  2111                           
  2112                           ;lcd.c: 31: void Lcd_Cmd(char a);lcd.c: 32: {;lcd.c: 34:     RA0 = 0;
  2113     0100  1005               	bcf	5,0	;volatile
  2114                           
  2115                           ;lcd.c: 35:  Lcd_Port(a);
  2116     0101  080F               	movf	Lcd_Cmd@a,w
  2117     0102  2110               	fcall	_Lcd_Port
  2118                           
  2119                           ;lcd.c: 38:  RA2 = 1;
  2120     0103  1505               	bsf	5,2	;volatile
  2121                           
  2122                           ;lcd.c: 39:     _delay((unsigned long)((4)*(4000000/4000.0)));
  2123     0104  3006               	movlw	6
  2124     0105  008E               	movwf	??_Lcd_Cmd+1
  2125     0106  3030               	movlw	48
  2126     0107  008D               	movwf	??_Lcd_Cmd
  2127     0108                     u847:
  2128     0108  0B8D               	decfsz	??_Lcd_Cmd,f
  2129     0109  2908               	goto	u847
  2130     010A  0B8E               	decfsz	??_Lcd_Cmd+1,f
  2131     010B  2908               	goto	u847
  2132     010C  0000               	nop
  2133                           
  2134                           ;lcd.c: 40:     RA2 = 0;
  2135     010D  1283               	bcf	3,5	;RP0=0, select bank0
  2136     010E  1105               	bcf	5,2	;volatile
  2137     010F  0008               	return
  2138     0110                     __end_of_Lcd_Cmd:
  2139                           
  2140                           	psect	text15
  2141     0110                     __ptext15:	
  2142 ;; *************** function _Lcd_Port *****************
  2143 ;; Defined at:
  2144 ;;		line 7 in file "lcd.c"
  2145 ;; Parameters:    Size  Location     Type
  2146 ;;  a               1    wreg     unsigned char 
  2147 ;; Auto vars:     Size  Location     Type
  2148 ;;  a               1    0[BANK0 ] unsigned char 
  2149 ;; Return value:  Size  Location     Type
  2150 ;;                  1    wreg      void 
  2151 ;; Registers used:
  2152 ;;		wreg
  2153 ;; Tracked objects:
  2154 ;;		On entry : 100/0
  2155 ;;		On exit  : 100/0
  2156 ;;		Unchanged: 0/0
  2157 ;; Data sizes:     COMMON   BANK0
  2158 ;;      Params:         0       0
  2159 ;;      Locals:         0       1
  2160 ;;      Temps:          0       0
  2161 ;;      Totals:         0       1
  2162 ;;Total ram usage:        1 bytes
  2163 ;; Hardware stack levels used: 1
  2164 ;; This function calls:
  2165 ;;		Nothing
  2166 ;; This function is called by:
  2167 ;;		_Lcd_Cmd
  2168 ;;		_Lcd_Init
  2169 ;;		_Lcd_Write_Char
  2170 ;; This function uses a non-reentrant model
  2171 ;;
  2172                           
  2173     0110                     _Lcd_Port:	
  2174                           ;psect for function _Lcd_Port
  2175                           
  2176                           
  2177                           ;incstack = 0
  2178                           ; Regs used in _Lcd_Port: [wreg]
  2179                           ;Lcd_Port@a stored from wreg
  2180     0110  008C               	movwf	Lcd_Port@a
  2181                           
  2182                           ;lcd.c: 7: void Lcd_Port(char a);lcd.c: 8: {;lcd.c: 9:  if(a & 1)
  2183     0111  1C0C               	btfss	Lcd_Port@a,0
  2184     0112  2915               	goto	l62
  2185                           
  2186                           ;lcd.c: 10:   RB0 = 1;
  2187     0113  1406               	bsf	6,0	;volatile
  2188     0114  2916               	goto	l63
  2189     0115                     l62:	
  2190                           ;lcd.c: 11:  else
  2191                           
  2192                           
  2193                           ;lcd.c: 12:   RB0 = 0;
  2194     0115  1006               	bcf	6,0	;volatile
  2195     0116                     l63:
  2196                           
  2197                           ;lcd.c: 14:  if(a & 2)
  2198     0116  1C8C               	btfss	Lcd_Port@a,1
  2199     0117  291A               	goto	l64
  2200                           
  2201                           ;lcd.c: 15:   RB1 = 1;
  2202     0118  1486               	bsf	6,1	;volatile
  2203     0119  291B               	goto	l65
  2204     011A                     l64:	
  2205                           ;lcd.c: 16:  else
  2206                           
  2207                           
  2208                           ;lcd.c: 17:   RB1 = 0;
  2209     011A  1086               	bcf	6,1	;volatile
  2210     011B                     l65:
  2211                           
  2212                           ;lcd.c: 19:  if(a & 4)
  2213     011B  1D0C               	btfss	Lcd_Port@a,2
  2214     011C  291F               	goto	l66
  2215                           
  2216                           ;lcd.c: 20:   RB2 = 1;
  2217     011D  1506               	bsf	6,2	;volatile
  2218     011E  2920               	goto	l67
  2219     011F                     l66:	
  2220                           ;lcd.c: 21:  else
  2221                           
  2222                           
  2223                           ;lcd.c: 22:   RB2 = 0;
  2224     011F  1106               	bcf	6,2	;volatile
  2225     0120                     l67:
  2226                           
  2227                           ;lcd.c: 24:  if(a & 8)
  2228     0120  1D8C               	btfss	Lcd_Port@a,3
  2229     0121  2924               	goto	l68
  2230                           
  2231                           ;lcd.c: 25:   RB3 = 1;
  2232     0122  1586               	bsf	6,3	;volatile
  2233     0123  0008               	return
  2234     0124                     l68:	
  2235                           ;lcd.c: 26:  else
  2236                           
  2237                           
  2238                           ;lcd.c: 27:   RB3 = 0;
  2239     0124  1186               	bcf	6,3	;volatile
  2240     0125  0008               	return
  2241     0126                     __end_of_Lcd_Port:
  2242     004E                     btemp	set	78	;btemp
  2243     004E                     wtemp0	set	78
  2244                           
  2245                           	psect	config
  2246                           
  2247                           ;Config register CONFIG @ 0x2007
  2248                           ;	Oscillator Selection bits
  2249                           ;	FOSC = XT, XT oscillator
  2250                           ;	Watchdog Timer
  2251                           ;	WDTE = OFF, WDT disabled
  2252                           ;	Power-up Timer Enable bit
  2253                           ;	PWRTE = ON, Power-up Timer is enabled
  2254                           ;	Code Protection bit
  2255                           ;	CP = OFF, Code protection disabled
  2256     2007                     	org	8199
  2257     2007  3FF1               	dw	16369

Data Sizes:
    Strings     5
    Constant    0
    Data        9
    BSS         2
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON            0      0       0
    BANK0            66     55      66

Pointer List with Targets:

    strcpy@from	PTR const unsigned char  size(1) Largest target is 5
		 -> STR_1(CODE[5]), 

    strcpy@to	PTR unsigned char  size(1) Largest target is 9
		 -> welcomeMessage@msg(BANK0[9]), 

    strcpy@cp	PTR unsigned char  size(1) Largest target is 9
		 -> welcomeMessage@msg(BANK0[9]), 

    utoa@buf	PTR unsigned char  size(1) Largest target is 16
		 -> Lcd_Write_Int@temp(BANK0[16]), 

    sp__itoa	PTR unsigned char  size(1) Largest target is 0

    sp__utoa	PTR unsigned char  size(1) Largest target is 16
		 -> Lcd_Write_Int@temp(BANK0[16]), 

    Lcd_Write_String@a	PTR unsigned char  size(1) Largest target is 16
		 -> Lcd_Write_Int@temp(BANK0[16]), welcomeMessage@msg(BANK0[9]), 

    sp__strcpy	PTR unsigned char  size(1) Largest target is 9
		 -> welcomeMessage@msg(BANK0[9]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_Lcd_Write_Int
    _welcomeMessage->_Lcd_Set_Cursor
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Clear->_Lcd_Cmd
    ___wmul->___lwmod
    _Lcd_Write_Int->_utoa
    _utoa->___lwdiv
    ___lwdiv->___wmul
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Init->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                11    11      0    8125
                                             44 BANK0     11    11      0
                          _Lcd_Clear
                           _Lcd_Init
                     _Lcd_Set_Cursor
                     _Lcd_Write_Char
                      _Lcd_Write_Int
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _readADC
                     _welcomeMessage
 ---------------------------------------------------------------------------------
 (1) _welcomeMessage                                      13    13      0    1568
                                             10 BANK0     13    13      0
                          _Lcd_Clear
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
                             _strcpy
 ---------------------------------------------------------------------------------
 (3) _strcpy                                               3     2      1     184
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (2) _Lcd_Set_Cursor                                       6     5      1     836
                                              4 BANK0      6     5      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Clear                                            2     2      0     110
                                              4 BANK0      2     2      0
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _readADC                                              8     6      2     208
                                              0 BANK0      8     6      2
 ---------------------------------------------------------------------------------
 (1) ___wmul                                               6     2      4     548
                                              5 BANK0      6     2      4
                            ___lwmod (ARG)
 ---------------------------------------------------------------------------------
 (1) _Lcd_Write_Int                                       18    16      2    2850
                                             26 BANK0     18    16      2
                   _Lcd_Write_String
                               _utoa
 ---------------------------------------------------------------------------------
 (2) _utoa                                                 8     4      4    2183
                                             18 BANK0      8     4      4
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (1) ___lwmod                                              5     1      4     615
                                              0 BANK0      5     1      4
 ---------------------------------------------------------------------------------
 (1) ___lwdiv                                              7     3      4     922
                                             11 BANK0      7     3      4
                            ___lwmod (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_String                                     4     4      0     367
                                              5 BANK0      4     4      0
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (3) _Lcd_Write_Char                                       4     4      0     178
                                              1 BANK0      4     4      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             2     2      0     198
                                              4 BANK0      2     2      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (3) _Lcd_Cmd                                              3     3      0     110
                                              1 BANK0      3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (4) _Lcd_Port                                             1     1      0      88
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Lcd_Clear
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Init
     _Lcd_Cmd
     _Lcd_Port
   _Lcd_Set_Cursor
     _Lcd_Cmd
   _Lcd_Write_Char
     _Lcd_Port
   _Lcd_Write_Int
     _Lcd_Write_String
       _Lcd_Write_Char
     _utoa
       ___lwdiv
         ___lwmod (ARG)
         ___wmul (ARG)
           ___lwmod (ARG)
       ___lwmod
   ___lwdiv
   ___lwmod
   ___wmul
   _readADC
   _welcomeMessage
     _Lcd_Clear
     _Lcd_Set_Cursor
     _Lcd_Write_String
     _strcpy

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               42     37      42       3      100.0%
BITBANK0            42      0       0       5        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               0      0       0       1        0.0%
BITCOMMON            0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      42       6        0.0%
ABS                  0      0      42       4        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA              40      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.41 build 20230208172133 
Symbol Table                                                                                   Tue Apr 25 15:25:09 2023

                       pc 0002                        l62 0115                        l63 0116  
                      l64 011A                        l65 011B                        l66 011F  
                      l67 0120                        l68 0124                        fsr 0004  
     ___wmul@multiplicand 0013                       l206 0162                       l666 033E  
                     _RA0 0028                       _RA1 0029                       _RB0 0030  
                     _RA2 002A                       _RB1 0031                       _RB2 0032  
                     _RB3 0033                       _RB5 0035                       _RB6 0036  
                     _RB7 0037                       u405 0184                       u425 023C  
                     u515 01E7                       u445 0248                       u525 01F0  
                     u630 0275                       u455 0254                       u465 025E  
                     u555 0209                       u717 03E2                       u807 0197  
                     u495 01D6                       u575 0222                       u727 0290  
                     u817 01A2                       u737 02A9                       u827 01AD  
                     u747 00F8                       u837 01B7                       u685 0163  
                     u757 02B8                       u847 0108                       u695 016A  
                     u767 02BE                       u777 02CD                       u787 02DF  
                     u797 018E                       fsr0 0004                       indf 0000  
                    l1102 01D3                      l1104 01E1                      l1112 01FA  
                    l1130 0218                      l1108 01EF                      l1220 02B6  
                    l1080 0247                      l1152 0129                      l1146 0141  
                    l1090 0268                      l1156 0303                      l1236 02CB  
                    l1086 025D                      l1078 0239                      l1166 031E  
                    l1246 02DA                      l1268 015A                      l1294 035C  
                    STR_1 0007         ?_Lcd_Write_String 000C                      _main 0352  
                    btemp 004E                      _utoa 02FE                      start 0000  
      ??_Lcd_Write_String 0011           __end_of_Lcd_Cmd 0110                     ?_main 000C  
                   ?_utoa 001E           __end_of___lwdiv 026D           __end_of___lwmod 01FF  
                   _TRISA 0085                     _TRISB 0086               readADC@bits 0012  
         __end_of_readADC 02FE               readADC@volt 0010                     pclath 000A  
                   utoa@c 0024                     utoa@v 0022                     status 0003  
                   wtemp0 004E          __end_of_Lcd_Init 01CD          __end_of_Lcd_Port 0126  
         __initialization 03EA              __end_of_main 03EA              __end_of_utoa 0352  
                  ??_main 0038                    ??_utoa 0000                 ??_Lcd_Cmd 000D  
        ??_welcomeMessage 0016                    _adcVal 004C                    ___wmul 0158  
               ??___lwdiv 0000                 ??___lwmod 0000                    main@d1 003B  
                  main@d2 003D                    main@d3 003F                    _strcpy 0126  
   __end_of_Lcd_Write_Int 00F0                 ??_readADC 000E           Lcd_Set_Cursor@a 0012  
         Lcd_Set_Cursor@b 0010           Lcd_Set_Cursor@y 0014           Lcd_Set_Cursor@z 0013  
 __end_of__initialization 03FE         __end_of_Lcd_Clear 00FE            __pcstackCOMMON 0000  
            __pidataBANK0 00DA            _Lcd_Set_Cursor 01FF                 ?_Lcd_Init 000C  
               ?_Lcd_Port 000C            Lcd_Write_Int@a 0026                __pbssBANK0 004C  
              __pmaintext 0352                   ?___wmul 0011    __end_of_Lcd_Set_Cursor 0231  
                 ?_strcpy 000C                ??_Lcd_Init 0010                ??_Lcd_Port 0000  
              __stringtab 0001            _Lcd_Write_Char 0179                   _Lcd_Cmd 00FE  
                 ___lwdiv 0231                   ___lwmod 01CD             readADC@rxData 0013  
         ?_Lcd_Set_Cursor 0010                   __ptext1 026D                   __ptext2 0126  
                 __ptext3 01FF                   __ptext4 00F0                   __ptext5 02B2  
                 __ptext6 0158                   __ptext7 00E3                   __ptext8 02FE  
                 __ptext9 01CD                   _readADC 02B2    __end_of_Lcd_Write_Char 019C  
    end_of_initialization 03FE                 Lcd_Port@a 000C                   utoa@buf 0025  
       Lcd_Write_Int@temp 0028                   utoa@val 001E         welcomeMessage@msg 001A  
         ?_Lcd_Write_Char 000C         Lcd_Write_String@a 0014         Lcd_Write_String@i 0012  
               _Lcd_Clear 00F0            __end_of___wmul 0179          _Lcd_Write_String 013E  
          __end_of_strcpy 013E       start_initialization 03EA                ?_Lcd_Clear 000C  
                ??___wmul 0000               __pdataBANK0 0043           Lcd_Write_Char@a 0010  
         Lcd_Write_Char@y 000F                  ??_strcpy 0000                 ___latbits 0000  
           __pcstackBANK0 000C                  ?_Lcd_Cmd 000C          ___lwdiv@dividend 0019  
        ??_Lcd_Set_Cursor 0011                  ?___lwdiv 0017                  ?___lwmod 000C  
               __pstrings 0001                  ?_readADC 000C             _Lcd_Write_Int 00E3  
        ___lwdiv@quotient 001B            ___wmul@product 0015                  Lcd_Cmd@a 000F  
             ??_Lcd_Clear 0010               __stringbase 0006         ___wmul@multiplier 0011  
          ?_Lcd_Write_Int 0026          ??_Lcd_Write_Char 000D                  _Lcd_Init 019C  
                _Lcd_Port 0110  __end_of_Lcd_Write_String 0158        __end_of__stringtab 0007  
          _welcomeMessage 026D                  _main$764 0041           ___lwdiv@divisor 0017  
         ___lwdiv@counter 001D                  __ptext10 0231                  __ptext11 013E  
                __ptext12 0179                  __ptext13 019C                  __ptext14 00FE  
                __ptext15 0110                strcpy@from 000C           ??_Lcd_Write_Int 0000  
  __end_of_welcomeMessage 02B2        Lcd_Write_Char@temp 000E          ___lwmod@dividend 000E  
               stringcode 0001        Lcd_Set_Cursor@temp 0015           ?_welcomeMessage 000C  
                utoa@base 0020           ___lwmod@divisor 000C                  strcpy@cp 000E  
                strcpy@to 000D           ___lwmod@counter 0010                  stringdir 0001  
                stringtab 0001        welcomeMessage@F325 0043  



Microchip MPLAB XC8 Assembler V2.41 build 20230208172133 
                                                                                               Tue May 02 14:39:24 2023

Microchip MPLAB XC8 C Compiler v2.41 (Free license) build 20230208172133 Og9 
     1                           	processor	16F84A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2,noexec
     5                           	psect	strings,global,class=STRING,delta=2,noexec
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    11                           	psect	maintext,global,class=CODE,split=1,delta=2
    12                           	psect	text1,local,class=CODE,merge=1,delta=2
    13                           	psect	text2,local,class=CODE,merge=1,delta=2,group=2
    14                           	psect	text3,local,class=CODE,merge=1,delta=2
    15                           	psect	text4,local,class=CODE,merge=1,delta=2
    16                           	psect	text5,local,class=CODE,merge=1,delta=2
    17                           	psect	text6,local,class=CODE,merge=1,delta=2
    18                           	psect	text7,local,class=CODE,merge=1,delta=2,group=1
    19                           	psect	text8,local,class=CODE,merge=1,delta=2
    20                           	psect	text9,local,class=CODE,merge=1,delta=2,group=2
    21                           	psect	text10,local,class=CODE,merge=1,delta=2,group=1
    22                           	psect	text11,local,class=CODE,merge=1,delta=2,group=1
    23                           	psect	text12,local,class=CODE,merge=1,delta=2
    24                           	psect	text13,local,class=CODE,merge=1,delta=2
    25                           	psect	text14,local,class=CODE,merge=1,delta=2
    26                           	psect	text15,local,class=CODE,merge=1,delta=2
    27                           	psect	text16,local,class=CODE,merge=1,delta=2
    28                           	psect	text17,local,class=CODE,merge=1,delta=2
    29                           	psect	intentry,global,class=CODE,delta=2
    30                           	psect	text18,local,class=CODE,merge=1,delta=2
    31                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    32                           	dabs	1,0x4E,2
    33     0000                     
    34                           ; Version 2.20
    35                           ; Generated 12/02/2020 GMT
    36                           ; 
    37                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    38                           ; All rights reserved.
    39                           ; 
    40                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    41                           ; 
    42                           ; Redistribution and use in source and binary forms, with or without modification, are
    43                           ; permitted provided that the following conditions are met:
    44                           ; 
    45                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    46                           ;        conditions and the following disclaimer.
    47                           ; 
    48                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    49                           ;        of conditions and the following disclaimer in the documentation and/or other
    50                           ;        materials provided with the distribution.
    51                           ; 
    52                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    53                           ;        software without specific prior written permission.
    54                           ; 
    55                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    56                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    57                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    58                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    59                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    60                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    61                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    62                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    63                           ; 
    64                           ; 
    65                           ; Code-generator required, PIC16F84A Definitions
    66                           ; 
    67                           ; SFR Addresses
    68     0000                     	;# 
    69     0001                     	;# 
    70     0002                     	;# 
    71     0003                     	;# 
    72     0004                     	;# 
    73     0005                     	;# 
    74     0006                     	;# 
    75     0008                     	;# 
    76     0009                     	;# 
    77     000A                     	;# 
    78     000B                     	;# 
    79     0081                     	;# 
    80     0085                     	;# 
    81     0086                     	;# 
    82     0088                     	;# 
    83     0089                     	;# 
    84     0000                     	;# 
    85     0001                     	;# 
    86     0002                     	;# 
    87     0003                     	;# 
    88     0004                     	;# 
    89     0005                     	;# 
    90     0006                     	;# 
    91     0008                     	;# 
    92     0009                     	;# 
    93     000A                     	;# 
    94     000B                     	;# 
    95     0081                     	;# 
    96     0085                     	;# 
    97     0086                     	;# 
    98     0088                     	;# 
    99     0089                     	;# 
   100     0000                     	;# 
   101     0001                     	;# 
   102     0002                     	;# 
   103     0003                     	;# 
   104     0004                     	;# 
   105     0005                     	;# 
   106     0006                     	;# 
   107     0008                     	;# 
   108     0009                     	;# 
   109     000A                     	;# 
   110     000B                     	;# 
   111     0081                     	;# 
   112     0085                     	;# 
   113     0086                     	;# 
   114     0088                     	;# 
   115     0089                     	;# 
   116     0000                     	;# 
   117     0001                     	;# 
   118     0002                     	;# 
   119     0003                     	;# 
   120     0004                     	;# 
   121     0005                     	;# 
   122     0006                     	;# 
   123     0008                     	;# 
   124     0009                     	;# 
   125     000A                     	;# 
   126     000B                     	;# 
   127     0081                     	;# 
   128     0085                     	;# 
   129     0086                     	;# 
   130     0088                     	;# 
   131     0089                     	;# 
   132                           
   133                           	psect	idataBANK0
   134     0325                     __pidataBANK0:
   135                           
   136                           ;initializer for welcomeMessage@F328
   137     0325  3457               	retlw	87
   138     0326  3465               	retlw	101
   139     0327  346C               	retlw	108
   140     0328  3463               	retlw	99
   141     0329  346F               	retlw	111
   142     032A  346D               	retlw	109
   143     032B  3465               	retlw	101
   144     032C  3400               	retlw	0
   145     000B                     _INTCONbits	set	11
   146     0036                     _RB6	set	54
   147     002A                     _RA2	set	42
   148     0028                     _RA0	set	40
   149     0034                     _RB4	set	52
   150     0033                     _RB3	set	51
   151     0032                     _RB2	set	50
   152     0031                     _RB1	set	49
   153     0029                     _RA1	set	41
   154     0035                     _RB5	set	53
   155     0037                     _RB7	set	55
   156     0081                     _OPTION_REGbits	set	129
   157     0085                     _TRISA	set	133
   158     0086                     _TRISB	set	134
   159                           
   160                           	psect	strings
   161     031A                     __pstrings:
   162     031A                     stringtab:
   163     031A                     __stringtab:
   164     031A                     stringcode:	
   165                           ;	String table - string pointers are 1 byte each
   166                           
   167     031A                     stringdir:
   168     031A  3003               	movlw	high stringdir
   169     031B  008A               	movwf	10
   170     031C  0804               	movf	4,w
   171     031D  0A84               	incf	4,f
   172     031E  0782               	addwf	2,f
   173     031F                     __stringbase:
   174     031F  3400               	retlw	0
   175     0320                     __end_of__stringtab:
   176     0320                     STR_1:
   177     0320  3430               	retlw	48	;'0'
   178     0321  342D               	retlw	45	;'-'
   179     0322  3435               	retlw	53	;'5'
   180     0323  3456               	retlw	86	;'V'
   181     0324  3400               	retlw	0
   182                           
   183                           	psect	cinit
   184     000C                     start_initialization:	
   185                           ; #config settings
   186                           
   187     000C                     __initialization:
   188                           
   189                           ; Initialize objects allocated to BANK0
   190     000C  2325               	fcall	__pidataBANK0	;fetch initializer
   191     000D  00BB               	movwf	__pdataBANK0& (0+127)
   192     000E  2326               	fcall	__pidataBANK0+1	;fetch initializer
   193     000F  00BC               	movwf	(__pdataBANK0+1)& (0+127)
   194     0010  2327               	fcall	__pidataBANK0+2	;fetch initializer
   195     0011  00BD               	movwf	(__pdataBANK0+2)& (0+127)
   196     0012  2328               	fcall	__pidataBANK0+3	;fetch initializer
   197     0013  00BE               	movwf	(__pdataBANK0+3)& (0+127)
   198     0014  2329               	fcall	__pidataBANK0+4	;fetch initializer
   199     0015  00BF               	movwf	(__pdataBANK0+4)& (0+127)
   200     0016  232A               	fcall	__pidataBANK0+5	;fetch initializer
   201     0017  00C0               	movwf	(__pdataBANK0+5)& (0+127)
   202     0018  232B               	fcall	__pidataBANK0+6	;fetch initializer
   203     0019  00C1               	movwf	(__pdataBANK0+6)& (0+127)
   204     001A  232C               	fcall	__pidataBANK0+7	;fetch initializer
   205     001B  00C2               	movwf	(__pdataBANK0+7)& (0+127)
   206                           
   207                           ; Clear objects allocated to BANK0
   208     001C  01C3               	clrf	__pbssBANK0& (0+127)
   209     001D  01C4               	clrf	(__pbssBANK0+1)& (0+127)
   210     001E  01C5               	clrf	(__pbssBANK0+2)& (0+127)
   211     001F  01C6               	clrf	(__pbssBANK0+3)& (0+127)
   212     0020                     end_of_initialization:	
   213                           ;End of C runtime variable initialization code
   214                           
   215     0020                     __end_of__initialization:
   216     0020  0183               	clrf	3
   217     0021  2822               	ljmp	_main	;jump to C main() function
   218                           
   219                           	psect	bssBANK0
   220     0043                     __pbssBANK0:
   221     0043                     _toggleHold:
   222     0043                     	ds	2
   223     0045                     _adcVal:
   224     0045                     	ds	2
   225                           
   226                           	psect	dataBANK0
   227     003B                     __pdataBANK0:
   228     003B                     welcomeMessage@F328:
   229     003B                     	ds	8
   230                           
   231                           	psect	cstackCOMMON
   232     0000                     __pcstackCOMMON:
   233     0000                     ??_strcpy:
   234     0000                     ??_Lcd_Write_Int:	
   235                           ; 1 bytes @ 0x0
   236                           
   237     0000                     ??_utoa:	
   238                           ; 1 bytes @ 0x0
   239                           
   240     0000                     ??_main:	
   241                           ; 1 bytes @ 0x0
   242                           
   243     0000                     ??_Lcd_Port:	
   244                           ; 1 bytes @ 0x0
   245                           
   246     0000                     ??___wmul:	
   247                           ; 1 bytes @ 0x0
   248                           
   249     0000                     ??___lwdiv:	
   250                           ; 1 bytes @ 0x0
   251                           
   252     0000                     ??___lwmod:	
   253                           ; 1 bytes @ 0x0
   254                           
   255                           
   256                           	psect	cstackBANK0
   257     000C                     __pcstackBANK0:	
   258                           ; 1 bytes @ 0x0
   259                           
   260     000C                     ?_Lcd_Clear:
   261     000C                     ?_Lcd_Write_String:	
   262                           ; 1 bytes @ 0x0
   263                           
   264     000C                     ?_Lcd_Init:	
   265                           ; 1 bytes @ 0x0
   266                           
   267     000C                     ?_Lcd_Write_Char:	
   268                           ; 1 bytes @ 0x0
   269                           
   270     000C                     ?_delay:	
   271                           ; 1 bytes @ 0x0
   272                           
   273     000C                     ?_isr:	
   274                           ; 1 bytes @ 0x0
   275                           
   276     000C                     ?_welcomeMessage:	
   277                           ; 1 bytes @ 0x0
   278                           
   279     000C                     ?_main:	
   280                           ; 1 bytes @ 0x0
   281                           
   282     000C                     ?_Lcd_Port:	
   283                           ; 1 bytes @ 0x0
   284                           
   285     000C                     ?_Lcd_Cmd:	
   286                           ; 1 bytes @ 0x0
   287                           
   288     000C                     ?i1_delay:	
   289                           ; 1 bytes @ 0x0
   290                           
   291     000C                     ??i1_delay:	
   292                           ; 1 bytes @ 0x0
   293                           
   294                           
   295                           ; 1 bytes @ 0x0
   296     000C                     	ds	3
   297     000F                     ??_isr:
   298                           
   299                           ; 1 bytes @ 0x3
   300     000F                     	ds	2
   301     0011                     ?_strcpy:
   302     0011                     ??_delay:	
   303                           ; 1 bytes @ 0x5
   304                           
   305     0011                     ?_readADC:	
   306                           ; 1 bytes @ 0x5
   307                           
   308     0011                     ?___lwmod:	
   309                           ; 2 bytes @ 0x5
   310                           
   311     0011                     Lcd_Port@a:	
   312                           ; 2 bytes @ 0x5
   313                           
   314     0011                     strcpy@from:	
   315                           ; 1 bytes @ 0x5
   316                           
   317     0011                     ___lwmod@divisor:	
   318                           ; 1 bytes @ 0x5
   319                           
   320                           
   321                           ; 2 bytes @ 0x5
   322     0011                     	ds	1
   323     0012                     ??_Lcd_Write_Char:
   324     0012                     ??_Lcd_Cmd:	
   325                           ; 1 bytes @ 0x6
   326                           
   327     0012                     strcpy@to:	
   328                           ; 1 bytes @ 0x6
   329                           
   330                           
   331                           ; 1 bytes @ 0x6
   332     0012                     	ds	1
   333     0013                     ??_readADC:
   334     0013                     Lcd_Write_Char@temp:	
   335                           ; 1 bytes @ 0x7
   336                           
   337     0013                     strcpy@cp:	
   338                           ; 1 bytes @ 0x7
   339                           
   340     0013                     ___lwmod@dividend:	
   341                           ; 1 bytes @ 0x7
   342                           
   343                           
   344                           ; 2 bytes @ 0x7
   345     0013                     	ds	1
   346     0014                     Lcd_Cmd@a:
   347     0014                     Lcd_Write_Char@y:	
   348                           ; 1 bytes @ 0x8
   349                           
   350                           
   351                           ; 1 bytes @ 0x8
   352     0014                     	ds	1
   353     0015                     ??_Lcd_Clear:
   354     0015                     ?_Lcd_Set_Cursor:	
   355                           ; 1 bytes @ 0x9
   356                           
   357     0015                     ??_Lcd_Init:	
   358                           ; 1 bytes @ 0x9
   359                           
   360     0015                     Lcd_Set_Cursor@b:	
   361                           ; 1 bytes @ 0x9
   362                           
   363     0015                     Lcd_Write_Char@a:	
   364                           ; 1 bytes @ 0x9
   365                           
   366     0015                     ___lwmod@counter:	
   367                           ; 1 bytes @ 0x9
   368                           
   369     0015                     readADC@volt:	
   370                           ; 1 bytes @ 0x9
   371                           
   372                           
   373                           ; 2 bytes @ 0x9
   374     0015                     	ds	1
   375     0016                     ??_Lcd_Set_Cursor:
   376     0016                     ??_Lcd_Write_String:	
   377                           ; 1 bytes @ 0xA
   378                           
   379     0016                     ?___lwdiv:	
   380                           ; 1 bytes @ 0xA
   381                           
   382     0016                     ___lwdiv@divisor:	
   383                           ; 2 bytes @ 0xA
   384                           
   385                           
   386                           ; 2 bytes @ 0xA
   387     0016                     	ds	1
   388     0017                     Lcd_Set_Cursor@a:
   389     0017                     readADC@bits:	
   390                           ; 1 bytes @ 0xB
   391                           
   392     0017                     Lcd_Write_String@i:	
   393                           ; 1 bytes @ 0xB
   394                           
   395                           
   396                           ; 2 bytes @ 0xB
   397     0017                     	ds	1
   398     0018                     Lcd_Set_Cursor@z:
   399     0018                     readADC@rxData:	
   400                           ; 1 bytes @ 0xC
   401                           
   402     0018                     ___lwdiv@dividend:	
   403                           ; 1 bytes @ 0xC
   404                           
   405                           
   406                           ; 2 bytes @ 0xC
   407     0018                     	ds	1
   408     0019                     Lcd_Set_Cursor@y:
   409     0019                     Lcd_Write_String@a:	
   410                           ; 1 bytes @ 0xD
   411                           
   412                           
   413                           ; 1 bytes @ 0xD
   414     0019                     	ds	1
   415     001A                     Lcd_Set_Cursor@temp:
   416     001A                     ___lwdiv@quotient:	
   417                           ; 1 bytes @ 0xE
   418                           
   419                           
   420                           ; 2 bytes @ 0xE
   421     001A                     	ds	1
   422     001B                     ??_welcomeMessage:
   423                           
   424                           ; 1 bytes @ 0xF
   425     001B                     	ds	1
   426     001C                     ___lwdiv@counter:
   427                           
   428                           ; 1 bytes @ 0x10
   429     001C                     	ds	1
   430     001D                     ?_utoa:
   431     001D                     ?___wmul:	
   432                           ; 1 bytes @ 0x11
   433                           
   434     001D                     ___wmul@multiplier:	
   435                           ; 2 bytes @ 0x11
   436                           
   437     001D                     utoa@val:	
   438                           ; 2 bytes @ 0x11
   439                           
   440                           
   441                           ; 2 bytes @ 0x11
   442     001D                     	ds	2
   443     001F                     ___wmul@multiplicand:
   444     001F                     utoa@base:	
   445                           ; 2 bytes @ 0x13
   446                           
   447     001F                     welcomeMessage@msg:	
   448                           ; 2 bytes @ 0x13
   449                           
   450                           
   451                           ; 8 bytes @ 0x13
   452     001F                     	ds	2
   453     0021                     ___wmul@product:
   454     0021                     utoa@v:	
   455                           ; 2 bytes @ 0x15
   456                           
   457                           
   458                           ; 2 bytes @ 0x15
   459     0021                     	ds	2
   460     0023                     utoa@c:
   461                           
   462                           ; 1 bytes @ 0x17
   463     0023                     	ds	1
   464     0024                     utoa@buf:
   465                           
   466                           ; 1 bytes @ 0x18
   467     0024                     	ds	1
   468     0025                     ?_Lcd_Write_Int:
   469     0025                     Lcd_Write_Int@a:	
   470                           ; 1 bytes @ 0x19
   471                           
   472                           
   473                           ; 2 bytes @ 0x19
   474     0025                     	ds	2
   475     0027                     Lcd_Write_Int@temp:
   476                           
   477                           ; 16 bytes @ 0x1B
   478     0027                     	ds	16
   479     0037                     main@d1:
   480                           
   481                           ; 2 bytes @ 0x2B
   482     0037                     	ds	2
   483     0039                     main@d2:
   484                           
   485                           ; 2 bytes @ 0x2D
   486     0039                     	ds	2
   487                           
   488                           	psect	maintext
   489     0022                     __pmaintext:	
   490 ;;
   491 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   492 ;;
   493 ;; *************** function _main *****************
   494 ;; Defined at:
   495 ;;		line 64 in file "main.c"
   496 ;; Parameters:    Size  Location     Type
   497 ;;		None
   498 ;; Auto vars:     Size  Location     Type
   499 ;;  d2              2   45[BANK0 ] unsigned short 
   500 ;;  d1              2   43[BANK0 ] unsigned short 
   501 ;; Return value:  Size  Location     Type
   502 ;;                  1    wreg      void 
   503 ;; Registers used:
   504 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   505 ;; Tracked objects:
   506 ;;		On entry : B00/0
   507 ;;		On exit  : 0/0
   508 ;;		Unchanged: 0/0
   509 ;; Data sizes:     COMMON   BANK0
   510 ;;      Params:         0       0
   511 ;;      Locals:         0       4
   512 ;;      Temps:          0       0
   513 ;;      Totals:         0       4
   514 ;;Total ram usage:        4 bytes
   515 ;; Hardware stack levels required when called: 6
   516 ;; This function calls:
   517 ;;		_Lcd_Clear
   518 ;;		_Lcd_Init
   519 ;;		_Lcd_Set_Cursor
   520 ;;		_Lcd_Write_Char
   521 ;;		_Lcd_Write_Int
   522 ;;		___lwdiv
   523 ;;		___lwmod
   524 ;;		___wmul
   525 ;;		_delay
   526 ;;		_readADC
   527 ;;		_welcomeMessage
   528 ;; This function is called by:
   529 ;;		Startup code after reset
   530 ;; This function uses a non-reentrant model
   531 ;;
   532                           
   533     0022                     _main:	
   534                           ;psect for function _main
   535                           
   536                           
   537                           ;main.c: 65:     TRISB = 0b01000001;
   538                           
   539                           ;incstack = 0
   540                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   541     0022  3041               	movlw	65
   542     0023  1683               	bsf	3,5	;RP0=1, select bank1
   543     0024  0086               	movwf	6	;volatile
   544                           
   545                           ;main.c: 66:     TRISA = 0b00000;
   546     0025  0185               	clrf	5	;volatile
   547                           
   548                           ;main.c: 68:     RB7 = 1;
   549     0026  1283               	bcf	3,5	;RP0=0, select bank0
   550     0027  1786               	bsf	6,7	;volatile
   551                           
   552                           ;main.c: 69:     RB5 = 0;
   553     0028  1286               	bcf	6,5	;volatile
   554                           
   555                           ;main.c: 71:     RA1 = 0;
   556     0029  1085               	bcf	5,1	;volatile
   557                           
   558                           ;main.c: 75:     OPTION_REGbits.INTEDG = 1;
   559     002A  1683               	bsf	3,5	;RP0=1, select bank1
   560     002B  1701               	bsf	1,6	;volatile
   561                           
   562                           ;main.c: 77:     INTCONbits.INTE = 1;
   563     002C  160B               	bsf	11,4	;volatile
   564                           
   565                           ;main.c: 79:     INTCONbits.GIE = 1;
   566     002D  178B               	bsf	11,7	;volatile
   567                           
   568                           ;main.c: 81:     Lcd_Init();
   569     002E  21DA               	fcall	_Lcd_Init
   570                           
   571                           ;main.c: 82:     welcomeMessage();
   572     002F  220B               	fcall	_welcomeMessage
   573     0030                     l1369:
   574                           
   575                           ;main.c: 86:         while(toggleHold){
   576     0030  1283               	bcf	3,5	;RP0=0, select bank0
   577     0031  0843               	movf	_toggleHold,w
   578     0032  0444               	iorwf	_toggleHold+1,w
   579     0033  1903               	btfsc	3,2
   580     0034  284E               	goto	l1371
   581                           
   582                           ;main.c: 87:             Lcd_Set_Cursor(1, 1);
   583     0035  0195               	clrf	Lcd_Set_Cursor@b
   584     0036  0A95               	incf	Lcd_Set_Cursor@b,f
   585     0037  3001               	movlw	1
   586     0038  2176               	fcall	_Lcd_Set_Cursor
   587                           
   588                           ;main.c: 88:             Lcd_Write_Int(d1);
   589     0039  0838               	movf	main@d1+1,w
   590     003A  00A6               	movwf	Lcd_Write_Int@a+1
   591     003B  0837               	movf	main@d1,w
   592     003C  00A5               	movwf	Lcd_Write_Int@a
   593     003D  2301               	fcall	_Lcd_Write_Int
   594                           
   595                           ;main.c: 89:             Lcd_Set_Cursor(1, 2);
   596     003E  3002               	movlw	2
   597     003F  0095               	movwf	Lcd_Set_Cursor@b
   598     0040  3001               	movlw	1
   599     0041  2176               	fcall	_Lcd_Set_Cursor
   600                           
   601                           ;main.c: 90:             Lcd_Write_Char('.');
   602     0042  302E               	movlw	46
   603     0043  2238               	fcall	_Lcd_Write_Char
   604                           
   605                           ;main.c: 91:             Lcd_Set_Cursor(1, 3);
   606     0044  3003               	movlw	3
   607     0045  0095               	movwf	Lcd_Set_Cursor@b
   608     0046  3001               	movlw	1
   609     0047  2176               	fcall	_Lcd_Set_Cursor
   610                           
   611                           ;main.c: 92:             Lcd_Write_Int(d2);
   612     0048  083A               	movf	main@d2+1,w
   613     0049  00A6               	movwf	Lcd_Write_Int@a+1
   614     004A  0839               	movf	main@d2,w
   615     004B  00A5               	movwf	Lcd_Write_Int@a
   616     004C  2301               	fcall	_Lcd_Write_Int
   617     004D  2830               	goto	l1369
   618     004E                     l1371:
   619                           
   620                           ;main.c: 97:         adcVal = readADC();
   621     004E  20EF               	fcall	_readADC
   622     004F  0812               	movf	?_readADC+1,w
   623     0050  00C6               	movwf	_adcVal+1
   624     0051  0811               	movf	?_readADC,w
   625     0052  00C5               	movwf	_adcVal
   626                           
   627                           ;main.c: 102:         d1 = adcVal / 204;
   628     0053  30CC               	movlw	204
   629     0054  0096               	movwf	___lwdiv@divisor
   630     0055  3000               	movlw	0
   631     0056  0097               	movwf	___lwdiv@divisor+1
   632     0057  0846               	movf	_adcVal+1,w
   633     0058  0099               	movwf	___lwdiv@dividend+1
   634     0059  0845               	movf	_adcVal,w
   635     005A  0098               	movwf	___lwdiv@dividend
   636     005B  213A               	fcall	___lwdiv
   637     005C  0817               	movf	?___lwdiv+1,w
   638     005D  00B8               	movwf	main@d1+1
   639     005E  0816               	movf	?___lwdiv,w
   640     005F  00B7               	movwf	main@d1
   641                           
   642                           ;main.c: 103:         d2= ((adcVal % 204)/51) *25;
   643     0060  3033               	movlw	51
   644     0061  0096               	movwf	___lwdiv@divisor
   645     0062  3000               	movlw	0
   646     0063  0097               	movwf	___lwdiv@divisor+1
   647     0064  0846               	movf	_adcVal+1,w
   648     0065  0094               	movwf	___lwmod@dividend+1
   649     0066  0845               	movf	_adcVal,w
   650     0067  0093               	movwf	___lwmod@dividend
   651     0068  30CC               	movlw	204
   652     0069  0091               	movwf	___lwmod@divisor
   653     006A  3000               	movlw	0
   654     006B  0092               	movwf	___lwmod@divisor+1
   655     006C  21A8               	fcall	___lwmod
   656     006D  0812               	movf	?___lwmod+1,w
   657     006E  0099               	movwf	___lwdiv@dividend+1
   658     006F  0811               	movf	?___lwmod,w
   659     0070  0098               	movwf	___lwdiv@dividend
   660     0071  213A               	fcall	___lwdiv
   661     0072  0817               	movf	?___lwdiv+1,w
   662     0073  009E               	movwf	___wmul@multiplier+1
   663     0074  0816               	movf	?___lwdiv,w
   664     0075  009D               	movwf	___wmul@multiplier
   665     0076  3019               	movlw	25
   666     0077  009F               	movwf	___wmul@multiplicand
   667     0078  3000               	movlw	0
   668     0079  00A0               	movwf	___wmul@multiplicand+1
   669     007A  225B               	fcall	___wmul
   670     007B  081E               	movf	?___wmul+1,w
   671     007C  00BA               	movwf	main@d2+1
   672     007D  081D               	movf	?___wmul,w
   673     007E  00B9               	movwf	main@d2
   674                           
   675                           ;main.c: 108:         Lcd_Clear();
   676     007F  22E5               	fcall	_Lcd_Clear
   677                           
   678                           ;main.c: 109:         Lcd_Set_Cursor(1, 1);
   679     0080  1283               	bcf	3,5	;RP0=0, select bank0
   680     0081  0195               	clrf	Lcd_Set_Cursor@b
   681     0082  0A95               	incf	Lcd_Set_Cursor@b,f
   682     0083  3001               	movlw	1
   683     0084  2176               	fcall	_Lcd_Set_Cursor
   684                           
   685                           ;main.c: 110:         Lcd_Write_Int(d1);
   686     0085  0838               	movf	main@d1+1,w
   687     0086  00A6               	movwf	Lcd_Write_Int@a+1
   688     0087  0837               	movf	main@d1,w
   689     0088  00A5               	movwf	Lcd_Write_Int@a
   690     0089  2301               	fcall	_Lcd_Write_Int
   691                           
   692                           ;main.c: 111:         Lcd_Set_Cursor(1, 2);
   693     008A  3002               	movlw	2
   694     008B  0095               	movwf	Lcd_Set_Cursor@b
   695     008C  3001               	movlw	1
   696     008D  2176               	fcall	_Lcd_Set_Cursor
   697                           
   698                           ;main.c: 112:         Lcd_Write_Char('.');
   699     008E  302E               	movlw	46
   700     008F  2238               	fcall	_Lcd_Write_Char
   701                           
   702                           ;main.c: 113:         Lcd_Set_Cursor(1, 3);
   703     0090  3003               	movlw	3
   704     0091  0095               	movwf	Lcd_Set_Cursor@b
   705     0092  3001               	movlw	1
   706     0093  2176               	fcall	_Lcd_Set_Cursor
   707                           
   708                           ;main.c: 114:         Lcd_Write_Int(d2);
   709     0094  083A               	movf	main@d2+1,w
   710     0095  00A6               	movwf	Lcd_Write_Int@a+1
   711     0096  0839               	movf	main@d2,w
   712     0097  00A5               	movwf	Lcd_Write_Int@a
   713     0098  2301               	fcall	_Lcd_Write_Int
   714                           
   715                           ;main.c: 118:         delay();
   716     0099  22D7               	fcall	_delay
   717     009A  2830               	goto	l1369
   718     009B                     __end_of_main:
   719                           
   720                           	psect	text1
   721     020B                     __ptext1:	
   722 ;; *************** function _welcomeMessage *****************
   723 ;; Defined at:
   724 ;;		line 42 in file "main.c"
   725 ;; Parameters:    Size  Location     Type
   726 ;;		None
   727 ;; Auto vars:     Size  Location     Type
   728 ;;  msg             8   19[BANK0 ] unsigned char [8]
   729 ;; Return value:  Size  Location     Type
   730 ;;                  1    wreg      void 
   731 ;; Registers used:
   732 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   733 ;; Tracked objects:
   734 ;;		On entry : 100/0
   735 ;;		On exit  : 0/0
   736 ;;		Unchanged: 0/0
   737 ;; Data sizes:     COMMON   BANK0
   738 ;;      Params:         0       0
   739 ;;      Locals:         0       8
   740 ;;      Temps:          0       4
   741 ;;      Totals:         0      12
   742 ;;Total ram usage:       12 bytes
   743 ;; Hardware stack levels used: 1
   744 ;; Hardware stack levels required when called: 5
   745 ;; This function calls:
   746 ;;		_Lcd_Clear
   747 ;;		_Lcd_Set_Cursor
   748 ;;		_Lcd_Write_String
   749 ;;		_delay
   750 ;;		_strcpy
   751 ;; This function is called by:
   752 ;;		_main
   753 ;; This function uses a non-reentrant model
   754 ;;
   755                           
   756     020B                     _welcomeMessage:	
   757                           ;psect for function _welcomeMessage
   758                           
   759                           
   760                           ;main.c: 44:     char msg[] = "Welcome";
   761                           
   762                           ;incstack = 0
   763                           ; Regs used in _welcomeMessage: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   764     020B  301F               	movlw	welcomeMessage@msg& (0+255)
   765     020C  0084               	movwf	4
   766     020D  303B               	movlw	low welcomeMessage@F328
   767     020E  009B               	movwf	??_welcomeMessage
   768     020F  0804               	movf	4,w
   769     0210  009C               	movwf	??_welcomeMessage+1
   770     0211  3008               	movlw	8
   771     0212  009D               	movwf	??_welcomeMessage+2
   772     0213                     u640:
   773     0213  081B               	movf	??_welcomeMessage,w
   774     0214  0084               	movwf	4
   775     0215  1383               	bcf	3,7	;select IRP bank0
   776     0216  0800               	movf	0,w
   777     0217  009E               	movwf	??_welcomeMessage+3
   778     0218  0A9B               	incf	??_welcomeMessage,f
   779     0219  081C               	movf	??_welcomeMessage+1,w
   780     021A  0084               	movwf	4
   781     021B  081E               	movf	??_welcomeMessage+3,w
   782     021C  0080               	movwf	0
   783     021D  0A9C               	incf	??_welcomeMessage+1,f
   784     021E  0B9D               	decfsz	??_welcomeMessage+2,f
   785     021F  2A13               	goto	u640
   786                           
   787                           ;main.c: 45:     Lcd_Clear();
   788     0220  22E5               	fcall	_Lcd_Clear
   789                           
   790                           ;main.c: 46:     Lcd_Set_Cursor(1, 1);
   791     0221  1283               	bcf	3,5	;RP0=0, select bank0
   792     0222  0195               	clrf	Lcd_Set_Cursor@b
   793     0223  0A95               	incf	Lcd_Set_Cursor@b,f
   794     0224  3001               	movlw	1
   795     0225  2176               	fcall	_Lcd_Set_Cursor
   796                           
   797                           ;main.c: 47:     Lcd_Write_String(msg);
   798     0226  301F               	movlw	(low (welcomeMessage@msg| 0))& (0+255)
   799     0227  227C               	fcall	_Lcd_Write_String
   800                           
   801                           ;main.c: 48:     delay();
   802     0228  22D7               	fcall	_delay
   803                           
   804                           ;main.c: 49:     Lcd_Clear();
   805     0229  22E5               	fcall	_Lcd_Clear
   806                           
   807                           ;main.c: 50:     Lcd_Set_Cursor(1, 1);
   808     022A  1283               	bcf	3,5	;RP0=0, select bank0
   809     022B  0195               	clrf	Lcd_Set_Cursor@b
   810     022C  0A95               	incf	Lcd_Set_Cursor@b,f
   811     022D  3001               	movlw	1
   812     022E  2176               	fcall	_Lcd_Set_Cursor
   813                           
   814                           ;main.c: 51:     strcpy(msg, "0-5V");
   815     022F  3001               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   816     0230  0091               	movwf	strcpy@from
   817     0231  301F               	movlw	(low (welcomeMessage@msg| 0))& (0+255)
   818     0232  2296               	fcall	_strcpy
   819                           
   820                           ;main.c: 53:     Lcd_Write_String(msg);
   821     0233  301F               	movlw	(low (welcomeMessage@msg| 0))& (0+255)
   822     0234  227C               	fcall	_Lcd_Write_String
   823                           
   824                           ;main.c: 54:     delay();
   825     0235  22D7               	fcall	_delay
   826                           
   827                           ;main.c: 57:     Lcd_Clear();
   828     0236  22E5               	fcall	_Lcd_Clear
   829     0237  0008               	return
   830     0238                     __end_of_welcomeMessage:
   831                           
   832                           	psect	text2
   833     0296                     __ptext2:	
   834 ;; *************** function _strcpy *****************
   835 ;; Defined at:
   836 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\strcpy.c"
   837 ;; Parameters:    Size  Location     Type
   838 ;;  to              1    wreg     PTR unsigned char 
   839 ;;		 -> welcomeMessage@msg(8), 
   840 ;;  from            1    5[BANK0 ] PTR const unsigned char 
   841 ;;		 -> STR_1(5), 
   842 ;; Auto vars:     Size  Location     Type
   843 ;;  to              1    6[BANK0 ] PTR unsigned char 
   844 ;;		 -> welcomeMessage@msg(8), 
   845 ;;  cp              1    7[BANK0 ] PTR unsigned char 
   846 ;;		 -> welcomeMessage@msg(8), 
   847 ;; Return value:  Size  Location     Type
   848 ;;                  1    wreg      PTR unsigned char 
   849 ;; Registers used:
   850 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath
   851 ;; Tracked objects:
   852 ;;		On entry : 100/0
   853 ;;		On exit  : 900/0
   854 ;;		Unchanged: 0/0
   855 ;; Data sizes:     COMMON   BANK0
   856 ;;      Params:         0       1
   857 ;;      Locals:         0       2
   858 ;;      Temps:          0       0
   859 ;;      Totals:         0       3
   860 ;;Total ram usage:        3 bytes
   861 ;; Hardware stack levels used: 1
   862 ;; Hardware stack levels required when called: 2
   863 ;; This function calls:
   864 ;;		Nothing
   865 ;; This function is called by:
   866 ;;		_welcomeMessage
   867 ;; This function uses a non-reentrant model
   868 ;;
   869                           
   870     0296                     _strcpy:	
   871                           ;psect for function _strcpy
   872                           
   873                           
   874                           ;incstack = 0
   875                           ; Regs used in _strcpy: [wreg-fsr0h+status,2+status,0+btemp+1+pclath]
   876                           ;strcpy@to stored from wreg
   877     0296  0092               	movwf	strcpy@to
   878     0297  0812               	movf	strcpy@to,w
   879     0298  0093               	movwf	strcpy@cp
   880     0299                     l1197:
   881     0299  0811               	movf	strcpy@from,w
   882     029A  0084               	movwf	4
   883     029B  231A               	fcall	stringdir
   884     029C  00CF               	movwf	79
   885     029D  0813               	movf	strcpy@cp,w
   886     029E  0084               	movwf	4
   887     029F  084F               	movf	79,w
   888     02A0  1383               	bcf	3,7	;select IRP bank0
   889     02A1  0080               	movwf	0
   890     02A2  0800               	movf	0,w
   891     02A3  1903               	btfsc	3,2
   892     02A4  0008               	return
   893     02A5  3001               	movlw	1
   894     02A6  00CF               	movwf	79
   895     02A7  084F               	movf	79,w
   896     02A8  0793               	addwf	strcpy@cp,f
   897     02A9  3001               	movlw	1
   898     02AA  00CF               	movwf	79
   899     02AB  084F               	movf	79,w
   900     02AC  0791               	addwf	strcpy@from,f
   901     02AD  2A99               	goto	l1197
   902     02AE                     __end_of_strcpy:
   903                           
   904                           	psect	text3
   905     02D7                     __ptext3:	
   906 ;; *************** function _delay *****************
   907 ;; Defined at:
   908 ;;		line 24 in file "main.c"
   909 ;; Parameters:    Size  Location     Type
   910 ;;		None
   911 ;; Auto vars:     Size  Location     Type
   912 ;;		None
   913 ;; Return value:  Size  Location     Type
   914 ;;                  1    wreg      void 
   915 ;; Registers used:
   916 ;;		wreg
   917 ;; Tracked objects:
   918 ;;		On entry : 900/0
   919 ;;		On exit  : 0/0
   920 ;;		Unchanged: 0/0
   921 ;; Data sizes:     COMMON   BANK0
   922 ;;      Params:         0       0
   923 ;;      Locals:         0       0
   924 ;;      Temps:          0       3
   925 ;;      Totals:         0       3
   926 ;;Total ram usage:        3 bytes
   927 ;; Hardware stack levels used: 1
   928 ;; Hardware stack levels required when called: 2
   929 ;; This function calls:
   930 ;;		Nothing
   931 ;; This function is called by:
   932 ;;		_welcomeMessage
   933 ;;		_main
   934 ;; This function uses a non-reentrant model
   935 ;;
   936                           
   937     02D7                     _delay:	
   938                           ;psect for function _delay
   939                           
   940                           
   941                           ;main.c: 25:     _delay((unsigned long)((500)*(4000000/4000.0)));
   942                           
   943                           ;incstack = 0
   944                           ; Regs used in _delay: [wreg]
   945     02D7  3003               	movlw	3
   946     02D8  0093               	movwf	??_delay+2
   947     02D9  308A               	movlw	138
   948     02DA  0092               	movwf	??_delay+1
   949     02DB  3055               	movlw	85
   950     02DC  0091               	movwf	??_delay
   951     02DD                     u737:
   952     02DD  0B91               	decfsz	??_delay,f
   953     02DE  2ADD               	goto	u737
   954     02DF  0B92               	decfsz	??_delay+1,f
   955     02E0  2ADD               	goto	u737
   956     02E1  0B93               	decfsz	??_delay+2,f
   957     02E2  2ADD               	goto	u737
   958     02E3  2AE4               	nop2
   959     02E4  0008               	return
   960     02E5                     __end_of_delay:
   961                           
   962                           	psect	text4
   963     0176                     __ptext4:	
   964 ;; *************** function _Lcd_Set_Cursor *****************
   965 ;; Defined at:
   966 ;;		line 52 in file "lcd.c"
   967 ;; Parameters:    Size  Location     Type
   968 ;;  a               1    wreg     unsigned char 
   969 ;;  b               1    9[BANK0 ] unsigned char 
   970 ;; Auto vars:     Size  Location     Type
   971 ;;  a               1   11[BANK0 ] unsigned char 
   972 ;;  temp            1   14[BANK0 ] unsigned char 
   973 ;;  y               1   13[BANK0 ] unsigned char 
   974 ;;  z               1   12[BANK0 ] unsigned char 
   975 ;; Return value:  Size  Location     Type
   976 ;;                  1    wreg      void 
   977 ;; Registers used:
   978 ;;		wreg, status,2, status,0, pclath, cstack
   979 ;; Tracked objects:
   980 ;;		On entry : 100/0
   981 ;;		On exit  : 100/0
   982 ;;		Unchanged: 0/0
   983 ;; Data sizes:     COMMON   BANK0
   984 ;;      Params:         0       1
   985 ;;      Locals:         0       4
   986 ;;      Temps:          0       1
   987 ;;      Totals:         0       6
   988 ;;Total ram usage:        6 bytes
   989 ;; Hardware stack levels used: 1
   990 ;; Hardware stack levels required when called: 4
   991 ;; This function calls:
   992 ;;		_Lcd_Cmd
   993 ;; This function is called by:
   994 ;;		_welcomeMessage
   995 ;;		_main
   996 ;; This function uses a non-reentrant model
   997 ;;
   998                           
   999     0176                     _Lcd_Set_Cursor:	
  1000                           ;psect for function _Lcd_Set_Cursor
  1001                           
  1002                           
  1003                           ;incstack = 0
  1004                           ; Regs used in _Lcd_Set_Cursor: [wreg+status,2+status,0+pclath+cstack]
  1005                           ;Lcd_Set_Cursor@a stored from wreg
  1006     0176  0097               	movwf	Lcd_Set_Cursor@a
  1007                           
  1008                           ;lcd.c: 52: void Lcd_Set_Cursor(char a, char b);lcd.c: 53: {;lcd.c: 54:  char temp,z,y;;
      +                          lcd.c: 55:  if(a == 1)
  1009     0177  0317               	decf	Lcd_Set_Cursor@a,w
  1010     0178  1D03               	btfss	3,2
  1011     0179  298F               	goto	l1175
  1012                           
  1013                           ;lcd.c: 56:  {;lcd.c: 57:    temp = (char) (0x80 + b - 1);
  1014     017A  0815               	movf	Lcd_Set_Cursor@b,w
  1015     017B  3E7F               	addlw	127
  1016     017C  009A               	movwf	Lcd_Set_Cursor@temp
  1017                           
  1018                           ;lcd.c: 58:   z = temp>>4;
  1019     017D  081A               	movf	Lcd_Set_Cursor@temp,w
  1020     017E  0096               	movwf	??_Lcd_Set_Cursor
  1021     017F  3004               	movlw	4
  1022     0180                     u565:
  1023     0180  1003               	clrc
  1024     0181  0C96               	rrf	??_Lcd_Set_Cursor,f
  1025     0182  3EFF               	addlw	-1
  1026     0183  1D03               	skipz
  1027     0184  2980               	goto	u565
  1028     0185  0816               	movf	??_Lcd_Set_Cursor,w
  1029     0186  0098               	movwf	Lcd_Set_Cursor@z
  1030                           
  1031                           ;lcd.c: 59:   y = temp & 0x0F;
  1032     0187  081A               	movf	Lcd_Set_Cursor@temp,w
  1033     0188  390F               	andlw	15
  1034     0189  0099               	movwf	Lcd_Set_Cursor@y
  1035                           
  1036                           ;lcd.c: 60:   Lcd_Cmd(z);
  1037     018A  0818               	movf	Lcd_Set_Cursor@z,w
  1038     018B  22C5               	fcall	_Lcd_Cmd
  1039                           
  1040                           ;lcd.c: 61:   Lcd_Cmd(y);
  1041     018C  0819               	movf	Lcd_Set_Cursor@y,w
  1042     018D  22C5               	fcall	_Lcd_Cmd
  1043                           
  1044                           ;lcd.c: 62:  }
  1045     018E  0008               	return
  1046     018F                     l1175:
  1047     018F  3002               	movlw	2
  1048     0190  0617               	xorwf	Lcd_Set_Cursor@a,w
  1049     0191  1D03               	btfss	3,2
  1050     0192  0008               	return
  1051                           
  1052                           ;lcd.c: 64:  {;lcd.c: 65:   temp = 0xC0 + b - 1;
  1053     0193  0815               	movf	Lcd_Set_Cursor@b,w
  1054     0194  3EBF               	addlw	191
  1055     0195  009A               	movwf	Lcd_Set_Cursor@temp
  1056                           
  1057                           ;lcd.c: 66:   z = temp>>4;
  1058     0196  081A               	movf	Lcd_Set_Cursor@temp,w
  1059     0197  0096               	movwf	??_Lcd_Set_Cursor
  1060     0198  3004               	movlw	4
  1061     0199                     u585:
  1062     0199  1003               	clrc
  1063     019A  0C96               	rrf	??_Lcd_Set_Cursor,f
  1064     019B  3EFF               	addlw	-1
  1065     019C  1D03               	skipz
  1066     019D  2999               	goto	u585
  1067     019E  0816               	movf	??_Lcd_Set_Cursor,w
  1068     019F  0098               	movwf	Lcd_Set_Cursor@z
  1069                           
  1070                           ;lcd.c: 67:   y = temp & 0x0F;
  1071     01A0  081A               	movf	Lcd_Set_Cursor@temp,w
  1072     01A1  390F               	andlw	15
  1073     01A2  0099               	movwf	Lcd_Set_Cursor@y
  1074                           
  1075                           ;lcd.c: 68:   Lcd_Cmd(z);
  1076     01A3  0818               	movf	Lcd_Set_Cursor@z,w
  1077     01A4  22C5               	fcall	_Lcd_Cmd
  1078                           
  1079                           ;lcd.c: 69:   Lcd_Cmd(y);
  1080     01A5  0819               	movf	Lcd_Set_Cursor@y,w
  1081     01A6  22C5               	fcall	_Lcd_Cmd
  1082     01A7  0008               	return
  1083     01A8                     __end_of_Lcd_Set_Cursor:
  1084                           
  1085                           	psect	text5
  1086     02E5                     __ptext5:	
  1087 ;; *************** function _Lcd_Clear *****************
  1088 ;; Defined at:
  1089 ;;		line 44 in file "lcd.c"
  1090 ;; Parameters:    Size  Location     Type
  1091 ;;		None
  1092 ;; Auto vars:     Size  Location     Type
  1093 ;;		None
  1094 ;; Return value:  Size  Location     Type
  1095 ;;                  1    wreg      void 
  1096 ;; Registers used:
  1097 ;;		wreg, status,2, status,0, pclath, cstack
  1098 ;; Tracked objects:
  1099 ;;		On entry : 0/0
  1100 ;;		On exit  : 0/0
  1101 ;;		Unchanged: 0/0
  1102 ;; Data sizes:     COMMON   BANK0
  1103 ;;      Params:         0       0
  1104 ;;      Locals:         0       0
  1105 ;;      Temps:          0       2
  1106 ;;      Totals:         0       2
  1107 ;;Total ram usage:        2 bytes
  1108 ;; Hardware stack levels used: 1
  1109 ;; Hardware stack levels required when called: 4
  1110 ;; This function calls:
  1111 ;;		_Lcd_Cmd
  1112 ;; This function is called by:
  1113 ;;		_welcomeMessage
  1114 ;;		_main
  1115 ;; This function uses a non-reentrant model
  1116 ;;
  1117                           
  1118     02E5                     _Lcd_Clear:	
  1119                           ;psect for function _Lcd_Clear
  1120                           
  1121                           
  1122                           ;lcd.c: 46:  Lcd_Cmd(0x00);
  1123                           
  1124                           ;incstack = 0
  1125                           ; Regs used in _Lcd_Clear: [wreg+status,2+status,0+pclath+cstack]
  1126     02E5  3000               	movlw	0
  1127     02E6  22C5               	fcall	_Lcd_Cmd
  1128                           
  1129                           ;lcd.c: 47:  Lcd_Cmd(0x01);
  1130     02E7  3001               	movlw	1
  1131     02E8  22C5               	fcall	_Lcd_Cmd
  1132                           
  1133                           ;lcd.c: 48:     _delay((unsigned long)((2)*(4000000/4000.0)));
  1134     02E9  3003               	movlw	3
  1135     02EA  0096               	movwf	??_Lcd_Clear+1
  1136     02EB  3097               	movlw	151
  1137     02EC  0095               	movwf	??_Lcd_Clear
  1138     02ED                     u747:
  1139     02ED  0B95               	decfsz	??_Lcd_Clear,f
  1140     02EE  2AED               	goto	u747
  1141     02EF  0B96               	decfsz	??_Lcd_Clear+1,f
  1142     02F0  2AED               	goto	u747
  1143     02F1  2AF2               	nop2
  1144     02F2  0008               	return
  1145     02F3                     __end_of_Lcd_Clear:
  1146                           
  1147                           	psect	text6
  1148     00EF                     __ptext6:	
  1149 ;; *************** function _readADC *****************
  1150 ;; Defined at:
  1151 ;;		line 6 in file "adc.c"
  1152 ;; Parameters:    Size  Location     Type
  1153 ;;		None
  1154 ;; Auto vars:     Size  Location     Type
  1155 ;;  volt            2    9[BANK0 ] unsigned int 
  1156 ;;  rxData          1   12[BANK0 ] unsigned char 
  1157 ;;  bits            1   11[BANK0 ] unsigned char 
  1158 ;; Return value:  Size  Location     Type
  1159 ;;                  2    5[BANK0 ] unsigned int 
  1160 ;; Registers used:
  1161 ;;		wreg, status,2, status,0, btemp+1
  1162 ;; Tracked objects:
  1163 ;;		On entry : 100/0
  1164 ;;		On exit  : 100/0
  1165 ;;		Unchanged: 0/0
  1166 ;; Data sizes:     COMMON   BANK0
  1167 ;;      Params:         0       2
  1168 ;;      Locals:         0       4
  1169 ;;      Temps:          0       2
  1170 ;;      Totals:         0       8
  1171 ;;Total ram usage:        8 bytes
  1172 ;; Hardware stack levels used: 1
  1173 ;; Hardware stack levels required when called: 2
  1174 ;; This function calls:
  1175 ;;		Nothing
  1176 ;; This function is called by:
  1177 ;;		_main
  1178 ;; This function uses a non-reentrant model
  1179 ;;
  1180                           
  1181     00EF                     _readADC:	
  1182                           ;psect for function _readADC
  1183                           
  1184                           
  1185                           ;adc.c: 8:   unsigned char bits;;adc.c: 9:   unsigned char rxData = 0;
  1186                           
  1187                           ;incstack = 0
  1188                           ; Regs used in _readADC: [wreg+status,2+status,0+btemp+1]
  1189     00EF  0198               	clrf	readADC@rxData
  1190                           
  1191                           ;adc.c: 12:   RB7 = 0;
  1192     00F0  1386               	bcf	6,7	;volatile
  1193                           
  1194                           ;adc.c: 15:   for (bits = 0; bits < 3; bits++)
  1195     00F1  0197               	clrf	readADC@bits
  1196     00F2                     l1273:
  1197                           
  1198                           ;adc.c: 16:   {;adc.c: 17:       _delay((unsigned long)((100)*(4000000/4000000.0)));
  1199     00F2  3021               	movlw	33
  1200     00F3  0093               	movwf	??_readADC
  1201     00F4                     u757:
  1202     00F4  0B93               	decfsz	??_readADC,f
  1203     00F5  28F4               	goto	u757
  1204                           
  1205                           ;adc.c: 18:       RB5 = 1;
  1206     00F6  1283               	bcf	3,5	;RP0=0, select bank0
  1207     00F7  1686               	bsf	6,5	;volatile
  1208                           
  1209                           ;adc.c: 19:       _delay((unsigned long)((100)*(4000000/4000000.0)));
  1210     00F8  3021               	movlw	33
  1211     00F9  0093               	movwf	??_readADC
  1212     00FA                     u767:
  1213     00FA  0B93               	decfsz	??_readADC,f
  1214     00FB  28FA               	goto	u767
  1215                           
  1216                           ;adc.c: 20:       RB5 = 0;
  1217     00FC  1283               	bcf	3,5	;RP0=0, select bank0
  1218     00FD  1286               	bcf	6,5	;volatile
  1219                           
  1220                           ;adc.c: 21:   }
  1221     00FE  3001               	movlw	1
  1222     00FF  00CF               	movwf	79
  1223     0100  084F               	movf	79,w
  1224     0101  0797               	addwf	readADC@bits,f
  1225     0102  3003               	movlw	3
  1226     0103  0217               	subwf	readADC@bits,w
  1227     0104  1C03               	skipc
  1228     0105  28F2               	goto	l1273
  1229                           
  1230                           ;adc.c: 24:   for (bits = 0; bits < 8; bits++)
  1231     0106  0197               	clrf	readADC@bits
  1232     0107                     l1289:
  1233                           
  1234                           ;adc.c: 25:   {;adc.c: 27:     _delay((unsigned long)((100)*(4000000/4000000.0)));
  1235     0107  3021               	movlw	33
  1236     0108  0093               	movwf	??_readADC
  1237     0109                     u777:
  1238     0109  0B93               	decfsz	??_readADC,f
  1239     010A  2909               	goto	u777
  1240                           
  1241                           ;adc.c: 28:     RB5 = 1;
  1242     010B  1283               	bcf	3,5	;RP0=0, select bank0
  1243     010C  1686               	bsf	6,5	;volatile
  1244                           
  1245                           ;adc.c: 31:     rxData = rxData << 1;
  1246     010D  0818               	movf	readADC@rxData,w
  1247     010E  0093               	movwf	??_readADC
  1248     010F  0713               	addwf	??_readADC,w
  1249     0110  0098               	movwf	readADC@rxData
  1250                           
  1251                           ;adc.c: 34:     if(RB6 == 1)
  1252     0111  1F06               	btfss	6,6	;volatile
  1253     0112  2916               	goto	l1299
  1254                           
  1255                           ;adc.c: 35:       rxData = rxData | 0x01;
  1256     0113  0818               	movf	readADC@rxData,w
  1257     0114  3801               	iorlw	1
  1258     0115  2918               	goto	L1
  1259     0116                     l1299:
  1260                           
  1261                           ;adc.c: 37:       rxData = rxData & 0xfe;
  1262     0116  0818               	movf	readADC@rxData,w
  1263     0117  39FE               	andlw	254
  1264     0118                     L1:
  1265     0118  0098               	movwf	readADC@rxData
  1266                           
  1267                           ;adc.c: 39:     _delay((unsigned long)((100)*(4000000/4000000.0)));
  1268     0119  3021               	movlw	33
  1269     011A  0093               	movwf	??_readADC
  1270     011B                     u787:
  1271     011B  0B93               	decfsz	??_readADC,f
  1272     011C  291B               	goto	u787
  1273                           
  1274                           ;adc.c: 40:     RB5 = 0;
  1275     011D  1283               	bcf	3,5	;RP0=0, select bank0
  1276     011E  1286               	bcf	6,5	;volatile
  1277                           
  1278                           ;adc.c: 41:     }
  1279     011F  3001               	movlw	1
  1280     0120  00CF               	movwf	79
  1281     0121  084F               	movf	79,w
  1282     0122  0797               	addwf	readADC@bits,f
  1283     0123  3008               	movlw	8
  1284     0124  0217               	subwf	readADC@bits,w
  1285     0125  1C03               	skipc
  1286     0126  2907               	goto	l1289
  1287                           
  1288                           ;adc.c: 44:   RB7 = 1;
  1289     0127  1786               	bsf	6,7	;volatile
  1290                           
  1291                           ;adc.c: 47:   volt = (rxData << 2);
  1292     0128  0818               	movf	readADC@rxData,w
  1293     0129  0093               	movwf	??_readADC
  1294     012A  0194               	clrf	??_readADC+1
  1295     012B  1003               	clrc
  1296     012C  0D93               	rlf	??_readADC,f
  1297     012D  0D94               	rlf	??_readADC+1,f
  1298     012E  1003               	clrc
  1299     012F  0D93               	rlf	??_readADC,f
  1300     0130  0D94               	rlf	??_readADC+1,f
  1301     0131  0813               	movf	??_readADC,w
  1302     0132  0095               	movwf	readADC@volt
  1303     0133  0814               	movf	??_readADC+1,w
  1304     0134  0096               	movwf	readADC@volt+1
  1305                           
  1306                           ;adc.c: 48:   return volt;
  1307     0135  0816               	movf	readADC@volt+1,w
  1308     0136  0092               	movwf	?_readADC+1
  1309     0137  0815               	movf	readADC@volt,w
  1310     0138  0091               	movwf	?_readADC
  1311     0139  0008               	return
  1312     013A                     __end_of_readADC:
  1313                           
  1314                           	psect	text7
  1315     025B                     __ptext7:	
  1316 ;; *************** function ___wmul *****************
  1317 ;; Defined at:
  1318 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\Umul16.c"
  1319 ;; Parameters:    Size  Location     Type
  1320 ;;  multiplier      2   17[BANK0 ] unsigned int 
  1321 ;;  multiplicand    2   19[BANK0 ] unsigned int 
  1322 ;; Auto vars:     Size  Location     Type
  1323 ;;  product         2   21[BANK0 ] unsigned int 
  1324 ;; Return value:  Size  Location     Type
  1325 ;;                  2   17[BANK0 ] unsigned int 
  1326 ;; Registers used:
  1327 ;;		wreg, status,2, status,0
  1328 ;; Tracked objects:
  1329 ;;		On entry : 100/0
  1330 ;;		On exit  : 100/0
  1331 ;;		Unchanged: 0/0
  1332 ;; Data sizes:     COMMON   BANK0
  1333 ;;      Params:         0       4
  1334 ;;      Locals:         0       2
  1335 ;;      Temps:          0       0
  1336 ;;      Totals:         0       6
  1337 ;;Total ram usage:        6 bytes
  1338 ;; Hardware stack levels used: 1
  1339 ;; Hardware stack levels required when called: 2
  1340 ;; This function calls:
  1341 ;;		Nothing
  1342 ;; This function is called by:
  1343 ;;		_main
  1344 ;; This function uses a non-reentrant model
  1345 ;;
  1346                           
  1347     025B                     ___wmul:	
  1348                           ;psect for function ___wmul
  1349                           
  1350                           
  1351                           ;incstack = 0
  1352                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  1353     025B  01A1               	clrf	___wmul@product
  1354     025C  01A2               	clrf	___wmul@product+1
  1355     025D                     l1317:
  1356     025D  1C1D               	btfss	___wmul@multiplier,0
  1357     025E  2A65               	goto	l223
  1358     025F  081F               	movf	___wmul@multiplicand,w
  1359     0260  07A1               	addwf	___wmul@product,f
  1360     0261  1803               	skipnc
  1361     0262  0AA2               	incf	___wmul@product+1,f
  1362     0263  0820               	movf	___wmul@multiplicand+1,w
  1363     0264  07A2               	addwf	___wmul@product+1,f
  1364     0265                     l223:
  1365     0265  3001               	movlw	1
  1366     0266                     u695:
  1367     0266  1003               	clrc
  1368     0267  0D9F               	rlf	___wmul@multiplicand,f
  1369     0268  0DA0               	rlf	___wmul@multiplicand+1,f
  1370     0269  3EFF               	addlw	-1
  1371     026A  1D03               	skipz
  1372     026B  2A66               	goto	u695
  1373     026C  3001               	movlw	1
  1374     026D                     u705:
  1375     026D  1003               	clrc
  1376     026E  0C9E               	rrf	___wmul@multiplier+1,f
  1377     026F  0C9D               	rrf	___wmul@multiplier,f
  1378     0270  3EFF               	addlw	-1
  1379     0271  1D03               	skipz
  1380     0272  2A6D               	goto	u705
  1381     0273  081D               	movf	___wmul@multiplier,w
  1382     0274  041E               	iorwf	___wmul@multiplier+1,w
  1383     0275  1D03               	btfss	3,2
  1384     0276  2A5D               	goto	l1317
  1385     0277  0822               	movf	___wmul@product+1,w
  1386     0278  009E               	movwf	?___wmul+1
  1387     0279  0821               	movf	___wmul@product,w
  1388     027A  009D               	movwf	?___wmul
  1389     027B  0008               	return
  1390     027C                     __end_of___wmul:
  1391                           
  1392                           	psect	text8
  1393     0301                     __ptext8:	
  1394 ;; *************** function _Lcd_Write_Int *****************
  1395 ;; Defined at:
  1396 ;;		line 121 in file "lcd.c"
  1397 ;; Parameters:    Size  Location     Type
  1398 ;;  a               2   25[BANK0 ] unsigned int 
  1399 ;; Auto vars:     Size  Location     Type
  1400 ;;  temp           16   27[BANK0 ] unsigned char [16]
  1401 ;; Return value:  Size  Location     Type
  1402 ;;                  1    wreg      void 
  1403 ;; Registers used:
  1404 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1405 ;; Tracked objects:
  1406 ;;		On entry : 100/0
  1407 ;;		On exit  : 900/0
  1408 ;;		Unchanged: 0/0
  1409 ;; Data sizes:     COMMON   BANK0
  1410 ;;      Params:         0       2
  1411 ;;      Locals:         0      16
  1412 ;;      Temps:          0       0
  1413 ;;      Totals:         0      18
  1414 ;;Total ram usage:       18 bytes
  1415 ;; Hardware stack levels used: 1
  1416 ;; Hardware stack levels required when called: 5
  1417 ;; This function calls:
  1418 ;;		_Lcd_Write_String
  1419 ;;		_utoa
  1420 ;; This function is called by:
  1421 ;;		_main
  1422 ;; This function uses a non-reentrant model
  1423 ;;
  1424                           
  1425     0301                     _Lcd_Write_Int:	
  1426                           ;psect for function _Lcd_Write_Int
  1427                           
  1428                           
  1429                           ;lcd.c: 121: void Lcd_Write_Int(unsigned int a);lcd.c: 122: {;lcd.c: 123:     char temp[
      +                          16];;lcd.c: 124:     utoa((char*)temp, a, 10);
  1430                           
  1431                           ;incstack = 0
  1432                           ; Regs used in _Lcd_Write_Int: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1433     0301  0826               	movf	Lcd_Write_Int@a+1,w
  1434     0302  009E               	movwf	utoa@val+1
  1435     0303  0825               	movf	Lcd_Write_Int@a,w
  1436     0304  009D               	movwf	utoa@val
  1437     0305  300A               	movlw	10
  1438     0306  009F               	movwf	utoa@base
  1439     0307  3000               	movlw	0
  1440     0308  00A0               	movwf	utoa@base+1
  1441     0309  3027               	movlw	(low (Lcd_Write_Int@temp| 0))& (0+255)
  1442     030A  209B               	fcall	_utoa
  1443                           
  1444                           ;lcd.c: 125:     Lcd_Write_String(temp);
  1445     030B  3027               	movlw	(low (Lcd_Write_Int@temp| 0))& (0+255)
  1446     030C  227C               	fcall	_Lcd_Write_String
  1447     030D  0008               	return
  1448     030E                     __end_of_Lcd_Write_Int:
  1449                           
  1450                           	psect	text9
  1451     009B                     __ptext9:	
  1452 ;; *************** function _utoa *****************
  1453 ;; Defined at:
  1454 ;;		line 17 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\itoa.c"
  1455 ;; Parameters:    Size  Location     Type
  1456 ;;  buf             1    wreg     PTR unsigned char 
  1457 ;;		 -> Lcd_Write_Int@temp(16), 
  1458 ;;  val             2   17[BANK0 ] unsigned int 
  1459 ;;  base            2   19[BANK0 ] int 
  1460 ;; Auto vars:     Size  Location     Type
  1461 ;;  buf             1   24[BANK0 ] PTR unsigned char 
  1462 ;;		 -> Lcd_Write_Int@temp(16), 
  1463 ;;  v               2   21[BANK0 ] unsigned int 
  1464 ;;  c               1   23[BANK0 ] unsigned char 
  1465 ;; Return value:  Size  Location     Type
  1466 ;;                  1    wreg      PTR unsigned char 
  1467 ;; Registers used:
  1468 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1469 ;; Tracked objects:
  1470 ;;		On entry : 100/0
  1471 ;;		On exit  : 900/0
  1472 ;;		Unchanged: 0/0
  1473 ;; Data sizes:     COMMON   BANK0
  1474 ;;      Params:         0       4
  1475 ;;      Locals:         0       4
  1476 ;;      Temps:          0       0
  1477 ;;      Totals:         0       8
  1478 ;;Total ram usage:        8 bytes
  1479 ;; Hardware stack levels used: 1
  1480 ;; Hardware stack levels required when called: 3
  1481 ;; This function calls:
  1482 ;;		___lwdiv
  1483 ;;		___lwmod
  1484 ;; This function is called by:
  1485 ;;		_Lcd_Write_Int
  1486 ;; This function uses a non-reentrant model
  1487 ;;
  1488                           
  1489     009B                     _utoa:	
  1490                           ;psect for function _utoa
  1491                           
  1492                           
  1493                           ;incstack = 0
  1494                           ; Regs used in _utoa: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1495                           ;utoa@buf stored from wreg
  1496     009B  00A4               	movwf	utoa@buf
  1497     009C  081E               	movf	utoa@val+1,w
  1498     009D  00A2               	movwf	utoa@v+1
  1499     009E  081D               	movf	utoa@val,w
  1500     009F  00A1               	movwf	utoa@v
  1501     00A0                     l1201:
  1502     00A0  0820               	movf	utoa@base+1,w
  1503     00A1  0097               	movwf	___lwdiv@divisor+1
  1504     00A2  081F               	movf	utoa@base,w
  1505     00A3  0096               	movwf	___lwdiv@divisor
  1506     00A4  0822               	movf	utoa@v+1,w
  1507     00A5  0099               	movwf	___lwdiv@dividend+1
  1508     00A6  0821               	movf	utoa@v,w
  1509     00A7  0098               	movwf	___lwdiv@dividend
  1510     00A8  213A               	fcall	___lwdiv
  1511     00A9  0817               	movf	?___lwdiv+1,w
  1512     00AA  00A2               	movwf	utoa@v+1
  1513     00AB  0816               	movf	?___lwdiv,w
  1514     00AC  00A1               	movwf	utoa@v
  1515     00AD  3001               	movlw	1
  1516     00AE  00CF               	movwf	79
  1517     00AF  084F               	movf	79,w
  1518     00B0  07A4               	addwf	utoa@buf,f
  1519     00B1  0821               	movf	utoa@v,w
  1520     00B2  0422               	iorwf	utoa@v+1,w
  1521     00B3  1D03               	btfss	3,2
  1522     00B4  28A0               	goto	l1201
  1523     00B5  0824               	movf	utoa@buf,w
  1524     00B6  0084               	movwf	4
  1525     00B7  1383               	bcf	3,7	;select IRP bank0
  1526     00B8  0180               	clrf	0
  1527     00B9  3001               	movlw	1
  1528     00BA  02A4               	subwf	utoa@buf,f
  1529     00BB                     l1211:
  1530     00BB  0820               	movf	utoa@base+1,w
  1531     00BC  0092               	movwf	___lwmod@divisor+1
  1532     00BD  081F               	movf	utoa@base,w
  1533     00BE  0091               	movwf	___lwmod@divisor
  1534     00BF  081E               	movf	utoa@val+1,w
  1535     00C0  0094               	movwf	___lwmod@dividend+1
  1536     00C1  081D               	movf	utoa@val,w
  1537     00C2  0093               	movwf	___lwmod@dividend
  1538     00C3  21A8               	fcall	___lwmod
  1539     00C4  0811               	movf	?___lwmod,w
  1540     00C5  00A3               	movwf	utoa@c
  1541     00C6  0820               	movf	utoa@base+1,w
  1542     00C7  0097               	movwf	___lwdiv@divisor+1
  1543     00C8  081F               	movf	utoa@base,w
  1544     00C9  0096               	movwf	___lwdiv@divisor
  1545     00CA  081E               	movf	utoa@val+1,w
  1546     00CB  0099               	movwf	___lwdiv@dividend+1
  1547     00CC  081D               	movf	utoa@val,w
  1548     00CD  0098               	movwf	___lwdiv@dividend
  1549     00CE  213A               	fcall	___lwdiv
  1550     00CF  0817               	movf	?___lwdiv+1,w
  1551     00D0  009E               	movwf	utoa@val+1
  1552     00D1  0816               	movf	?___lwdiv,w
  1553     00D2  009D               	movwf	utoa@val
  1554     00D3  300A               	movlw	10
  1555     00D4  0223               	subwf	utoa@c,w
  1556     00D5  1C03               	skipc
  1557     00D6  28DB               	goto	l683
  1558     00D7  3007               	movlw	7
  1559     00D8  00CF               	movwf	79
  1560     00D9  084F               	movf	79,w
  1561     00DA  07A3               	addwf	utoa@c,f
  1562     00DB                     l683:
  1563     00DB  3030               	movlw	48
  1564     00DC  00CF               	movwf	79
  1565     00DD  084F               	movf	79,w
  1566     00DE  07A3               	addwf	utoa@c,f
  1567     00DF  0824               	movf	utoa@buf,w
  1568     00E0  0084               	movwf	4
  1569     00E1  0823               	movf	utoa@c,w
  1570     00E2  1383               	bcf	3,7	;select IRP bank0
  1571     00E3  0080               	movwf	0
  1572     00E4  3001               	movlw	1
  1573     00E5  02A4               	subwf	utoa@buf,f
  1574     00E6  081D               	movf	utoa@val,w
  1575     00E7  041E               	iorwf	utoa@val+1,w
  1576     00E8  1D03               	btfss	3,2
  1577     00E9  28BB               	goto	l1211
  1578                           
  1579                           ;	Return value of _utoa is never used
  1580     00EA  3001               	movlw	1
  1581     00EB  00CF               	movwf	79
  1582     00EC  084F               	movf	79,w
  1583     00ED  07A4               	addwf	utoa@buf,f
  1584     00EE  0008               	return
  1585     00EF                     __end_of_utoa:
  1586                           
  1587                           	psect	text10
  1588     01A8                     __ptext10:	
  1589 ;; *************** function ___lwmod *****************
  1590 ;; Defined at:
  1591 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\lwmod.c"
  1592 ;; Parameters:    Size  Location     Type
  1593 ;;  divisor         2    5[BANK0 ] unsigned int 
  1594 ;;  dividend        2    7[BANK0 ] unsigned int 
  1595 ;; Auto vars:     Size  Location     Type
  1596 ;;  counter         1    9[BANK0 ] unsigned char 
  1597 ;; Return value:  Size  Location     Type
  1598 ;;                  2    5[BANK0 ] unsigned int 
  1599 ;; Registers used:
  1600 ;;		wreg, status,2, status,0, btemp+1
  1601 ;; Tracked objects:
  1602 ;;		On entry : 100/0
  1603 ;;		On exit  : 100/0
  1604 ;;		Unchanged: 0/0
  1605 ;; Data sizes:     COMMON   BANK0
  1606 ;;      Params:         0       4
  1607 ;;      Locals:         0       1
  1608 ;;      Temps:          0       0
  1609 ;;      Totals:         0       5
  1610 ;;Total ram usage:        5 bytes
  1611 ;; Hardware stack levels used: 1
  1612 ;; Hardware stack levels required when called: 2
  1613 ;; This function calls:
  1614 ;;		Nothing
  1615 ;; This function is called by:
  1616 ;;		_main
  1617 ;;		_utoa
  1618 ;; This function uses a non-reentrant model
  1619 ;;
  1620                           
  1621     01A8                     ___lwmod:	
  1622                           ;psect for function ___lwmod
  1623                           
  1624                           
  1625                           ;incstack = 0
  1626                           ; Regs used in ___lwmod: [wreg+status,2+status,0+btemp+1]
  1627     01A8  0811               	movf	___lwmod@divisor,w
  1628     01A9  0412               	iorwf	___lwmod@divisor+1,w
  1629     01AA  1903               	btfsc	3,2
  1630     01AB  29D5               	goto	l1153
  1631     01AC  0195               	clrf	___lwmod@counter
  1632     01AD  0A95               	incf	___lwmod@counter,f
  1633     01AE                     l1143:
  1634     01AE  1B92               	btfsc	___lwmod@divisor+1,7
  1635     01AF  29BC               	goto	l1145
  1636     01B0  3001               	movlw	1
  1637     01B1                     u505:
  1638     01B1  1003               	clrc
  1639     01B2  0D91               	rlf	___lwmod@divisor,f
  1640     01B3  0D92               	rlf	___lwmod@divisor+1,f
  1641     01B4  3EFF               	addlw	-1
  1642     01B5  1D03               	skipz
  1643     01B6  29B1               	goto	u505
  1644     01B7  3001               	movlw	1
  1645     01B8  00CF               	movwf	79
  1646     01B9  084F               	movf	79,w
  1647     01BA  0795               	addwf	___lwmod@counter,f
  1648     01BB  29AE               	goto	l1143
  1649     01BC                     l1145:
  1650     01BC  0812               	movf	___lwmod@divisor+1,w
  1651     01BD  0214               	subwf	___lwmod@dividend+1,w
  1652     01BE  1D03               	skipz
  1653     01BF  29C2               	goto	u525
  1654     01C0  0811               	movf	___lwmod@divisor,w
  1655     01C1  0213               	subwf	___lwmod@dividend,w
  1656     01C2                     u525:
  1657     01C2  1C03               	skipc
  1658     01C3  29CA               	goto	l1149
  1659     01C4  0811               	movf	___lwmod@divisor,w
  1660     01C5  0293               	subwf	___lwmod@dividend,f
  1661     01C6  0812               	movf	___lwmod@divisor+1,w
  1662     01C7  1C03               	skipc
  1663     01C8  0394               	decf	___lwmod@dividend+1,f
  1664     01C9  0294               	subwf	___lwmod@dividend+1,f
  1665     01CA                     l1149:
  1666     01CA  3001               	movlw	1
  1667     01CB                     u535:
  1668     01CB  1003               	clrc
  1669     01CC  0C92               	rrf	___lwmod@divisor+1,f
  1670     01CD  0C91               	rrf	___lwmod@divisor,f
  1671     01CE  3EFF               	addlw	-1
  1672     01CF  1D03               	skipz
  1673     01D0  29CB               	goto	u535
  1674     01D1  3001               	movlw	1
  1675     01D2  0295               	subwf	___lwmod@counter,f
  1676     01D3  1D03               	btfss	3,2
  1677     01D4  29BC               	goto	l1145
  1678     01D5                     l1153:
  1679     01D5  0814               	movf	___lwmod@dividend+1,w
  1680     01D6  0092               	movwf	?___lwmod+1
  1681     01D7  0813               	movf	___lwmod@dividend,w
  1682     01D8  0091               	movwf	?___lwmod
  1683     01D9  0008               	return
  1684     01DA                     __end_of___lwmod:
  1685                           
  1686                           	psect	text11
  1687     013A                     __ptext11:	
  1688 ;; *************** function ___lwdiv *****************
  1689 ;; Defined at:
  1690 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\lwdiv.c"
  1691 ;; Parameters:    Size  Location     Type
  1692 ;;  divisor         2   10[BANK0 ] unsigned int 
  1693 ;;  dividend        2   12[BANK0 ] unsigned int 
  1694 ;; Auto vars:     Size  Location     Type
  1695 ;;  quotient        2   14[BANK0 ] unsigned int 
  1696 ;;  counter         1   16[BANK0 ] unsigned char 
  1697 ;; Return value:  Size  Location     Type
  1698 ;;                  2   10[BANK0 ] unsigned int 
  1699 ;; Registers used:
  1700 ;;		wreg, status,2, status,0, btemp+1
  1701 ;; Tracked objects:
  1702 ;;		On entry : 100/0
  1703 ;;		On exit  : 100/0
  1704 ;;		Unchanged: 0/0
  1705 ;; Data sizes:     COMMON   BANK0
  1706 ;;      Params:         0       4
  1707 ;;      Locals:         0       3
  1708 ;;      Temps:          0       0
  1709 ;;      Totals:         0       7
  1710 ;;Total ram usage:        7 bytes
  1711 ;; Hardware stack levels used: 1
  1712 ;; Hardware stack levels required when called: 2
  1713 ;; This function calls:
  1714 ;;		Nothing
  1715 ;; This function is called by:
  1716 ;;		_main
  1717 ;;		_utoa
  1718 ;; This function uses a non-reentrant model
  1719 ;;
  1720                           
  1721     013A                     ___lwdiv:	
  1722                           ;psect for function ___lwdiv
  1723                           
  1724                           
  1725                           ;incstack = 0
  1726                           ; Regs used in ___lwdiv: [wreg+status,2+status,0+btemp+1]
  1727     013A  019A               	clrf	___lwdiv@quotient
  1728     013B  019B               	clrf	___lwdiv@quotient+1
  1729     013C  0816               	movf	___lwdiv@divisor,w
  1730     013D  0417               	iorwf	___lwdiv@divisor+1,w
  1731     013E  1903               	btfsc	3,2
  1732     013F  2971               	goto	l1131
  1733     0140  019C               	clrf	___lwdiv@counter
  1734     0141  0A9C               	incf	___lwdiv@counter,f
  1735     0142                     l1119:
  1736     0142  1B97               	btfsc	___lwdiv@divisor+1,7
  1737     0143  2950               	goto	l1121
  1738     0144  3001               	movlw	1
  1739     0145                     u435:
  1740     0145  1003               	clrc
  1741     0146  0D96               	rlf	___lwdiv@divisor,f
  1742     0147  0D97               	rlf	___lwdiv@divisor+1,f
  1743     0148  3EFF               	addlw	-1
  1744     0149  1D03               	skipz
  1745     014A  2945               	goto	u435
  1746     014B  3001               	movlw	1
  1747     014C  00CF               	movwf	79
  1748     014D  084F               	movf	79,w
  1749     014E  079C               	addwf	___lwdiv@counter,f
  1750     014F  2942               	goto	l1119
  1751     0150                     l1121:
  1752     0150  3001               	movlw	1
  1753     0151                     u455:
  1754     0151  1003               	clrc
  1755     0152  0D9A               	rlf	___lwdiv@quotient,f
  1756     0153  0D9B               	rlf	___lwdiv@quotient+1,f
  1757     0154  3EFF               	addlw	-1
  1758     0155  1D03               	skipz
  1759     0156  2951               	goto	u455
  1760     0157  0817               	movf	___lwdiv@divisor+1,w
  1761     0158  0219               	subwf	___lwdiv@dividend+1,w
  1762     0159  1D03               	skipz
  1763     015A  295D               	goto	u465
  1764     015B  0816               	movf	___lwdiv@divisor,w
  1765     015C  0218               	subwf	___lwdiv@dividend,w
  1766     015D                     u465:
  1767     015D  1C03               	skipc
  1768     015E  2966               	goto	l1127
  1769     015F  0816               	movf	___lwdiv@divisor,w
  1770     0160  0298               	subwf	___lwdiv@dividend,f
  1771     0161  0817               	movf	___lwdiv@divisor+1,w
  1772     0162  1C03               	skipc
  1773     0163  0399               	decf	___lwdiv@dividend+1,f
  1774     0164  0299               	subwf	___lwdiv@dividend+1,f
  1775     0165  141A               	bsf	___lwdiv@quotient,0
  1776     0166                     l1127:
  1777     0166  3001               	movlw	1
  1778     0167                     u475:
  1779     0167  1003               	clrc
  1780     0168  0C97               	rrf	___lwdiv@divisor+1,f
  1781     0169  0C96               	rrf	___lwdiv@divisor,f
  1782     016A  3EFF               	addlw	-1
  1783     016B  1D03               	skipz
  1784     016C  2967               	goto	u475
  1785     016D  3001               	movlw	1
  1786     016E  029C               	subwf	___lwdiv@counter,f
  1787     016F  1D03               	btfss	3,2
  1788     0170  2950               	goto	l1121
  1789     0171                     l1131:
  1790     0171  081B               	movf	___lwdiv@quotient+1,w
  1791     0172  0097               	movwf	?___lwdiv+1
  1792     0173  081A               	movf	___lwdiv@quotient,w
  1793     0174  0096               	movwf	?___lwdiv
  1794     0175  0008               	return
  1795     0176                     __end_of___lwdiv:
  1796                           
  1797                           	psect	text12
  1798     027C                     __ptext12:	
  1799 ;; *************** function _Lcd_Write_String *****************
  1800 ;; Defined at:
  1801 ;;		line 111 in file "lcd.c"
  1802 ;; Parameters:    Size  Location     Type
  1803 ;;  a               1    wreg     PTR unsigned char 
  1804 ;;		 -> Lcd_Write_Int@temp(16), welcomeMessage@msg(8), 
  1805 ;; Auto vars:     Size  Location     Type
  1806 ;;  a               1   13[BANK0 ] PTR unsigned char 
  1807 ;;		 -> Lcd_Write_Int@temp(16), welcomeMessage@msg(8), 
  1808 ;;  i               2   11[BANK0 ] int 
  1809 ;; Return value:  Size  Location     Type
  1810 ;;                  1    wreg      void 
  1811 ;; Registers used:
  1812 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1813 ;; Tracked objects:
  1814 ;;		On entry : 100/0
  1815 ;;		On exit  : 900/0
  1816 ;;		Unchanged: 0/0
  1817 ;; Data sizes:     COMMON   BANK0
  1818 ;;      Params:         0       0
  1819 ;;      Locals:         0       3
  1820 ;;      Temps:          0       1
  1821 ;;      Totals:         0       4
  1822 ;;Total ram usage:        4 bytes
  1823 ;; Hardware stack levels used: 1
  1824 ;; Hardware stack levels required when called: 4
  1825 ;; This function calls:
  1826 ;;		_Lcd_Write_Char
  1827 ;; This function is called by:
  1828 ;;		_welcomeMessage
  1829 ;;		_Lcd_Write_Int
  1830 ;; This function uses a non-reentrant model
  1831 ;;
  1832                           
  1833     027C                     _Lcd_Write_String:	
  1834                           ;psect for function _Lcd_Write_String
  1835                           
  1836                           
  1837                           ;incstack = 0
  1838                           ; Regs used in _Lcd_Write_String: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1839                           ;Lcd_Write_String@a stored from wreg
  1840     027C  0099               	movwf	Lcd_Write_String@a
  1841                           
  1842                           ;lcd.c: 111: void Lcd_Write_String(char *a);lcd.c: 112: {;lcd.c: 113:  int i;;lcd.c: 114
      +                          :  for(i=0;a[i]!='\0';i++)
  1843     027D  0197               	clrf	Lcd_Write_String@i
  1844     027E  0198               	clrf	Lcd_Write_String@i+1
  1845     027F                     l1191:
  1846     027F  0817               	movf	Lcd_Write_String@i,w
  1847     0280  0719               	addwf	Lcd_Write_String@a,w
  1848     0281  0096               	movwf	??_Lcd_Write_String
  1849     0282  0816               	movf	??_Lcd_Write_String,w
  1850     0283  0084               	movwf	4
  1851     0284  1383               	bcf	3,7	;select IRP bank0
  1852     0285  0800               	movf	0,w
  1853     0286  1903               	btfsc	3,2
  1854     0287  0008               	return
  1855                           
  1856                           ;lcd.c: 115:     {;lcd.c: 116:         Lcd_Write_Char(a[i]);
  1857     0288  0817               	movf	Lcd_Write_String@i,w
  1858     0289  0719               	addwf	Lcd_Write_String@a,w
  1859     028A  0096               	movwf	??_Lcd_Write_String
  1860     028B  0816               	movf	??_Lcd_Write_String,w
  1861     028C  0084               	movwf	4
  1862     028D  0800               	movf	0,w
  1863     028E  2238               	fcall	_Lcd_Write_Char
  1864                           
  1865                           ;lcd.c: 117:     }
  1866     028F  3001               	movlw	1
  1867     0290  0797               	addwf	Lcd_Write_String@i,f
  1868     0291  1803               	skipnc
  1869     0292  0A98               	incf	Lcd_Write_String@i+1,f
  1870     0293  3000               	movlw	0
  1871     0294  0798               	addwf	Lcd_Write_String@i+1,f
  1872     0295  2A7F               	goto	l1191
  1873     0296                     __end_of_Lcd_Write_String:
  1874                           
  1875                           	psect	text13
  1876     0238                     __ptext13:	
  1877 ;; *************** function _Lcd_Write_Char *****************
  1878 ;; Defined at:
  1879 ;;		line 94 in file "lcd.c"
  1880 ;; Parameters:    Size  Location     Type
  1881 ;;  a               1    wreg     unsigned char 
  1882 ;; Auto vars:     Size  Location     Type
  1883 ;;  a               1    9[BANK0 ] unsigned char 
  1884 ;;  y               1    8[BANK0 ] unsigned char 
  1885 ;;  temp            1    7[BANK0 ] unsigned char 
  1886 ;; Return value:  Size  Location     Type
  1887 ;;                  1    wreg      void 
  1888 ;; Registers used:
  1889 ;;		wreg, status,2, status,0, pclath, cstack
  1890 ;; Tracked objects:
  1891 ;;		On entry : 100/0
  1892 ;;		On exit  : 100/0
  1893 ;;		Unchanged: 0/0
  1894 ;; Data sizes:     COMMON   BANK0
  1895 ;;      Params:         0       0
  1896 ;;      Locals:         0       3
  1897 ;;      Temps:          0       1
  1898 ;;      Totals:         0       4
  1899 ;;Total ram usage:        4 bytes
  1900 ;; Hardware stack levels used: 1
  1901 ;; Hardware stack levels required when called: 3
  1902 ;; This function calls:
  1903 ;;		_Lcd_Port
  1904 ;; This function is called by:
  1905 ;;		_main
  1906 ;;		_Lcd_Write_String
  1907 ;; This function uses a non-reentrant model
  1908 ;;
  1909                           
  1910     0238                     _Lcd_Write_Char:	
  1911                           ;psect for function _Lcd_Write_Char
  1912                           
  1913                           
  1914                           ;incstack = 0
  1915                           ; Regs used in _Lcd_Write_Char: [wreg+status,2+status,0+pclath+cstack]
  1916                           ;Lcd_Write_Char@a stored from wreg
  1917     0238  0095               	movwf	Lcd_Write_Char@a
  1918                           
  1919                           ;lcd.c: 94: void Lcd_Write_Char(char a);lcd.c: 95: {;lcd.c: 96:    char temp,y;;lcd.c: 9
      +                          7:    temp = a&0x0F;
  1920     0239  0815               	movf	Lcd_Write_Char@a,w
  1921     023A  390F               	andlw	15
  1922     023B  0093               	movwf	Lcd_Write_Char@temp
  1923                           
  1924                           ;lcd.c: 98:    y = a&0xF0;
  1925     023C  0815               	movf	Lcd_Write_Char@a,w
  1926     023D  39F0               	andlw	240
  1927     023E  0094               	movwf	Lcd_Write_Char@y
  1928                           
  1929                           ;lcd.c: 99:    RA0 = 1;
  1930     023F  1405               	bsf	5,0	;volatile
  1931                           
  1932                           ;lcd.c: 100:    Lcd_Port(y>>4);
  1933     0240  0814               	movf	Lcd_Write_Char@y,w
  1934     0241  0092               	movwf	??_Lcd_Write_Char
  1935     0242  3004               	movlw	4
  1936     0243                     u415:
  1937     0243  1003               	clrc
  1938     0244  0C92               	rrf	??_Lcd_Write_Char,f
  1939     0245  3EFF               	addlw	-1
  1940     0246  1D03               	skipz
  1941     0247  2A43               	goto	u415
  1942     0248  0812               	movf	??_Lcd_Write_Char,w
  1943     0249  22AE               	fcall	_Lcd_Port
  1944                           
  1945                           ;lcd.c: 101:    RA2 = 1;
  1946     024A  1505               	bsf	5,2	;volatile
  1947                           
  1948                           ;lcd.c: 102:    _delay((unsigned long)((40)*(4000000/4000000.0)));
  1949     024B  300D               	movlw	13
  1950     024C  0092               	movwf	??_Lcd_Write_Char
  1951     024D                     u797:
  1952     024D  0B92               	decfsz	??_Lcd_Write_Char,f
  1953     024E  2A4D               	goto	u797
  1954                           
  1955                           ;lcd.c: 103:    RA2 = 0;
  1956     024F  1283               	bcf	3,5	;RP0=0, select bank0
  1957     0250  1105               	bcf	5,2	;volatile
  1958                           
  1959                           ;lcd.c: 104:    Lcd_Port(temp);
  1960     0251  0813               	movf	Lcd_Write_Char@temp,w
  1961     0252  22AE               	fcall	_Lcd_Port
  1962                           
  1963                           ;lcd.c: 105:    RA2 = 1;
  1964     0253  1505               	bsf	5,2	;volatile
  1965                           
  1966                           ;lcd.c: 106:    _delay((unsigned long)((40)*(4000000/4000000.0)));
  1967     0254  300D               	movlw	13
  1968     0255  0092               	movwf	??_Lcd_Write_Char
  1969     0256                     u807:
  1970     0256  0B92               	decfsz	??_Lcd_Write_Char,f
  1971     0257  2A56               	goto	u807
  1972                           
  1973                           ;lcd.c: 107:    RA2 = 0;
  1974     0258  1283               	bcf	3,5	;RP0=0, select bank0
  1975     0259  1105               	bcf	5,2	;volatile
  1976     025A  0008               	return
  1977     025B                     __end_of_Lcd_Write_Char:
  1978                           
  1979                           	psect	text14
  1980     01DA                     __ptext14:	
  1981 ;; *************** function _Lcd_Init *****************
  1982 ;; Defined at:
  1983 ;;		line 74 in file "lcd.c"
  1984 ;; Parameters:    Size  Location     Type
  1985 ;;		None
  1986 ;; Auto vars:     Size  Location     Type
  1987 ;;		None
  1988 ;; Return value:  Size  Location     Type
  1989 ;;                  1    wreg      void 
  1990 ;; Registers used:
  1991 ;;		wreg, status,2, status,0, pclath, cstack
  1992 ;; Tracked objects:
  1993 ;;		On entry : B00/100
  1994 ;;		On exit  : 100/0
  1995 ;;		Unchanged: 0/0
  1996 ;; Data sizes:     COMMON   BANK0
  1997 ;;      Params:         0       0
  1998 ;;      Locals:         0       0
  1999 ;;      Temps:          0       2
  2000 ;;      Totals:         0       2
  2001 ;;Total ram usage:        2 bytes
  2002 ;; Hardware stack levels used: 1
  2003 ;; Hardware stack levels required when called: 4
  2004 ;; This function calls:
  2005 ;;		_Lcd_Cmd
  2006 ;;		_Lcd_Port
  2007 ;; This function is called by:
  2008 ;;		_main
  2009 ;; This function uses a non-reentrant model
  2010 ;;
  2011                           
  2012     01DA                     _Lcd_Init:	
  2013                           ;psect for function _Lcd_Init
  2014                           
  2015                           
  2016                           ;lcd.c: 76:   Lcd_Port(0x00);
  2017                           
  2018                           ;incstack = 0
  2019                           ; Regs used in _Lcd_Init: [wreg+status,2+status,0+pclath+cstack]
  2020     01DA  3000               	movlw	0
  2021     01DB  22AE               	fcall	_Lcd_Port
  2022                           
  2023                           ;lcd.c: 77:    _delay((unsigned long)((20)*(4000000/4000.0)));
  2024     01DC  301A               	movlw	26
  2025     01DD  0096               	movwf	??_Lcd_Init+1
  2026     01DE  30F8               	movlw	248
  2027     01DF  0095               	movwf	??_Lcd_Init
  2028     01E0                     u817:
  2029     01E0  0B95               	decfsz	??_Lcd_Init,f
  2030     01E1  29E0               	goto	u817
  2031     01E2  0B96               	decfsz	??_Lcd_Init+1,f
  2032     01E3  29E0               	goto	u817
  2033     01E4  0000               	nop
  2034                           
  2035                           ;lcd.c: 78:   Lcd_Cmd(0x03);
  2036     01E5  3003               	movlw	3
  2037     01E6  22C5               	fcall	_Lcd_Cmd
  2038                           
  2039                           ;lcd.c: 79:  _delay((unsigned long)((5)*(4000000/4000.0)));
  2040     01E7  3007               	movlw	7
  2041     01E8  0096               	movwf	??_Lcd_Init+1
  2042     01E9  307D               	movlw	125
  2043     01EA  0095               	movwf	??_Lcd_Init
  2044     01EB                     u827:
  2045     01EB  0B95               	decfsz	??_Lcd_Init,f
  2046     01EC  29EB               	goto	u827
  2047     01ED  0B96               	decfsz	??_Lcd_Init+1,f
  2048     01EE  29EB               	goto	u827
  2049                           
  2050                           ;lcd.c: 80:   Lcd_Cmd(0x03);
  2051     01EF  3003               	movlw	3
  2052     01F0  22C5               	fcall	_Lcd_Cmd
  2053                           
  2054                           ;lcd.c: 81:  _delay((unsigned long)((11)*(4000000/4000.0)));
  2055     01F1  300F               	movlw	15
  2056     01F2  0096               	movwf	??_Lcd_Init+1
  2057     01F3  3047               	movlw	71
  2058     01F4  0095               	movwf	??_Lcd_Init
  2059     01F5                     u837:
  2060     01F5  0B95               	decfsz	??_Lcd_Init,f
  2061     01F6  29F5               	goto	u837
  2062     01F7  0B96               	decfsz	??_Lcd_Init+1,f
  2063     01F8  29F5               	goto	u837
  2064     01F9  29FA               	nop2
  2065                           
  2066                           ;lcd.c: 82:   Lcd_Cmd(0x03);
  2067     01FA  3003               	movlw	3
  2068     01FB  22C5               	fcall	_Lcd_Cmd
  2069                           
  2070                           ;lcd.c: 84:   Lcd_Cmd(0x02);
  2071     01FC  3002               	movlw	2
  2072     01FD  22C5               	fcall	_Lcd_Cmd
  2073                           
  2074                           ;lcd.c: 85:   Lcd_Cmd(0x02);
  2075     01FE  3002               	movlw	2
  2076     01FF  22C5               	fcall	_Lcd_Cmd
  2077                           
  2078                           ;lcd.c: 86:   Lcd_Cmd(0x08);
  2079     0200  3008               	movlw	8
  2080     0201  22C5               	fcall	_Lcd_Cmd
  2081                           
  2082                           ;lcd.c: 87:   Lcd_Cmd(0x00);
  2083     0202  3000               	movlw	0
  2084     0203  22C5               	fcall	_Lcd_Cmd
  2085                           
  2086                           ;lcd.c: 88:   Lcd_Cmd(0x0C);
  2087     0204  300C               	movlw	12
  2088     0205  22C5               	fcall	_Lcd_Cmd
  2089                           
  2090                           ;lcd.c: 89:   Lcd_Cmd(0x00);
  2091     0206  3000               	movlw	0
  2092     0207  22C5               	fcall	_Lcd_Cmd
  2093                           
  2094                           ;lcd.c: 90:   Lcd_Cmd(0x06);
  2095     0208  3006               	movlw	6
  2096     0209  22C5               	fcall	_Lcd_Cmd
  2097     020A  0008               	return
  2098     020B                     __end_of_Lcd_Init:
  2099                           
  2100                           	psect	text15
  2101     02C5                     __ptext15:	
  2102 ;; *************** function _Lcd_Cmd *****************
  2103 ;; Defined at:
  2104 ;;		line 31 in file "lcd.c"
  2105 ;; Parameters:    Size  Location     Type
  2106 ;;  a               1    wreg     unsigned char 
  2107 ;; Auto vars:     Size  Location     Type
  2108 ;;  a               1    8[BANK0 ] unsigned char 
  2109 ;; Return value:  Size  Location     Type
  2110 ;;                  1    wreg      void 
  2111 ;; Registers used:
  2112 ;;		wreg, status,2, status,0, pclath, cstack
  2113 ;; Tracked objects:
  2114 ;;		On entry : 0/0
  2115 ;;		On exit  : 100/0
  2116 ;;		Unchanged: 0/0
  2117 ;; Data sizes:     COMMON   BANK0
  2118 ;;      Params:         0       0
  2119 ;;      Locals:         0       1
  2120 ;;      Temps:          0       2
  2121 ;;      Totals:         0       3
  2122 ;;Total ram usage:        3 bytes
  2123 ;; Hardware stack levels used: 1
  2124 ;; Hardware stack levels required when called: 3
  2125 ;; This function calls:
  2126 ;;		_Lcd_Port
  2127 ;; This function is called by:
  2128 ;;		_Lcd_Clear
  2129 ;;		_Lcd_Set_Cursor
  2130 ;;		_Lcd_Init
  2131 ;; This function uses a non-reentrant model
  2132 ;;
  2133                           
  2134     02C5                     _Lcd_Cmd:	
  2135                           ;psect for function _Lcd_Cmd
  2136                           
  2137                           
  2138                           ;incstack = 0
  2139                           ; Regs used in _Lcd_Cmd: [wreg+status,2+status,0+pclath+cstack]
  2140                           ;Lcd_Cmd@a stored from wreg
  2141     02C5  1283               	bcf	3,5	;RP0=0, select bank0
  2142     02C6  0094               	movwf	Lcd_Cmd@a
  2143                           
  2144                           ;lcd.c: 31: void Lcd_Cmd(char a);lcd.c: 32: {;lcd.c: 34:     RA0 = 0;
  2145     02C7  1005               	bcf	5,0	;volatile
  2146                           
  2147                           ;lcd.c: 35:  Lcd_Port(a);
  2148     02C8  0814               	movf	Lcd_Cmd@a,w
  2149     02C9  22AE               	fcall	_Lcd_Port
  2150                           
  2151                           ;lcd.c: 38:  RA2 = 1;
  2152     02CA  1505               	bsf	5,2	;volatile
  2153                           
  2154                           ;lcd.c: 39:     _delay((unsigned long)((4)*(4000000/4000.0)));
  2155     02CB  3006               	movlw	6
  2156     02CC  0093               	movwf	??_Lcd_Cmd+1
  2157     02CD  3030               	movlw	48
  2158     02CE  0092               	movwf	??_Lcd_Cmd
  2159     02CF                     u847:
  2160     02CF  0B92               	decfsz	??_Lcd_Cmd,f
  2161     02D0  2ACF               	goto	u847
  2162     02D1  0B93               	decfsz	??_Lcd_Cmd+1,f
  2163     02D2  2ACF               	goto	u847
  2164     02D3  0000               	nop
  2165                           
  2166                           ;lcd.c: 40:     RA2 = 0;
  2167     02D4  1283               	bcf	3,5	;RP0=0, select bank0
  2168     02D5  1105               	bcf	5,2	;volatile
  2169     02D6  0008               	return
  2170     02D7                     __end_of_Lcd_Cmd:
  2171                           
  2172                           	psect	text16
  2173     02AE                     __ptext16:	
  2174 ;; *************** function _Lcd_Port *****************
  2175 ;; Defined at:
  2176 ;;		line 7 in file "lcd.c"
  2177 ;; Parameters:    Size  Location     Type
  2178 ;;  a               1    wreg     unsigned char 
  2179 ;; Auto vars:     Size  Location     Type
  2180 ;;  a               1    5[BANK0 ] unsigned char 
  2181 ;; Return value:  Size  Location     Type
  2182 ;;                  1    wreg      void 
  2183 ;; Registers used:
  2184 ;;		wreg
  2185 ;; Tracked objects:
  2186 ;;		On entry : 0/0
  2187 ;;		On exit  : 100/0
  2188 ;;		Unchanged: 0/0
  2189 ;; Data sizes:     COMMON   BANK0
  2190 ;;      Params:         0       0
  2191 ;;      Locals:         0       1
  2192 ;;      Temps:          0       0
  2193 ;;      Totals:         0       1
  2194 ;;Total ram usage:        1 bytes
  2195 ;; Hardware stack levels used: 1
  2196 ;; Hardware stack levels required when called: 2
  2197 ;; This function calls:
  2198 ;;		Nothing
  2199 ;; This function is called by:
  2200 ;;		_Lcd_Cmd
  2201 ;;		_Lcd_Init
  2202 ;;		_Lcd_Write_Char
  2203 ;; This function uses a non-reentrant model
  2204 ;;
  2205                           
  2206     02AE                     _Lcd_Port:	
  2207                           ;psect for function _Lcd_Port
  2208                           
  2209                           
  2210                           ;incstack = 0
  2211                           ; Regs used in _Lcd_Port: [wreg]
  2212                           ;Lcd_Port@a stored from wreg
  2213     02AE  1283               	bcf	3,5	;RP0=0, select bank0
  2214     02AF  0091               	movwf	Lcd_Port@a
  2215                           
  2216                           ;lcd.c: 7: void Lcd_Port(char a);lcd.c: 8: {;lcd.c: 9:  if(a & 1)
  2217     02B0  1C11               	btfss	Lcd_Port@a,0
  2218     02B1  2AB4               	goto	l79
  2219                           
  2220                           ;lcd.c: 10:   RB1 = 1;
  2221     02B2  1486               	bsf	6,1	;volatile
  2222     02B3  2AB5               	goto	l80
  2223     02B4                     l79:	
  2224                           ;lcd.c: 11:  else
  2225                           
  2226                           
  2227                           ;lcd.c: 12:   RB1 = 0;
  2228     02B4  1086               	bcf	6,1	;volatile
  2229     02B5                     l80:
  2230                           
  2231                           ;lcd.c: 14:  if(a & 2)
  2232     02B5  1C91               	btfss	Lcd_Port@a,1
  2233     02B6  2AB9               	goto	l81
  2234                           
  2235                           ;lcd.c: 15:   RB2 = 1;
  2236     02B7  1506               	bsf	6,2	;volatile
  2237     02B8  2ABA               	goto	l82
  2238     02B9                     l81:	
  2239                           ;lcd.c: 16:  else
  2240                           
  2241                           
  2242                           ;lcd.c: 17:   RB2 = 0;
  2243     02B9  1106               	bcf	6,2	;volatile
  2244     02BA                     l82:
  2245                           
  2246                           ;lcd.c: 19:  if(a & 4)
  2247     02BA  1D11               	btfss	Lcd_Port@a,2
  2248     02BB  2ABE               	goto	l83
  2249                           
  2250                           ;lcd.c: 20:   RB3 = 1;
  2251     02BC  1586               	bsf	6,3	;volatile
  2252     02BD  2ABF               	goto	l84
  2253     02BE                     l83:	
  2254                           ;lcd.c: 21:  else
  2255                           
  2256                           
  2257                           ;lcd.c: 22:   RB3 = 0;
  2258     02BE  1186               	bcf	6,3	;volatile
  2259     02BF                     l84:
  2260                           
  2261                           ;lcd.c: 24:  if(a & 8)
  2262     02BF  1D91               	btfss	Lcd_Port@a,3
  2263     02C0  2AC3               	goto	l85
  2264                           
  2265                           ;lcd.c: 25:   RB4 = 1;
  2266     02C1  1606               	bsf	6,4	;volatile
  2267     02C2  0008               	return
  2268     02C3                     l85:	
  2269                           ;lcd.c: 26:  else
  2270                           
  2271                           
  2272                           ;lcd.c: 27:   RB4 = 0;
  2273     02C3  1206               	bcf	6,4	;volatile
  2274     02C4  0008               	return
  2275     02C5                     __end_of_Lcd_Port:
  2276                           
  2277                           	psect	text17
  2278     030E                     __ptext17:	
  2279 ;; *************** function _isr *****************
  2280 ;; Defined at:
  2281 ;;		line 29 in file "main.c"
  2282 ;; Parameters:    Size  Location     Type
  2283 ;;		None
  2284 ;; Auto vars:     Size  Location     Type
  2285 ;;		None
  2286 ;; Return value:  Size  Location     Type
  2287 ;;                  1    wreg      void 
  2288 ;; Registers used:
  2289 ;;		wreg, status,2, status,0, pclath, cstack
  2290 ;; Tracked objects:
  2291 ;;		On entry : 0/0
  2292 ;;		On exit  : 100/0
  2293 ;;		Unchanged: 0/0
  2294 ;; Data sizes:     COMMON   BANK0
  2295 ;;      Params:         0       0
  2296 ;;      Locals:         0       0
  2297 ;;      Temps:          0       2
  2298 ;;      Totals:         0       2
  2299 ;;Total ram usage:        2 bytes
  2300 ;; Hardware stack levels used: 1
  2301 ;; Hardware stack levels required when called: 1
  2302 ;; This function calls:
  2303 ;;		i1_delay
  2304 ;; This function is called by:
  2305 ;;		Interrupt level 1
  2306 ;; This function uses a non-reentrant model
  2307 ;;
  2308                           
  2309     030E                     _isr:	
  2310                           ;psect for function _isr
  2311                           
  2312                           
  2313                           ;main.c: 31:     INTCONbits.INTF = 0;
  2314     030E  108B               	bcf	11,1	;volatile
  2315                           
  2316                           ;main.c: 33:     toggleHold = ~toggleHold;
  2317     030F  09C3               	comf	_toggleHold,f
  2318     0310  09C4               	comf	_toggleHold+1,f
  2319                           
  2320                           ;main.c: 34:     delay();
  2321     0311  22F3               	fcall	i1_delay
  2322     0312  1283               	bcf	3,5	;RP0=0, select bank0
  2323     0313  0810               	movf	??_isr+1,w
  2324     0314  008A               	movwf	10
  2325     0315  0E0F               	swapf	??_isr,w
  2326     0316  0083               	movwf	3
  2327     0317  0ECE               	swapf	78,f
  2328     0318  0E4E               	swapf	78,w
  2329     0319  0009               	retfie
  2330     031A                     __end_of_isr:
  2331                           
  2332                           	psect	intentry
  2333     0004                     __pintentry:	
  2334                           ;incstack = 0
  2335                           ; Regs used in _isr: [wreg+status,2+status,0+pclath+cstack]
  2336                           
  2337     0004                     interrupt_function:
  2338     004E                     saved_w	set	btemp
  2339     0004  00CE               	movwf	btemp
  2340     0005  0E03               	swapf	3,w
  2341     0006  1283               	bcf	3,5	;RP0=0, select bank0
  2342     0007  008F               	movwf	??_isr
  2343     0008  080A               	movf	10,w
  2344     0009  0090               	movwf	??_isr+1
  2345     000A  2B0E               	ljmp	_isr
  2346                           
  2347                           	psect	text18
  2348     02F3                     __ptext18:	
  2349 ;; *************** function i1_delay *****************
  2350 ;; Defined at:
  2351 ;;		line 24 in file "main.c"
  2352 ;; Parameters:    Size  Location     Type
  2353 ;;		None
  2354 ;; Auto vars:     Size  Location     Type
  2355 ;;		None
  2356 ;; Return value:  Size  Location     Type
  2357 ;;                  1    wreg      void 
  2358 ;; Registers used:
  2359 ;;		wreg
  2360 ;; Tracked objects:
  2361 ;;		On entry : 100/0
  2362 ;;		On exit  : 0/0
  2363 ;;		Unchanged: 0/0
  2364 ;; Data sizes:     COMMON   BANK0
  2365 ;;      Params:         0       0
  2366 ;;      Locals:         0       0
  2367 ;;      Temps:          0       3
  2368 ;;      Totals:         0       3
  2369 ;;Total ram usage:        3 bytes
  2370 ;; Hardware stack levels used: 1
  2371 ;; This function calls:
  2372 ;;		Nothing
  2373 ;; This function is called by:
  2374 ;;		_isr
  2375 ;; This function uses a non-reentrant model
  2376 ;;
  2377                           
  2378     02F3                     i1_delay:	
  2379                           ;psect for function i1_delay
  2380                           
  2381                           
  2382                           ;main.c: 25:     _delay((unsigned long)((500)*(4000000/4000.0)));
  2383                           
  2384                           ;incstack = 0
  2385                           ; Regs used in i1_delay: [wreg]
  2386     02F3  3003               	movlw	3
  2387     02F4  008E               	movwf	??i1_delay+2
  2388     02F5  308A               	movlw	138
  2389     02F6  008D               	movwf	??i1_delay+1
  2390     02F7  3055               	movlw	85
  2391     02F8  008C               	movwf	??i1_delay
  2392     02F9                     u85_27:
  2393     02F9  0B8C               	decfsz	??i1_delay,f
  2394     02FA  2AF9               	goto	u85_27
  2395     02FB  0B8D               	decfsz	??i1_delay+1,f
  2396     02FC  2AF9               	goto	u85_27
  2397     02FD  0B8E               	decfsz	??i1_delay+2,f
  2398     02FE  2AF9               	goto	u85_27
  2399     02FF  2B00               	nop2
  2400     0300  0008               	return
  2401     0301                     __end_ofi1_delay:
  2402     004E                     btemp	set	78	;btemp
  2403     004E                     wtemp0	set	78
  2404                           
  2405                           	psect	config
  2406                           
  2407                           ;Config register CONFIG @ 0x2007
  2408                           ;	Oscillator Selection bits
  2409                           ;	FOSC = XT, XT oscillator
  2410                           ;	Watchdog Timer
  2411                           ;	WDTE = OFF, WDT disabled
  2412                           ;	Power-up Timer Enable bit
  2413                           ;	PWRTE = ON, Power-up Timer is enabled
  2414                           ;	Code Protection bit
  2415                           ;	CP = OFF, Code protection disabled
  2416     2007                     	org	8199
  2417     2007  3FF1               	dw	16369

Data Sizes:
    Strings     5
    Constant    0
    Data        8
    BSS         4
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON            0      0       0
    BANK0            66     47      59

Pointer List with Targets:

    strcpy@from	PTR const unsigned char  size(1) Largest target is 5
		 -> STR_1(CODE[5]), 

    strcpy@to	PTR unsigned char  size(1) Largest target is 8
		 -> welcomeMessage@msg(BANK0[8]), 

    strcpy@cp	PTR unsigned char  size(1) Largest target is 8
		 -> welcomeMessage@msg(BANK0[8]), 

    utoa@buf	PTR unsigned char  size(1) Largest target is 16
		 -> Lcd_Write_Int@temp(BANK0[16]), 

    sp__itoa	PTR unsigned char  size(1) Largest target is 0

    sp__utoa	PTR unsigned char  size(1) Largest target is 16
		 -> Lcd_Write_Int@temp(BANK0[16]), 

    Lcd_Write_String@a	PTR unsigned char  size(1) Largest target is 16
		 -> Lcd_Write_Int@temp(BANK0[16]), welcomeMessage@msg(BANK0[8]), 

    sp__strcpy	PTR unsigned char  size(1) Largest target is 8
		 -> welcomeMessage@msg(BANK0[8]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _isr in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_Lcd_Write_Int
    _welcomeMessage->_Lcd_Set_Cursor
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Clear->_Lcd_Cmd
    ___wmul->___lwdiv
    _Lcd_Write_Int->_utoa
    _utoa->___lwdiv
    ___lwdiv->___lwmod
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Init->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port

Critical Paths under _isr in BANK0

    _isr->i1_delay

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0    7591
                                             43 BANK0      4     4      0
                          _Lcd_Clear
                           _Lcd_Init
                     _Lcd_Set_Cursor
                     _Lcd_Write_Char
                      _Lcd_Write_Int
                            ___lwdiv
                            ___lwmod
                             ___wmul
                              _delay
                            _readADC
                     _welcomeMessage
 ---------------------------------------------------------------------------------
 (1) _welcomeMessage                                      12    12      0    1720
                                             15 BANK0     12    12      0
                          _Lcd_Clear
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
                              _delay
                             _strcpy
 ---------------------------------------------------------------------------------
 (2) _strcpy                                               3     2      1     184
                                              5 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (2) _delay                                                3     3      0       0
                                              5 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) _Lcd_Set_Cursor                                       6     5      1     988
                                              9 BANK0      6     5      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Clear                                            2     2      0     110
                                              9 BANK0      2     2      0
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _readADC                                              8     6      2     208
                                              5 BANK0      8     6      2
 ---------------------------------------------------------------------------------
 (1) ___wmul                                               6     2      4     244
                                             17 BANK0      6     2      4
                            ___lwdiv (ARG)
                            ___lwmod (ARG)
 ---------------------------------------------------------------------------------
 (1) _Lcd_Write_Int                                       18    16      2    2622
                                             25 BANK0     18    16      2
                   _Lcd_Write_String
                               _utoa
 ---------------------------------------------------------------------------------
 (2) _utoa                                                 8     4      4    1879
                                             17 BANK0      8     4      4
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (1) ___lwmod                                              5     1      4     463
                                              5 BANK0      5     1      4
 ---------------------------------------------------------------------------------
 (1) ___lwdiv                                              7     3      4     770
                                             10 BANK0      7     3      4
                            ___lwmod (ARG)
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_String                                     4     4      0     367
                                             10 BANK0      4     4      0
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (3) _Lcd_Write_Char                                       4     4      0     178
                                              6 BANK0      4     4      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             2     2      0     198
                                              9 BANK0      2     2      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (3) _Lcd_Cmd                                              3     3      0     110
                                              6 BANK0      3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (4) _Lcd_Port                                             1     1      0      88
                                              5 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _isr                                                  2     2      0       0
                                              3 BANK0      2     2      0
                            i1_delay
 ---------------------------------------------------------------------------------
 (6) i1_delay                                              3     3      0       0
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Lcd_Clear
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Init
     _Lcd_Cmd
     _Lcd_Port
   _Lcd_Set_Cursor
     _Lcd_Cmd
   _Lcd_Write_Char
     _Lcd_Port
   _Lcd_Write_Int
     _Lcd_Write_String
       _Lcd_Write_Char
     _utoa
       ___lwdiv
         ___lwmod (ARG)
       ___lwmod
   ___lwdiv
   ___lwmod
   ___wmul
     ___lwdiv (ARG)
     ___lwmod (ARG)
   _delay
   _readADC
   _welcomeMessage
     _Lcd_Clear
     _Lcd_Set_Cursor
     _Lcd_Write_String
     _delay
     _strcpy

 _isr (ROOT)
   i1_delay

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               42     2F      3B       3       89.4%
BITBANK0            42      0       0       5        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               0      0       0       1        0.0%
BITCOMMON            0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      3B       6        0.0%
ABS                  0      0      3B       4        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA              40      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.41 build 20230208172133 
Symbol Table                                                                                   Tue May 02 14:39:24 2023

                       pc 0002                        l80 02B5                        l81 02B9  
                      l82 02BA                        l83 02BE                        l84 02BF  
                      l85 02C3                        l79 02B4                        fsr 0004  
     ___wmul@multiplicand 001F                       l223 0265                       l683 00DB  
                     _RA0 0028                       _RA1 0029                       _RA2 002A  
                     _RB1 0031                       _RB2 0032                       _RB3 0033  
                     _RB4 0034                       _RB5 0035                       _RB6 0036  
                     _RB7 0037                       u415 0243                       u505 01B1  
                     u435 0145                       u525 01C2                       u455 0151  
                     u535 01CB                       u640 0213                       u465 015D  
                     u705 026D                       u475 0167                       u565 0180  
                     u807 0256                       u817 01E0                       u585 0199  
                     u737 02DD                       u827 01EB                       u747 02ED  
                     u837 01F5                       u757 00F4                       u847 02CF  
                     u695 0266                       u767 00FA                       u777 0109  
                     u787 011B                       u797 024D                       _isr 030E  
                     fsr0 0004                       indf 0000                      l1121 0150  
                    l1201 00A0                      l1131 0171                      l1211 00BB  
                    l1127 0166                      l1119 0142                      l1143 01AE  
                    l1145 01BC                      l1153 01D5                      l1149 01CA  
                    l1317 025D                      l1191 027F                      l1175 018F  
                    l1273 00F2                      l1371 004E                      l1197 0299  
                    l1289 0107                      l1369 0030                      l1299 0116  
                    ?_isr 000C                      STR_1 0320         ?_Lcd_Write_String 000C  
                    _main 0022                      btemp 004E                      _utoa 009B  
         __end_ofi1_delay 0301                      start 000B        ??_Lcd_Write_String 0016  
         __end_of_Lcd_Cmd 02D7                     ??_isr 000F                     ?_main 000C  
                   ?_utoa 001D           __end_of___lwdiv 0176           __end_of___lwmod 01DA  
                   _TRISA 0085                     _TRISB 0086                     u85_27 02F9  
             readADC@bits 0017           __end_of_readADC 013A                     _delay 02D7  
             readADC@volt 0015                     pclath 000A                     utoa@c 0023  
                   utoa@v 0021                     status 0003                     wtemp0 004E  
        __end_of_Lcd_Init 020B          __end_of_Lcd_Port 02C5           __initialization 000C  
            __end_of_main 009B              __end_of_utoa 00EF                    ??_main 0000  
                  ??_utoa 0000                    ?_delay 000C                 ??i1_delay 000C  
               ??_Lcd_Cmd 0012          ??_welcomeMessage 001B                    _adcVal 0045  
                  ___wmul 025B                 ??___lwdiv 0000                 ??___lwmod 0000  
                  main@d1 0037                    main@d2 0039                    _strcpy 0296  
   __end_of_Lcd_Write_Int 030E                 ??_readADC 0013                    saved_w 004E  
         Lcd_Set_Cursor@a 0017           Lcd_Set_Cursor@b 0015           Lcd_Set_Cursor@y 0019  
         Lcd_Set_Cursor@z 0018   __end_of__initialization 0020         __end_of_Lcd_Clear 02F3  
          __pcstackCOMMON 0000              __pidataBANK0 0325             __end_of_delay 02E5  
          _Lcd_Set_Cursor 0176            _OPTION_REGbits 0081                 ?_Lcd_Init 000C  
                 ??_delay 0011                 ?_Lcd_Port 000C            Lcd_Write_Int@a 0025  
              __pbssBANK0 0043                __pmaintext 0022                   ?___wmul 001D  
              __pintentry 0004    __end_of_Lcd_Set_Cursor 01A8                   ?_strcpy 0011  
              ??_Lcd_Init 0015                ??_Lcd_Port 0000                __stringtab 031A  
                 i1_delay 02F3            _Lcd_Write_Char 0238                   _Lcd_Cmd 02C5  
                 ___lwdiv 013A                   ___lwmod 01A8             readADC@rxData 0018  
         ?_Lcd_Set_Cursor 0015                   __ptext1 020B                   __ptext2 0296  
                 __ptext3 02D7                   __ptext4 0176                   __ptext5 02E5  
                 __ptext6 00EF                   __ptext7 025B                   __ptext8 0301  
                 __ptext9 009B                   _readADC 00EF    __end_of_Lcd_Write_Char 025B  
    end_of_initialization 0020                 Lcd_Port@a 0011                   utoa@buf 0024  
       Lcd_Write_Int@temp 0027                   utoa@val 001D                _toggleHold 0043  
       welcomeMessage@msg 001F           ?_Lcd_Write_Char 000C         Lcd_Write_String@a 0019  
       Lcd_Write_String@i 0017                 _Lcd_Clear 02E5            __end_of___wmul 027C  
        _Lcd_Write_String 027C            __end_of_strcpy 02AE       start_initialization 000C  
             __end_of_isr 031A                ?_Lcd_Clear 000C                  ??___wmul 0000  
             __pdataBANK0 003B           Lcd_Write_Char@a 0015           Lcd_Write_Char@y 0014  
                ??_strcpy 0000                 ___latbits 0000             __pcstackBANK0 000C  
                ?i1_delay 000C                  ?_Lcd_Cmd 000C          ___lwdiv@dividend 0018  
        ??_Lcd_Set_Cursor 0016                  ?___lwdiv 0016                  ?___lwmod 0011  
               __pstrings 031A                  ?_readADC 0011             _Lcd_Write_Int 0301  
        ___lwdiv@quotient 001A         interrupt_function 0004            ___wmul@product 0021  
                Lcd_Cmd@a 0014               ??_Lcd_Clear 0015               __stringbase 031F  
       ___wmul@multiplier 001D            ?_Lcd_Write_Int 0025          ??_Lcd_Write_Char 0012  
                _Lcd_Init 01DA                  _Lcd_Port 02AE  __end_of_Lcd_Write_String 0296  
      __end_of__stringtab 0320            _welcomeMessage 020B           ___lwdiv@divisor 0016  
         ___lwdiv@counter 001C                  __ptext10 01A8                  __ptext11 013A  
                __ptext12 027C                  __ptext13 0238                  __ptext14 01DA  
                __ptext15 02C5                  __ptext16 02AE                  __ptext17 030E  
                __ptext18 02F3                strcpy@from 0011           ??_Lcd_Write_Int 0000  
  __end_of_welcomeMessage 0238                _INTCONbits 000B        Lcd_Write_Char@temp 0013  
                intlevel1 0000          ___lwmod@dividend 0013                 stringcode 031A  
      Lcd_Set_Cursor@temp 001A           ?_welcomeMessage 000C                  utoa@base 001F  
         ___lwmod@divisor 0011                  strcpy@cp 0013                  strcpy@to 0012  
         ___lwmod@counter 0015                  stringdir 031A                  stringtab 031A  
      welcomeMessage@F328 003B  



Microchip MPLAB XC8 Assembler V2.41 build 20230208172133 
                                                                                               Tue May 02 20:53:38 2023

Microchip MPLAB XC8 C Compiler v2.41 (Free license) build 20230208172133 Og9 
     1                           	processor	16F84A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2,noexec
     5                           	psect	strings,global,class=STRING,delta=2,noexec
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    11                           	psect	maintext,global,class=CODE,split=1,delta=2
    12                           	psect	text1,local,class=CODE,merge=1,delta=2
    13                           	psect	text2,local,class=CODE,merge=1,delta=2,group=2
    14                           	psect	text3,local,class=CODE,merge=1,delta=2
    15                           	psect	text4,local,class=CODE,merge=1,delta=2
    16                           	psect	text5,local,class=CODE,merge=1,delta=2
    17                           	psect	text6,local,class=CODE,merge=1,delta=2
    18                           	psect	text7,local,class=CODE,merge=1,delta=2
    19                           	psect	text8,local,class=CODE,merge=1,delta=2
    20                           	psect	text9,local,class=CODE,merge=1,delta=2,group=1
    21                           	psect	text10,local,class=CODE,merge=1,delta=2
    22                           	psect	text11,local,class=CODE,merge=1,delta=2,group=2
    23                           	psect	text12,local,class=CODE,merge=1,delta=2,group=1
    24                           	psect	text13,local,class=CODE,merge=1,delta=2,group=1
    25                           	psect	text14,local,class=CODE,merge=1,delta=2
    26                           	psect	text15,local,class=CODE,merge=1,delta=2
    27                           	psect	text16,local,class=CODE,merge=1,delta=2
    28                           	psect	text17,local,class=CODE,merge=1,delta=2
    29                           	psect	text18,local,class=CODE,merge=1,delta=2
    30                           	psect	text19,local,class=CODE,merge=1,delta=2
    31                           	psect	intentry,global,class=CODE,delta=2
    32                           	psect	text20,local,class=CODE,merge=1,delta=2
    33                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    34                           	dabs	1,0x4E,2
    35     0000                     
    36                           ; Version 2.20
    37                           ; Generated 12/02/2020 GMT
    38                           ; 
    39                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    40                           ; All rights reserved.
    41                           ; 
    42                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    43                           ; 
    44                           ; Redistribution and use in source and binary forms, with or without modification, are
    45                           ; permitted provided that the following conditions are met:
    46                           ; 
    47                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    48                           ;        conditions and the following disclaimer.
    49                           ; 
    50                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    51                           ;        of conditions and the following disclaimer in the documentation and/or other
    52                           ;        materials provided with the distribution.
    53                           ; 
    54                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    55                           ;        software without specific prior written permission.
    56                           ; 
    57                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    58                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    59                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    60                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    61                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    62                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    63                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    64                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    65                           ; 
    66                           ; 
    67                           ; Code-generator required, PIC16F84A Definitions
    68                           ; 
    69                           ; SFR Addresses
    70     0000                     	;# 
    71     0001                     	;# 
    72     0002                     	;# 
    73     0003                     	;# 
    74     0004                     	;# 
    75     0005                     	;# 
    76     0006                     	;# 
    77     0008                     	;# 
    78     0009                     	;# 
    79     000A                     	;# 
    80     000B                     	;# 
    81     0081                     	;# 
    82     0085                     	;# 
    83     0086                     	;# 
    84     0088                     	;# 
    85     0089                     	;# 
    86     0000                     	;# 
    87     0001                     	;# 
    88     0002                     	;# 
    89     0003                     	;# 
    90     0004                     	;# 
    91     0005                     	;# 
    92     0006                     	;# 
    93     0008                     	;# 
    94     0009                     	;# 
    95     000A                     	;# 
    96     000B                     	;# 
    97     0081                     	;# 
    98     0085                     	;# 
    99     0086                     	;# 
   100     0088                     	;# 
   101     0089                     	;# 
   102     0000                     	;# 
   103     0001                     	;# 
   104     0002                     	;# 
   105     0003                     	;# 
   106     0004                     	;# 
   107     0005                     	;# 
   108     0006                     	;# 
   109     0008                     	;# 
   110     0009                     	;# 
   111     000A                     	;# 
   112     000B                     	;# 
   113     0081                     	;# 
   114     0085                     	;# 
   115     0086                     	;# 
   116     0088                     	;# 
   117     0089                     	;# 
   118     0000                     	;# 
   119     0001                     	;# 
   120     0002                     	;# 
   121     0003                     	;# 
   122     0004                     	;# 
   123     0005                     	;# 
   124     0006                     	;# 
   125     0008                     	;# 
   126     0009                     	;# 
   127     000A                     	;# 
   128     000B                     	;# 
   129     0081                     	;# 
   130     0085                     	;# 
   131     0086                     	;# 
   132     0088                     	;# 
   133     0089                     	;# 
   134                           
   135                           	psect	idataBANK0
   136     03CB                     __pidataBANK0:
   137                           
   138                           ;initializer for welcomeMessage@F331
   139     03CB  3448               	retlw	72
   140     03CC  3469               	retlw	105
   141     03CD  3400               	retlw	0
   142     000B                     _INTCONbits	set	11
   143     002B                     _RA3	set	43
   144     0036                     _RB6	set	54
   145     002A                     _RA2	set	42
   146     0028                     _RA0	set	40
   147     0034                     _RB4	set	52
   148     0033                     _RB3	set	51
   149     0032                     _RB2	set	50
   150     0031                     _RB1	set	49
   151     0029                     _RA1	set	41
   152     0035                     _RB5	set	53
   153     0037                     _RB7	set	55
   154     0081                     _OPTION_REGbits	set	129
   155     0085                     _TRISA	set	133
   156     0086                     _TRISB	set	134
   157                           
   158                           	psect	strings
   159     03A0                     __pstrings:
   160     03A0                     stringtab:
   161     03A0                     __stringtab:
   162     03A0                     stringcode:	
   163                           ;	String table - string pointers are 1 byte each
   164                           
   165     03A0                     stringdir:
   166     03A0  3003               	movlw	high stringdir
   167     03A1  008A               	movwf	10
   168     03A2  0804               	movf	4,w
   169     03A3  0A84               	incf	4,f
   170     03A4  0782               	addwf	2,f
   171     03A5                     __stringbase:
   172     03A5  3400               	retlw	0
   173     03A6                     __end_of__stringtab:
   174     03A6                     STR_1:
   175     03A6  3430               	retlw	48	;'0'
   176     03A7  342D               	retlw	45	;'-'
   177     03A8  3435               	retlw	53	;'5'
   178     03A9  3456               	retlw	86	;'V'
   179     03AA  3400               	retlw	0
   180                           
   181                           	psect	cinit
   182     000C                     start_initialization:	
   183                           ; #config settings
   184                           
   185     000C                     __initialization:
   186                           
   187                           ; Initialize objects allocated to BANK0
   188     000C  23CB               	fcall	__pidataBANK0	;fetch initializer
   189     000D  00C7               	movwf	__pdataBANK0& (0+127)
   190     000E  23CC               	fcall	__pidataBANK0+1	;fetch initializer
   191     000F  00C8               	movwf	(__pdataBANK0+1)& (0+127)
   192     0010  23CD               	fcall	__pidataBANK0+2	;fetch initializer
   193     0011  00C9               	movwf	(__pdataBANK0+2)& (0+127)
   194                           
   195                           ; Clear objects allocated to BANK0
   196     0012  01C4               	clrf	__pbssBANK0& (0+127)
   197     0013  01C5               	clrf	(__pbssBANK0+1)& (0+127)
   198     0014  01C6               	clrf	(__pbssBANK0+2)& (0+127)
   199     0015                     end_of_initialization:	
   200                           ;End of C runtime variable initialization code
   201                           
   202     0015                     __end_of__initialization:
   203     0015  0183               	clrf	3
   204     0016  2817               	ljmp	_main	;jump to C main() function
   205                           
   206                           	psect	bssBANK0
   207     0044                     __pbssBANK0:
   208     0044                     _adcVal:
   209     0044                     	ds	2
   210     0046                     _toggleHold:
   211     0046                     	ds	1
   212                           
   213                           	psect	dataBANK0
   214     0047                     __pdataBANK0:
   215     0047                     welcomeMessage@F331:
   216     0047                     	ds	3
   217                           
   218                           	psect	cstackCOMMON
   219     0000                     __pcstackCOMMON:
   220     0000                     ??_strcpy:
   221     0000                     ??_Lcd_Write_Int:	
   222                           ; 1 bytes @ 0x0
   223                           
   224     0000                     ??_utoa:	
   225                           ; 1 bytes @ 0x0
   226                           
   227     0000                     ??_delay_1000ms:	
   228                           ; 1 bytes @ 0x0
   229                           
   230     0000                     ??_welcomeMessage:	
   231                           ; 1 bytes @ 0x0
   232                           
   233     0000                     ??_main:	
   234                           ; 1 bytes @ 0x0
   235                           
   236     0000                     ??_Lcd_Port:	
   237                           ; 1 bytes @ 0x0
   238                           
   239     0000                     ??___wmul:	
   240                           ; 1 bytes @ 0x0
   241                           
   242     0000                     ??___lwdiv:	
   243                           ; 1 bytes @ 0x0
   244                           
   245     0000                     ??___lwmod:	
   246                           ; 1 bytes @ 0x0
   247                           
   248                           
   249                           	psect	cstackBANK0
   250     000C                     __pcstackBANK0:	
   251                           ; 1 bytes @ 0x0
   252                           
   253     000C                     ?_Lcd_Clear:
   254     000C                     ?_Lcd_Write_String:	
   255                           ; 1 bytes @ 0x0
   256                           
   257     000C                     ?_Lcd_Init:	
   258                           ; 1 bytes @ 0x0
   259                           
   260     000C                     ?_Lcd_Write_Char:	
   261                           ; 1 bytes @ 0x0
   262                           
   263     000C                     ?_delay_100ms:	
   264                           ; 1 bytes @ 0x0
   265                           
   266     000C                     ?_delay_1000ms:	
   267                           ; 1 bytes @ 0x0
   268                           
   269     000C                     ?_isr:	
   270                           ; 1 bytes @ 0x0
   271                           
   272     000C                     ?_welcomeMessage:	
   273                           ; 1 bytes @ 0x0
   274                           
   275     000C                     ?_main:	
   276                           ; 1 bytes @ 0x0
   277                           
   278     000C                     ?_Lcd_Port:	
   279                           ; 1 bytes @ 0x0
   280                           
   281     000C                     ?_Lcd_Cmd:	
   282                           ; 1 bytes @ 0x0
   283                           
   284     000C                     ?i1_delay_100ms:	
   285                           ; 1 bytes @ 0x0
   286                           
   287     000C                     ??i1_delay_100ms:	
   288                           ; 1 bytes @ 0x0
   289                           
   290                           
   291                           ; 1 bytes @ 0x0
   292     000C                     	ds	2
   293     000E                     ??_isr:
   294                           
   295                           ; 1 bytes @ 0x2
   296     000E                     	ds	2
   297     0010                     ?_strcpy:
   298     0010                     ??_delay_100ms:	
   299                           ; 1 bytes @ 0x4
   300                           
   301     0010                     ?_readADC1:	
   302                           ; 1 bytes @ 0x4
   303                           
   304     0010                     ?_readADC2:	
   305                           ; 2 bytes @ 0x4
   306                           
   307     0010                     ?___lwmod:	
   308                           ; 2 bytes @ 0x4
   309                           
   310     0010                     Lcd_Port@a:	
   311                           ; 2 bytes @ 0x4
   312                           
   313     0010                     strcpy@from:	
   314                           ; 1 bytes @ 0x4
   315                           
   316     0010                     ___lwmod@divisor:	
   317                           ; 1 bytes @ 0x4
   318                           
   319                           
   320                           ; 2 bytes @ 0x4
   321     0010                     	ds	1
   322     0011                     ??_Lcd_Write_Char:
   323     0011                     ??_Lcd_Cmd:	
   324                           ; 1 bytes @ 0x5
   325                           
   326     0011                     strcpy@to:	
   327                           ; 1 bytes @ 0x5
   328                           
   329                           
   330                           ; 1 bytes @ 0x5
   331     0011                     	ds	1
   332     0012                     ??_readADC1:
   333     0012                     ??_readADC2:	
   334                           ; 1 bytes @ 0x6
   335                           
   336     0012                     Lcd_Write_Char@temp:	
   337                           ; 1 bytes @ 0x6
   338                           
   339     0012                     strcpy@cp:	
   340                           ; 1 bytes @ 0x6
   341                           
   342     0012                     delay_1000ms@i:	
   343                           ; 1 bytes @ 0x6
   344                           
   345     0012                     ___lwmod@dividend:	
   346                           ; 2 bytes @ 0x6
   347                           
   348                           
   349                           ; 2 bytes @ 0x6
   350     0012                     	ds	1
   351     0013                     Lcd_Cmd@a:
   352     0013                     Lcd_Write_Char@y:	
   353                           ; 1 bytes @ 0x7
   354                           
   355                           
   356                           ; 1 bytes @ 0x7
   357     0013                     	ds	1
   358     0014                     ??_Lcd_Clear:
   359     0014                     ?_Lcd_Set_Cursor:	
   360                           ; 1 bytes @ 0x8
   361                           
   362     0014                     ??_Lcd_Init:	
   363                           ; 1 bytes @ 0x8
   364                           
   365     0014                     Lcd_Set_Cursor@b:	
   366                           ; 1 bytes @ 0x8
   367                           
   368     0014                     Lcd_Write_Char@a:	
   369                           ; 1 bytes @ 0x8
   370                           
   371     0014                     ___lwmod@counter:	
   372                           ; 1 bytes @ 0x8
   373                           
   374     0014                     readADC1@volt:	
   375                           ; 1 bytes @ 0x8
   376                           
   377     0014                     readADC2@volt:	
   378                           ; 2 bytes @ 0x8
   379                           
   380                           
   381                           ; 2 bytes @ 0x8
   382     0014                     	ds	1
   383     0015                     ??_Lcd_Set_Cursor:
   384     0015                     ??_Lcd_Write_String:	
   385                           ; 1 bytes @ 0x9
   386                           
   387     0015                     ?___wmul:	
   388                           ; 1 bytes @ 0x9
   389                           
   390     0015                     ___wmul@multiplier:	
   391                           ; 2 bytes @ 0x9
   392                           
   393                           
   394                           ; 2 bytes @ 0x9
   395     0015                     	ds	1
   396     0016                     Lcd_Set_Cursor@a:
   397     0016                     readADC1@bits:	
   398                           ; 1 bytes @ 0xA
   399                           
   400     0016                     readADC2@bits:	
   401                           ; 1 bytes @ 0xA
   402                           
   403     0016                     Lcd_Write_String@i:	
   404                           ; 1 bytes @ 0xA
   405                           
   406                           
   407                           ; 2 bytes @ 0xA
   408     0016                     	ds	1
   409     0017                     Lcd_Set_Cursor@z:
   410     0017                     readADC1@rxData:	
   411                           ; 1 bytes @ 0xB
   412                           
   413     0017                     readADC2@rxData:	
   414                           ; 1 bytes @ 0xB
   415                           
   416     0017                     ___wmul@multiplicand:	
   417                           ; 1 bytes @ 0xB
   418                           
   419                           
   420                           ; 2 bytes @ 0xB
   421     0017                     	ds	1
   422     0018                     Lcd_Set_Cursor@y:
   423     0018                     Lcd_Write_String@a:	
   424                           ; 1 bytes @ 0xC
   425                           
   426                           
   427                           ; 1 bytes @ 0xC
   428     0018                     	ds	1
   429     0019                     Lcd_Set_Cursor@temp:
   430     0019                     ___wmul@product:	
   431                           ; 1 bytes @ 0xD
   432                           
   433                           
   434                           ; 2 bytes @ 0xD
   435     0019                     	ds	1
   436     001A                     welcomeMessage@msg:
   437                           
   438                           ; 3 bytes @ 0xE
   439     001A                     	ds	1
   440     001B                     ?___lwdiv:
   441     001B                     ___lwdiv@divisor:	
   442                           ; 2 bytes @ 0xF
   443                           
   444                           
   445                           ; 2 bytes @ 0xF
   446     001B                     	ds	2
   447     001D                     ___lwdiv@dividend:
   448                           
   449                           ; 2 bytes @ 0x11
   450     001D                     	ds	2
   451     001F                     ___lwdiv@quotient:
   452                           
   453                           ; 2 bytes @ 0x13
   454     001F                     	ds	2
   455     0021                     ___lwdiv@counter:
   456                           
   457                           ; 1 bytes @ 0x15
   458     0021                     	ds	1
   459     0022                     ?_utoa:
   460     0022                     utoa@val:	
   461                           ; 1 bytes @ 0x16
   462                           
   463                           
   464                           ; 2 bytes @ 0x16
   465     0022                     	ds	2
   466     0024                     utoa@base:
   467                           
   468                           ; 2 bytes @ 0x18
   469     0024                     	ds	2
   470     0026                     utoa@v:
   471                           
   472                           ; 2 bytes @ 0x1A
   473     0026                     	ds	2
   474     0028                     utoa@c:
   475                           
   476                           ; 1 bytes @ 0x1C
   477     0028                     	ds	1
   478     0029                     utoa@buf:
   479                           
   480                           ; 1 bytes @ 0x1D
   481     0029                     	ds	1
   482     002A                     ?_Lcd_Write_Int:
   483     002A                     Lcd_Write_Int@a:	
   484                           ; 1 bytes @ 0x1E
   485                           
   486                           
   487                           ; 2 bytes @ 0x1E
   488     002A                     	ds	2
   489     002C                     Lcd_Write_Int@temp:
   490                           
   491                           ; 16 bytes @ 0x20
   492     002C                     	ds	16
   493     003C                     main@d1:
   494                           
   495                           ; 2 bytes @ 0x30
   496     003C                     	ds	2
   497     003E                     main@d2:
   498                           
   499                           ; 2 bytes @ 0x32
   500     003E                     	ds	2
   501     0040                     main@d3:
   502                           
   503                           ; 2 bytes @ 0x34
   504     0040                     	ds	2
   505     0042                     main@d4:
   506                           
   507                           ; 2 bytes @ 0x36
   508     0042                     	ds	2
   509                           
   510                           	psect	maintext
   511     0017                     __pmaintext:	
   512 ;;
   513 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   514 ;;
   515 ;; *************** function _main *****************
   516 ;; Defined at:
   517 ;;		line 72 in file "main.c"
   518 ;; Parameters:    Size  Location     Type
   519 ;;		None
   520 ;; Auto vars:     Size  Location     Type
   521 ;;  d4              2   54[BANK0 ] unsigned short 
   522 ;;  d3              2   52[BANK0 ] unsigned short 
   523 ;;  d2              2   50[BANK0 ] unsigned short 
   524 ;;  d1              2   48[BANK0 ] unsigned short 
   525 ;; Return value:  Size  Location     Type
   526 ;;                  1    wreg      void 
   527 ;; Registers used:
   528 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   529 ;; Tracked objects:
   530 ;;		On entry : B00/0
   531 ;;		On exit  : 0/0
   532 ;;		Unchanged: 0/0
   533 ;; Data sizes:     COMMON   BANK0
   534 ;;      Params:         0       0
   535 ;;      Locals:         0       8
   536 ;;      Temps:          0       0
   537 ;;      Totals:         0       8
   538 ;;Total ram usage:        8 bytes
   539 ;; Hardware stack levels required when called: 6
   540 ;; This function calls:
   541 ;;		_Lcd_Clear
   542 ;;		_Lcd_Init
   543 ;;		_Lcd_Set_Cursor
   544 ;;		_Lcd_Write_Char
   545 ;;		_Lcd_Write_Int
   546 ;;		___lwdiv
   547 ;;		___lwmod
   548 ;;		___wmul
   549 ;;		_delay_100ms
   550 ;;		_readADC1
   551 ;;		_readADC2
   552 ;;		_welcomeMessage
   553 ;; This function is called by:
   554 ;;		Startup code after reset
   555 ;; This function uses a non-reentrant model
   556 ;;
   557                           
   558     0017                     _main:	
   559                           ;psect for function _main
   560                           
   561                           
   562                           ;main.c: 74:     TRISB = 0b01000001;
   563                           
   564                           ;incstack = 0
   565                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   566     0017  3041               	movlw	65
   567     0018  1683               	bsf	3,5	;RP0=1, select bank1
   568     0019  0086               	movwf	6	;volatile
   569                           
   570                           ;main.c: 75:     TRISA = 0b01000;
   571     001A  3008               	movlw	8
   572     001B  0085               	movwf	5	;volatile
   573                           
   574                           ;main.c: 77:     RB7 = 1;
   575     001C  1283               	bcf	3,5	;RP0=0, select bank0
   576     001D  1786               	bsf	6,7	;volatile
   577                           
   578                           ;main.c: 78:     RB5 = 0;
   579     001E  1286               	bcf	6,5	;volatile
   580                           
   581                           ;main.c: 80:     RA1 = 0;
   582     001F  1085               	bcf	5,1	;volatile
   583                           
   584                           ;main.c: 84:     OPTION_REGbits.INTEDG = 1;
   585     0020  1683               	bsf	3,5	;RP0=1, select bank1
   586     0021  1701               	bsf	1,6	;volatile
   587                           
   588                           ;main.c: 86:     INTCONbits.INTE = 1;
   589     0022  160B               	bsf	11,4	;volatile
   590                           
   591                           ;main.c: 88:     INTCONbits.GIE = 1;
   592     0023  178B               	bsf	11,7	;volatile
   593                           
   594                           ;main.c: 90:     Lcd_Init();
   595     0024  2281               	fcall	_Lcd_Init
   596                           
   597                           ;main.c: 91:     welcomeMessage();
   598     0025  22F6               	fcall	_welcomeMessage
   599     0026                     l1535:
   600                           
   601                           ;main.c: 97:         while (toggleHold) {
   602     0026  1283               	bcf	3,5	;RP0=0, select bank0
   603     0027  0846               	movf	_toggleHold,w	;volatile
   604     0028  1903               	btfsc	3,2
   605     0029  285B               	goto	l1537
   606                           
   607                           ;main.c: 98:             Lcd_Set_Cursor(1, 1);
   608     002A  0194               	clrf	Lcd_Set_Cursor@b
   609     002B  0A94               	incf	Lcd_Set_Cursor@b,f
   610     002C  3001               	movlw	1
   611     002D  221D               	fcall	_Lcd_Set_Cursor
   612                           
   613                           ;main.c: 99:             Lcd_Write_Int(d1);
   614     002E  083D               	movf	main@d1+1,w
   615     002F  00AB               	movwf	Lcd_Write_Int@a+1
   616     0030  083C               	movf	main@d1,w
   617     0031  00AA               	movwf	Lcd_Write_Int@a
   618     0032  2393               	fcall	_Lcd_Write_Int
   619                           
   620                           ;main.c: 100:             Lcd_Set_Cursor(1, 2);
   621     0033  3002               	movlw	2
   622     0034  0094               	movwf	Lcd_Set_Cursor@b
   623     0035  3001               	movlw	1
   624     0036  221D               	fcall	_Lcd_Set_Cursor
   625                           
   626                           ;main.c: 101:             Lcd_Write_Char('.');
   627     0037  302E               	movlw	46
   628     0038  22B2               	fcall	_Lcd_Write_Char
   629                           
   630                           ;main.c: 102:             Lcd_Set_Cursor(1, 3);
   631     0039  3003               	movlw	3
   632     003A  0094               	movwf	Lcd_Set_Cursor@b
   633     003B  3001               	movlw	1
   634     003C  221D               	fcall	_Lcd_Set_Cursor
   635                           
   636                           ;main.c: 103:             Lcd_Write_Int(d2);
   637     003D  083F               	movf	main@d2+1,w
   638     003E  00AB               	movwf	Lcd_Write_Int@a+1
   639     003F  083E               	movf	main@d2,w
   640     0040  00AA               	movwf	Lcd_Write_Int@a
   641     0041  2393               	fcall	_Lcd_Write_Int
   642                           
   643                           ;main.c: 104:             Lcd_Set_Cursor(1, 6);
   644     0042  3006               	movlw	6
   645     0043  0094               	movwf	Lcd_Set_Cursor@b
   646     0044  3001               	movlw	1
   647     0045  221D               	fcall	_Lcd_Set_Cursor
   648                           
   649                           ;main.c: 105:             Lcd_Write_Int(d3);
   650     0046  0841               	movf	main@d3+1,w
   651     0047  00AB               	movwf	Lcd_Write_Int@a+1
   652     0048  0840               	movf	main@d3,w
   653     0049  00AA               	movwf	Lcd_Write_Int@a
   654     004A  2393               	fcall	_Lcd_Write_Int
   655                           
   656                           ;main.c: 106:             Lcd_Set_Cursor(1, 7);
   657     004B  3007               	movlw	7
   658     004C  0094               	movwf	Lcd_Set_Cursor@b
   659     004D  3001               	movlw	1
   660     004E  221D               	fcall	_Lcd_Set_Cursor
   661                           
   662                           ;main.c: 107:             Lcd_Write_Char('.');
   663     004F  302E               	movlw	46
   664     0050  22B2               	fcall	_Lcd_Write_Char
   665                           
   666                           ;main.c: 108:             Lcd_Set_Cursor(1, 8);
   667     0051  3008               	movlw	8
   668     0052  0094               	movwf	Lcd_Set_Cursor@b
   669     0053  3001               	movlw	1
   670     0054  221D               	fcall	_Lcd_Set_Cursor
   671                           
   672                           ;main.c: 109:             Lcd_Write_Int(d4);
   673     0055  0843               	movf	main@d4+1,w
   674     0056  00AB               	movwf	Lcd_Write_Int@a+1
   675     0057  0842               	movf	main@d4,w
   676     0058  00AA               	movwf	Lcd_Write_Int@a
   677     0059  2393               	fcall	_Lcd_Write_Int
   678     005A  2826               	goto	l1535
   679     005B                     l1537:
   680                           
   681                           ;main.c: 112:         adcVal = readADC1();
   682     005B  2196               	fcall	_readADC1
   683     005C  0811               	movf	?_readADC1+1,w
   684     005D  00C5               	movwf	_adcVal+1
   685     005E  0810               	movf	?_readADC1,w
   686     005F  00C4               	movwf	_adcVal
   687                           
   688                           ;main.c: 113:         d1 = adcVal / 204;
   689     0060  30CC               	movlw	204
   690     0061  009B               	movwf	___lwdiv@divisor
   691     0062  3000               	movlw	0
   692     0063  009C               	movwf	___lwdiv@divisor+1
   693     0064  0845               	movf	_adcVal+1,w
   694     0065  009E               	movwf	___lwdiv@dividend+1
   695     0066  0844               	movf	_adcVal,w
   696     0067  009D               	movwf	___lwdiv@dividend
   697     0068  21E1               	fcall	___lwdiv
   698     0069  081C               	movf	?___lwdiv+1,w
   699     006A  00BD               	movwf	main@d1+1
   700     006B  081B               	movf	?___lwdiv,w
   701     006C  00BC               	movwf	main@d1
   702                           
   703                           ;main.c: 114:         d2 = ((adcVal % 204)*10/ 204);
   704     006D  30CC               	movlw	204
   705     006E  009B               	movwf	___lwdiv@divisor
   706     006F  3000               	movlw	0
   707     0070  009C               	movwf	___lwdiv@divisor+1
   708     0071  0845               	movf	_adcVal+1,w
   709     0072  0093               	movwf	___lwmod@dividend+1
   710     0073  0844               	movf	_adcVal,w
   711     0074  0092               	movwf	___lwmod@dividend
   712     0075  30CC               	movlw	204
   713     0076  0090               	movwf	___lwmod@divisor
   714     0077  3000               	movlw	0
   715     0078  0091               	movwf	___lwmod@divisor+1
   716     0079  224F               	fcall	___lwmod
   717     007A  0811               	movf	?___lwmod+1,w
   718     007B  0096               	movwf	___wmul@multiplier+1
   719     007C  0810               	movf	?___lwmod,w
   720     007D  0095               	movwf	___wmul@multiplier
   721     007E  300A               	movlw	10
   722     007F  0097               	movwf	___wmul@multiplicand
   723     0080  3000               	movlw	0
   724     0081  0098               	movwf	___wmul@multiplicand+1
   725     0082  22D5               	fcall	___wmul
   726     0083  0816               	movf	?___wmul+1,w
   727     0084  009E               	movwf	___lwdiv@dividend+1
   728     0085  0815               	movf	?___wmul,w
   729     0086  009D               	movwf	___lwdiv@dividend
   730     0087  21E1               	fcall	___lwdiv
   731     0088  081C               	movf	?___lwdiv+1,w
   732     0089  00BF               	movwf	main@d2+1
   733     008A  081B               	movf	?___lwdiv,w
   734     008B  00BE               	movwf	main@d2
   735                           
   736                           ;main.c: 115:         adcVal = readADC2();
   737     008C  214B               	fcall	_readADC2
   738     008D  0811               	movf	?_readADC2+1,w
   739     008E  00C5               	movwf	_adcVal+1
   740     008F  0810               	movf	?_readADC2,w
   741     0090  00C4               	movwf	_adcVal
   742                           
   743                           ;main.c: 116:         d3 = adcVal / 204;
   744     0091  30CC               	movlw	204
   745     0092  009B               	movwf	___lwdiv@divisor
   746     0093  3000               	movlw	0
   747     0094  009C               	movwf	___lwdiv@divisor+1
   748     0095  0845               	movf	_adcVal+1,w
   749     0096  009E               	movwf	___lwdiv@dividend+1
   750     0097  0844               	movf	_adcVal,w
   751     0098  009D               	movwf	___lwdiv@dividend
   752     0099  21E1               	fcall	___lwdiv
   753     009A  081C               	movf	?___lwdiv+1,w
   754     009B  00C1               	movwf	main@d3+1
   755     009C  081B               	movf	?___lwdiv,w
   756     009D  00C0               	movwf	main@d3
   757                           
   758                           ;main.c: 117:         d4 = ((adcVal % 204)*10/ 204);
   759     009E  30CC               	movlw	204
   760     009F  009B               	movwf	___lwdiv@divisor
   761     00A0  3000               	movlw	0
   762     00A1  009C               	movwf	___lwdiv@divisor+1
   763     00A2  0845               	movf	_adcVal+1,w
   764     00A3  0093               	movwf	___lwmod@dividend+1
   765     00A4  0844               	movf	_adcVal,w
   766     00A5  0092               	movwf	___lwmod@dividend
   767     00A6  30CC               	movlw	204
   768     00A7  0090               	movwf	___lwmod@divisor
   769     00A8  3000               	movlw	0
   770     00A9  0091               	movwf	___lwmod@divisor+1
   771     00AA  224F               	fcall	___lwmod
   772     00AB  0811               	movf	?___lwmod+1,w
   773     00AC  0096               	movwf	___wmul@multiplier+1
   774     00AD  0810               	movf	?___lwmod,w
   775     00AE  0095               	movwf	___wmul@multiplier
   776     00AF  300A               	movlw	10
   777     00B0  0097               	movwf	___wmul@multiplicand
   778     00B1  3000               	movlw	0
   779     00B2  0098               	movwf	___wmul@multiplicand+1
   780     00B3  22D5               	fcall	___wmul
   781     00B4  0816               	movf	?___wmul+1,w
   782     00B5  009E               	movwf	___lwdiv@dividend+1
   783     00B6  0815               	movf	?___wmul,w
   784     00B7  009D               	movwf	___lwdiv@dividend
   785     00B8  21E1               	fcall	___lwdiv
   786     00B9  081C               	movf	?___lwdiv+1,w
   787     00BA  00C3               	movwf	main@d4+1
   788     00BB  081B               	movf	?___lwdiv,w
   789     00BC  00C2               	movwf	main@d4
   790                           
   791                           ;main.c: 120:         Lcd_Clear();
   792     00BD  2385               	fcall	_Lcd_Clear
   793                           
   794                           ;main.c: 121:         Lcd_Set_Cursor(1, 1);
   795     00BE  1283               	bcf	3,5	;RP0=0, select bank0
   796     00BF  0194               	clrf	Lcd_Set_Cursor@b
   797     00C0  0A94               	incf	Lcd_Set_Cursor@b,f
   798     00C1  3001               	movlw	1
   799     00C2  221D               	fcall	_Lcd_Set_Cursor
   800                           
   801                           ;main.c: 122:         Lcd_Write_Int(d1);
   802     00C3  083D               	movf	main@d1+1,w
   803     00C4  00AB               	movwf	Lcd_Write_Int@a+1
   804     00C5  083C               	movf	main@d1,w
   805     00C6  00AA               	movwf	Lcd_Write_Int@a
   806     00C7  2393               	fcall	_Lcd_Write_Int
   807                           
   808                           ;main.c: 123:         Lcd_Set_Cursor(1, 2);
   809     00C8  3002               	movlw	2
   810     00C9  0094               	movwf	Lcd_Set_Cursor@b
   811     00CA  3001               	movlw	1
   812     00CB  221D               	fcall	_Lcd_Set_Cursor
   813                           
   814                           ;main.c: 124:         Lcd_Write_Char('.');
   815     00CC  302E               	movlw	46
   816     00CD  22B2               	fcall	_Lcd_Write_Char
   817                           
   818                           ;main.c: 125:         Lcd_Set_Cursor(1, 3);
   819     00CE  3003               	movlw	3
   820     00CF  0094               	movwf	Lcd_Set_Cursor@b
   821     00D0  3001               	movlw	1
   822     00D1  221D               	fcall	_Lcd_Set_Cursor
   823                           
   824                           ;main.c: 126:         Lcd_Write_Int(d2);
   825     00D2  083F               	movf	main@d2+1,w
   826     00D3  00AB               	movwf	Lcd_Write_Int@a+1
   827     00D4  083E               	movf	main@d2,w
   828     00D5  00AA               	movwf	Lcd_Write_Int@a
   829     00D6  2393               	fcall	_Lcd_Write_Int
   830                           
   831                           ;main.c: 127:         Lcd_Set_Cursor(1, 6);
   832     00D7  3006               	movlw	6
   833     00D8  0094               	movwf	Lcd_Set_Cursor@b
   834     00D9  3001               	movlw	1
   835     00DA  221D               	fcall	_Lcd_Set_Cursor
   836                           
   837                           ;main.c: 128:         Lcd_Write_Int(d3);
   838     00DB  0841               	movf	main@d3+1,w
   839     00DC  00AB               	movwf	Lcd_Write_Int@a+1
   840     00DD  0840               	movf	main@d3,w
   841     00DE  00AA               	movwf	Lcd_Write_Int@a
   842     00DF  2393               	fcall	_Lcd_Write_Int
   843                           
   844                           ;main.c: 129:         Lcd_Set_Cursor(1, 7);
   845     00E0  3007               	movlw	7
   846     00E1  0094               	movwf	Lcd_Set_Cursor@b
   847     00E2  3001               	movlw	1
   848     00E3  221D               	fcall	_Lcd_Set_Cursor
   849                           
   850                           ;main.c: 130:         Lcd_Write_Char('.');
   851     00E4  302E               	movlw	46
   852     00E5  22B2               	fcall	_Lcd_Write_Char
   853                           
   854                           ;main.c: 131:         Lcd_Set_Cursor(1, 8);
   855     00E6  3008               	movlw	8
   856     00E7  0094               	movwf	Lcd_Set_Cursor@b
   857     00E8  3001               	movlw	1
   858     00E9  221D               	fcall	_Lcd_Set_Cursor
   859                           
   860                           ;main.c: 132:         Lcd_Write_Int(d4);
   861     00EA  0843               	movf	main@d4+1,w
   862     00EB  00AB               	movwf	Lcd_Write_Int@a+1
   863     00EC  0842               	movf	main@d4,w
   864     00ED  00AA               	movwf	Lcd_Write_Int@a
   865     00EE  2393               	fcall	_Lcd_Write_Int
   866                           
   867                           ;main.c: 133:         Lcd_Set_Cursor(1, 9);
   868     00EF  3009               	movlw	9
   869     00F0  0094               	movwf	Lcd_Set_Cursor@b
   870     00F1  3001               	movlw	1
   871     00F2  221D               	fcall	_Lcd_Set_Cursor
   872                           
   873                           ;main.c: 134:         Lcd_Write_Char('V');
   874     00F3  3056               	movlw	86
   875     00F4  22B2               	fcall	_Lcd_Write_Char
   876                           
   877                           ;main.c: 135:         delay_100ms();
   878     00F5  23AB               	fcall	_delay_100ms
   879     00F6  2826               	goto	l1535
   880     00F7                     __end_of_main:
   881                           
   882                           	psect	text1
   883     02F6                     __ptext1:	
   884 ;; *************** function _welcomeMessage *****************
   885 ;; Defined at:
   886 ;;		line 52 in file "main.c"
   887 ;; Parameters:    Size  Location     Type
   888 ;;		None
   889 ;; Auto vars:     Size  Location     Type
   890 ;;  msg             3   14[BANK0 ] unsigned char [3]
   891 ;; Return value:  Size  Location     Type
   892 ;;                  1    wreg      void 
   893 ;; Registers used:
   894 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   895 ;; Tracked objects:
   896 ;;		On entry : 100/0
   897 ;;		On exit  : 0/0
   898 ;;		Unchanged: 0/0
   899 ;; Data sizes:     COMMON   BANK0
   900 ;;      Params:         0       0
   901 ;;      Locals:         0       3
   902 ;;      Temps:          0       0
   903 ;;      Totals:         0       3
   904 ;;Total ram usage:        3 bytes
   905 ;; Hardware stack levels used: 1
   906 ;; Hardware stack levels required when called: 5
   907 ;; This function calls:
   908 ;;		_Lcd_Clear
   909 ;;		_Lcd_Set_Cursor
   910 ;;		_Lcd_Write_String
   911 ;;		_delay_1000ms
   912 ;;		_strcpy
   913 ;; This function is called by:
   914 ;;		_main
   915 ;; This function uses a non-reentrant model
   916 ;;
   917                           
   918     02F6                     _welcomeMessage:	
   919                           ;psect for function _welcomeMessage
   920                           
   921                           
   922                           ;main.c: 54:     char msg[] = "Hi";
   923                           
   924                           ;incstack = 0
   925                           ; Regs used in _welcomeMessage: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   926     02F6  0847               	movf	welcomeMessage@F331,w
   927     02F7  009A               	movwf	welcomeMessage@msg
   928     02F8  0848               	movf	welcomeMessage@F331+1,w
   929     02F9  009B               	movwf	welcomeMessage@msg+1
   930     02FA  0849               	movf	welcomeMessage@F331+2,w
   931     02FB  009C               	movwf	welcomeMessage@msg+2
   932                           
   933                           ;main.c: 55:     Lcd_Clear();
   934     02FC  2385               	fcall	_Lcd_Clear
   935                           
   936                           ;main.c: 56:     Lcd_Set_Cursor(1, 1);
   937     02FD  1283               	bcf	3,5	;RP0=0, select bank0
   938     02FE  0194               	clrf	Lcd_Set_Cursor@b
   939     02FF  0A94               	incf	Lcd_Set_Cursor@b,f
   940     0300  3001               	movlw	1
   941     0301  221D               	fcall	_Lcd_Set_Cursor
   942                           
   943                           ;main.c: 57:     Lcd_Write_String(msg);
   944     0302  301A               	movlw	(low (welcomeMessage@msg| 0))& (0+255)
   945     0303  2314               	fcall	_Lcd_Write_String
   946                           
   947                           ;main.c: 58:     delay_1000ms();
   948     0304  235D               	fcall	_delay_1000ms
   949                           
   950                           ;main.c: 59:     Lcd_Clear();
   951     0305  2385               	fcall	_Lcd_Clear
   952                           
   953                           ;main.c: 60:     Lcd_Set_Cursor(1, 1);
   954     0306  1283               	bcf	3,5	;RP0=0, select bank0
   955     0307  0194               	clrf	Lcd_Set_Cursor@b
   956     0308  0A94               	incf	Lcd_Set_Cursor@b,f
   957     0309  3001               	movlw	1
   958     030A  221D               	fcall	_Lcd_Set_Cursor
   959                           
   960                           ;main.c: 61:     strcpy(msg, "0-5V");
   961     030B  3001               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   962     030C  0090               	movwf	strcpy@from
   963     030D  301A               	movlw	(low (welcomeMessage@msg| 0))& (0+255)
   964     030E  232E               	fcall	_strcpy
   965                           
   966                           ;main.c: 63:     Lcd_Write_String(msg);
   967     030F  301A               	movlw	(low (welcomeMessage@msg| 0))& (0+255)
   968     0310  2314               	fcall	_Lcd_Write_String
   969                           
   970                           ;main.c: 64:     delay_1000ms();
   971     0311  235D               	fcall	_delay_1000ms
   972                           
   973                           ;main.c: 65:     Lcd_Clear();
   974     0312  2385               	fcall	_Lcd_Clear
   975     0313  0008               	return
   976     0314                     __end_of_welcomeMessage:
   977                           
   978                           	psect	text2
   979     032E                     __ptext2:	
   980 ;; *************** function _strcpy *****************
   981 ;; Defined at:
   982 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\strcpy.c"
   983 ;; Parameters:    Size  Location     Type
   984 ;;  to              1    wreg     PTR unsigned char 
   985 ;;		 -> welcomeMessage@msg(3), 
   986 ;;  from            1    4[BANK0 ] PTR const unsigned char 
   987 ;;		 -> STR_1(5), 
   988 ;; Auto vars:     Size  Location     Type
   989 ;;  to              1    5[BANK0 ] PTR unsigned char 
   990 ;;		 -> welcomeMessage@msg(3), 
   991 ;;  cp              1    6[BANK0 ] PTR unsigned char 
   992 ;;		 -> welcomeMessage@msg(3), 
   993 ;; Return value:  Size  Location     Type
   994 ;;                  1    wreg      PTR unsigned char 
   995 ;; Registers used:
   996 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath
   997 ;; Tracked objects:
   998 ;;		On entry : 100/0
   999 ;;		On exit  : 900/0
  1000 ;;		Unchanged: 0/0
  1001 ;; Data sizes:     COMMON   BANK0
  1002 ;;      Params:         0       1
  1003 ;;      Locals:         0       2
  1004 ;;      Temps:          0       0
  1005 ;;      Totals:         0       3
  1006 ;;Total ram usage:        3 bytes
  1007 ;; Hardware stack levels used: 1
  1008 ;; Hardware stack levels required when called: 2
  1009 ;; This function calls:
  1010 ;;		Nothing
  1011 ;; This function is called by:
  1012 ;;		_welcomeMessage
  1013 ;; This function uses a non-reentrant model
  1014 ;;
  1015                           
  1016     032E                     _strcpy:	
  1017                           ;psect for function _strcpy
  1018                           
  1019                           
  1020                           ;incstack = 0
  1021                           ; Regs used in _strcpy: [wreg-fsr0h+status,2+status,0+btemp+1+pclath]
  1022                           ;strcpy@to stored from wreg
  1023     032E  0091               	movwf	strcpy@to
  1024     032F  0811               	movf	strcpy@to,w
  1025     0330  0092               	movwf	strcpy@cp
  1026     0331                     l1309:
  1027     0331  0810               	movf	strcpy@from,w
  1028     0332  0084               	movwf	4
  1029     0333  23A0               	fcall	stringdir
  1030     0334  00CF               	movwf	79
  1031     0335  0812               	movf	strcpy@cp,w
  1032     0336  0084               	movwf	4
  1033     0337  084F               	movf	79,w
  1034     0338  1383               	bcf	3,7	;select IRP bank0
  1035     0339  0080               	movwf	0
  1036     033A  0800               	movf	0,w
  1037     033B  1903               	btfsc	3,2
  1038     033C  0008               	return
  1039     033D  3001               	movlw	1
  1040     033E  00CF               	movwf	79
  1041     033F  084F               	movf	79,w
  1042     0340  0792               	addwf	strcpy@cp,f
  1043     0341  3001               	movlw	1
  1044     0342  00CF               	movwf	79
  1045     0343  084F               	movf	79,w
  1046     0344  0790               	addwf	strcpy@from,f
  1047     0345  2B31               	goto	l1309
  1048     0346                     __end_of_strcpy:
  1049                           
  1050                           	psect	text3
  1051     035D                     __ptext3:	
  1052 ;; *************** function _delay_1000ms *****************
  1053 ;; Defined at:
  1054 ;;		line 31 in file "main.c"
  1055 ;; Parameters:    Size  Location     Type
  1056 ;;		None
  1057 ;; Auto vars:     Size  Location     Type
  1058 ;;  i               2    6[BANK0 ] int 
  1059 ;; Return value:  Size  Location     Type
  1060 ;;                  1    wreg      void 
  1061 ;; Registers used:
  1062 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  1063 ;; Tracked objects:
  1064 ;;		On entry : 900/0
  1065 ;;		On exit  : 0/0
  1066 ;;		Unchanged: 0/0
  1067 ;; Data sizes:     COMMON   BANK0
  1068 ;;      Params:         0       0
  1069 ;;      Locals:         0       2
  1070 ;;      Temps:          0       0
  1071 ;;      Totals:         0       2
  1072 ;;Total ram usage:        2 bytes
  1073 ;; Hardware stack levels used: 1
  1074 ;; Hardware stack levels required when called: 3
  1075 ;; This function calls:
  1076 ;;		_delay_100ms
  1077 ;; This function is called by:
  1078 ;;		_welcomeMessage
  1079 ;; This function uses a non-reentrant model
  1080 ;;
  1081                           
  1082     035D                     _delay_1000ms:	
  1083                           ;psect for function _delay_1000ms
  1084                           
  1085                           
  1086                           ;main.c: 32:     for (int i = 0; i < 20; i++) {
  1087                           
  1088                           ;incstack = 0
  1089                           ; Regs used in _delay_1000ms: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  1090     035D  0192               	clrf	delay_1000ms@i
  1091     035E  0193               	clrf	delay_1000ms@i+1
  1092     035F                     l1267:
  1093                           
  1094                           ;main.c: 33:         delay_100ms();
  1095     035F  23AB               	fcall	_delay_100ms
  1096                           
  1097                           ;main.c: 34:     }
  1098     0360  3001               	movlw	1
  1099     0361  1283               	bcf	3,5	;RP0=0, select bank0
  1100     0362  0792               	addwf	delay_1000ms@i,f
  1101     0363  1803               	skipnc
  1102     0364  0A93               	incf	delay_1000ms@i+1,f
  1103     0365  3000               	movlw	0
  1104     0366  0793               	addwf	delay_1000ms@i+1,f
  1105     0367  0813               	movf	delay_1000ms@i+1,w
  1106     0368  3A80               	xorlw	128
  1107     0369  00CF               	movwf	79
  1108     036A  3080               	movlw	128
  1109     036B  024F               	subwf	79,w
  1110     036C  1D03               	skipz
  1111     036D  2B70               	goto	u585
  1112     036E  3014               	movlw	20
  1113     036F  0212               	subwf	delay_1000ms@i,w
  1114     0370                     u585:
  1115     0370  1803               	btfsc	3,0
  1116     0371  0008               	return
  1117     0372  2B5F               	goto	l1267
  1118     0373                     __end_of_delay_1000ms:
  1119                           
  1120                           	psect	text4
  1121     03AB                     __ptext4:	
  1122 ;; *************** function _delay_100ms *****************
  1123 ;; Defined at:
  1124 ;;		line 26 in file "main.c"
  1125 ;; Parameters:    Size  Location     Type
  1126 ;;		None
  1127 ;; Auto vars:     Size  Location     Type
  1128 ;;		None
  1129 ;; Return value:  Size  Location     Type
  1130 ;;                  1    wreg      void 
  1131 ;; Registers used:
  1132 ;;		wreg
  1133 ;; Tracked objects:
  1134 ;;		On entry : 0/0
  1135 ;;		On exit  : 0/0
  1136 ;;		Unchanged: 0/0
  1137 ;; Data sizes:     COMMON   BANK0
  1138 ;;      Params:         0       0
  1139 ;;      Locals:         0       0
  1140 ;;      Temps:          0       2
  1141 ;;      Totals:         0       2
  1142 ;;Total ram usage:        2 bytes
  1143 ;; Hardware stack levels used: 1
  1144 ;; Hardware stack levels required when called: 2
  1145 ;; This function calls:
  1146 ;;		Nothing
  1147 ;; This function is called by:
  1148 ;;		_delay_1000ms
  1149 ;;		_main
  1150 ;; This function uses a non-reentrant model
  1151 ;;
  1152                           
  1153     03AB                     _delay_100ms:	
  1154                           ;psect for function _delay_100ms
  1155                           
  1156                           
  1157                           ;main.c: 27:     _delay((unsigned long)((100)*(4000000/4000.0)));
  1158                           
  1159                           ;incstack = 0
  1160                           ; Regs used in _delay_100ms: [wreg]
  1161     03AB  3082               	movlw	130
  1162     03AC  1283               	bcf	3,5	;RP0=0, select bank0
  1163     03AD  0091               	movwf	??_delay_100ms+1
  1164     03AE  30DD               	movlw	221
  1165     03AF  0090               	movwf	??_delay_100ms
  1166     03B0                     u797:
  1167     03B0  0B90               	decfsz	??_delay_100ms,f
  1168     03B1  2BB0               	goto	u797
  1169     03B2  0B91               	decfsz	??_delay_100ms+1,f
  1170     03B3  2BB0               	goto	u797
  1171     03B4  2BB5               	nop2
  1172     03B5  0008               	return
  1173     03B6                     __end_of_delay_100ms:
  1174                           
  1175                           	psect	text5
  1176     021D                     __ptext5:	
  1177 ;; *************** function _Lcd_Set_Cursor *****************
  1178 ;; Defined at:
  1179 ;;		line 52 in file "lcd.c"
  1180 ;; Parameters:    Size  Location     Type
  1181 ;;  a               1    wreg     unsigned char 
  1182 ;;  b               1    8[BANK0 ] unsigned char 
  1183 ;; Auto vars:     Size  Location     Type
  1184 ;;  a               1   10[BANK0 ] unsigned char 
  1185 ;;  temp            1   13[BANK0 ] unsigned char 
  1186 ;;  y               1   12[BANK0 ] unsigned char 
  1187 ;;  z               1   11[BANK0 ] unsigned char 
  1188 ;; Return value:  Size  Location     Type
  1189 ;;                  1    wreg      void 
  1190 ;; Registers used:
  1191 ;;		wreg, status,2, status,0, pclath, cstack
  1192 ;; Tracked objects:
  1193 ;;		On entry : 100/0
  1194 ;;		On exit  : 100/0
  1195 ;;		Unchanged: 0/0
  1196 ;; Data sizes:     COMMON   BANK0
  1197 ;;      Params:         0       1
  1198 ;;      Locals:         0       4
  1199 ;;      Temps:          0       1
  1200 ;;      Totals:         0       6
  1201 ;;Total ram usage:        6 bytes
  1202 ;; Hardware stack levels used: 1
  1203 ;; Hardware stack levels required when called: 4
  1204 ;; This function calls:
  1205 ;;		_Lcd_Cmd
  1206 ;; This function is called by:
  1207 ;;		_welcomeMessage
  1208 ;;		_main
  1209 ;; This function uses a non-reentrant model
  1210 ;;
  1211                           
  1212     021D                     _Lcd_Set_Cursor:	
  1213                           ;psect for function _Lcd_Set_Cursor
  1214                           
  1215                           
  1216                           ;incstack = 0
  1217                           ; Regs used in _Lcd_Set_Cursor: [wreg+status,2+status,0+pclath+cstack]
  1218                           ;Lcd_Set_Cursor@a stored from wreg
  1219     021D  0096               	movwf	Lcd_Set_Cursor@a
  1220                           
  1221                           ;lcd.c: 52: void Lcd_Set_Cursor(char a, char b);lcd.c: 53: {;lcd.c: 54:  char temp,z,y;;
      +                          lcd.c: 55:  if(a == 1)
  1222     021E  0316               	decf	Lcd_Set_Cursor@a,w
  1223     021F  1D03               	btfss	3,2
  1224     0220  2A36               	goto	l1287
  1225                           
  1226                           ;lcd.c: 56:  {;lcd.c: 57:    temp = (char) (0x80 + b - 1);
  1227     0221  0814               	movf	Lcd_Set_Cursor@b,w
  1228     0222  3E7F               	addlw	127
  1229     0223  0099               	movwf	Lcd_Set_Cursor@temp
  1230                           
  1231                           ;lcd.c: 58:   z = temp>>4;
  1232     0224  0819               	movf	Lcd_Set_Cursor@temp,w
  1233     0225  0095               	movwf	??_Lcd_Set_Cursor
  1234     0226  3004               	movlw	4
  1235     0227                     u605:
  1236     0227  1003               	clrc
  1237     0228  0C95               	rrf	??_Lcd_Set_Cursor,f
  1238     0229  3EFF               	addlw	-1
  1239     022A  1D03               	skipz
  1240     022B  2A27               	goto	u605
  1241     022C  0815               	movf	??_Lcd_Set_Cursor,w
  1242     022D  0097               	movwf	Lcd_Set_Cursor@z
  1243                           
  1244                           ;lcd.c: 59:   y = temp & 0x0F;
  1245     022E  0819               	movf	Lcd_Set_Cursor@temp,w
  1246     022F  390F               	andlw	15
  1247     0230  0098               	movwf	Lcd_Set_Cursor@y
  1248                           
  1249                           ;lcd.c: 60:   Lcd_Cmd(z);
  1250     0231  0817               	movf	Lcd_Set_Cursor@z,w
  1251     0232  2373               	fcall	_Lcd_Cmd
  1252                           
  1253                           ;lcd.c: 61:   Lcd_Cmd(y);
  1254     0233  0818               	movf	Lcd_Set_Cursor@y,w
  1255     0234  2373               	fcall	_Lcd_Cmd
  1256                           
  1257                           ;lcd.c: 62:  }
  1258     0235  0008               	return
  1259     0236                     l1287:
  1260     0236  3002               	movlw	2
  1261     0237  0616               	xorwf	Lcd_Set_Cursor@a,w
  1262     0238  1D03               	btfss	3,2
  1263     0239  0008               	return
  1264                           
  1265                           ;lcd.c: 64:  {;lcd.c: 65:   temp = 0xC0 + b - 1;
  1266     023A  0814               	movf	Lcd_Set_Cursor@b,w
  1267     023B  3EBF               	addlw	191
  1268     023C  0099               	movwf	Lcd_Set_Cursor@temp
  1269                           
  1270                           ;lcd.c: 66:   z = temp>>4;
  1271     023D  0819               	movf	Lcd_Set_Cursor@temp,w
  1272     023E  0095               	movwf	??_Lcd_Set_Cursor
  1273     023F  3004               	movlw	4
  1274     0240                     u625:
  1275     0240  1003               	clrc
  1276     0241  0C95               	rrf	??_Lcd_Set_Cursor,f
  1277     0242  3EFF               	addlw	-1
  1278     0243  1D03               	skipz
  1279     0244  2A40               	goto	u625
  1280     0245  0815               	movf	??_Lcd_Set_Cursor,w
  1281     0246  0097               	movwf	Lcd_Set_Cursor@z
  1282                           
  1283                           ;lcd.c: 67:   y = temp & 0x0F;
  1284     0247  0819               	movf	Lcd_Set_Cursor@temp,w
  1285     0248  390F               	andlw	15
  1286     0249  0098               	movwf	Lcd_Set_Cursor@y
  1287                           
  1288                           ;lcd.c: 68:   Lcd_Cmd(z);
  1289     024A  0817               	movf	Lcd_Set_Cursor@z,w
  1290     024B  2373               	fcall	_Lcd_Cmd
  1291                           
  1292                           ;lcd.c: 69:   Lcd_Cmd(y);
  1293     024C  0818               	movf	Lcd_Set_Cursor@y,w
  1294     024D  2373               	fcall	_Lcd_Cmd
  1295     024E  0008               	return
  1296     024F                     __end_of_Lcd_Set_Cursor:
  1297                           
  1298                           	psect	text6
  1299     0385                     __ptext6:	
  1300 ;; *************** function _Lcd_Clear *****************
  1301 ;; Defined at:
  1302 ;;		line 44 in file "lcd.c"
  1303 ;; Parameters:    Size  Location     Type
  1304 ;;		None
  1305 ;; Auto vars:     Size  Location     Type
  1306 ;;		None
  1307 ;; Return value:  Size  Location     Type
  1308 ;;                  1    wreg      void 
  1309 ;; Registers used:
  1310 ;;		wreg, status,2, status,0, pclath, cstack
  1311 ;; Tracked objects:
  1312 ;;		On entry : 0/0
  1313 ;;		On exit  : 0/0
  1314 ;;		Unchanged: 0/0
  1315 ;; Data sizes:     COMMON   BANK0
  1316 ;;      Params:         0       0
  1317 ;;      Locals:         0       0
  1318 ;;      Temps:          0       2
  1319 ;;      Totals:         0       2
  1320 ;;Total ram usage:        2 bytes
  1321 ;; Hardware stack levels used: 1
  1322 ;; Hardware stack levels required when called: 4
  1323 ;; This function calls:
  1324 ;;		_Lcd_Cmd
  1325 ;; This function is called by:
  1326 ;;		_welcomeMessage
  1327 ;;		_main
  1328 ;; This function uses a non-reentrant model
  1329 ;;
  1330                           
  1331     0385                     _Lcd_Clear:	
  1332                           ;psect for function _Lcd_Clear
  1333                           
  1334                           
  1335                           ;lcd.c: 46:  Lcd_Cmd(0x00);
  1336                           
  1337                           ;incstack = 0
  1338                           ; Regs used in _Lcd_Clear: [wreg+status,2+status,0+pclath+cstack]
  1339     0385  3000               	movlw	0
  1340     0386  2373               	fcall	_Lcd_Cmd
  1341                           
  1342                           ;lcd.c: 47:  Lcd_Cmd(0x01);
  1343     0387  3001               	movlw	1
  1344     0388  2373               	fcall	_Lcd_Cmd
  1345                           
  1346                           ;lcd.c: 48:     _delay((unsigned long)((2)*(4000000/4000.0)));
  1347     0389  3003               	movlw	3
  1348     038A  0095               	movwf	??_Lcd_Clear+1
  1349     038B  3097               	movlw	151
  1350     038C  0094               	movwf	??_Lcd_Clear
  1351     038D                     u807:
  1352     038D  0B94               	decfsz	??_Lcd_Clear,f
  1353     038E  2B8D               	goto	u807
  1354     038F  0B95               	decfsz	??_Lcd_Clear+1,f
  1355     0390  2B8D               	goto	u807
  1356     0391  2B92               	nop2
  1357     0392  0008               	return
  1358     0393                     __end_of_Lcd_Clear:
  1359                           
  1360                           	psect	text7
  1361     014B                     __ptext7:	
  1362 ;; *************** function _readADC2 *****************
  1363 ;; Defined at:
  1364 ;;		line 50 in file "adc.c"
  1365 ;; Parameters:    Size  Location     Type
  1366 ;;		None
  1367 ;; Auto vars:     Size  Location     Type
  1368 ;;  volt            2    8[BANK0 ] unsigned int 
  1369 ;;  rxData          1   11[BANK0 ] unsigned char 
  1370 ;;  bits            1   10[BANK0 ] unsigned char 
  1371 ;; Return value:  Size  Location     Type
  1372 ;;                  2    4[BANK0 ] unsigned int 
  1373 ;; Registers used:
  1374 ;;		wreg, status,2, status,0, btemp+1
  1375 ;; Tracked objects:
  1376 ;;		On entry : 100/0
  1377 ;;		On exit  : 100/0
  1378 ;;		Unchanged: 0/0
  1379 ;; Data sizes:     COMMON   BANK0
  1380 ;;      Params:         0       2
  1381 ;;      Locals:         0       4
  1382 ;;      Temps:          0       2
  1383 ;;      Totals:         0       8
  1384 ;;Total ram usage:        8 bytes
  1385 ;; Hardware stack levels used: 1
  1386 ;; Hardware stack levels required when called: 2
  1387 ;; This function calls:
  1388 ;;		Nothing
  1389 ;; This function is called by:
  1390 ;;		_main
  1391 ;; This function uses a non-reentrant model
  1392 ;;
  1393                           
  1394     014B                     _readADC2:	
  1395                           ;psect for function _readADC2
  1396                           
  1397                           
  1398                           ;adc.c: 51:   unsigned char bits;;adc.c: 52:   unsigned char rxData = 0;
  1399                           
  1400                           ;incstack = 0
  1401                           ; Regs used in _readADC2: [wreg+status,2+status,0+btemp+1]
  1402     014B  0197               	clrf	readADC2@rxData
  1403                           
  1404                           ;adc.c: 55:   RB7 = 0;
  1405     014C  1386               	bcf	6,7	;volatile
  1406                           
  1407                           ;adc.c: 58:   for (bits = 0; bits < 3; bits++)
  1408     014D  0196               	clrf	readADC2@bits
  1409     014E                     l1435:
  1410                           
  1411                           ;adc.c: 59:   {;adc.c: 60:       _delay((unsigned long)((100)*(4000000/4000000.0)));
  1412     014E  3021               	movlw	33
  1413     014F  0092               	movwf	??_readADC2
  1414     0150                     u817:
  1415     0150  0B92               	decfsz	??_readADC2,f
  1416     0151  2950               	goto	u817
  1417                           
  1418                           ;adc.c: 61:       RB5 = 1;
  1419     0152  1283               	bcf	3,5	;RP0=0, select bank0
  1420     0153  1686               	bsf	6,5	;volatile
  1421                           
  1422                           ;adc.c: 62:       _delay((unsigned long)((100)*(4000000/4000000.0)));
  1423     0154  3021               	movlw	33
  1424     0155  0092               	movwf	??_readADC2
  1425     0156                     u827:
  1426     0156  0B92               	decfsz	??_readADC2,f
  1427     0157  2956               	goto	u827
  1428                           
  1429                           ;adc.c: 63:       RB5 = 0;
  1430     0158  1283               	bcf	3,5	;RP0=0, select bank0
  1431     0159  1286               	bcf	6,5	;volatile
  1432                           
  1433                           ;adc.c: 64:   }
  1434     015A  3001               	movlw	1
  1435     015B  00CF               	movwf	79
  1436     015C  084F               	movf	79,w
  1437     015D  0796               	addwf	readADC2@bits,f
  1438     015E  3003               	movlw	3
  1439     015F  0216               	subwf	readADC2@bits,w
  1440     0160  1C03               	skipc
  1441     0161  294E               	goto	l1435
  1442                           
  1443                           ;adc.c: 67:   for (bits = 0; bits < 8; bits++)
  1444     0162  0196               	clrf	readADC2@bits
  1445     0163                     l1451:
  1446                           
  1447                           ;adc.c: 68:   {;adc.c: 70:     _delay((unsigned long)((100)*(4000000/4000000.0)));
  1448     0163  3021               	movlw	33
  1449     0164  0092               	movwf	??_readADC2
  1450     0165                     u837:
  1451     0165  0B92               	decfsz	??_readADC2,f
  1452     0166  2965               	goto	u837
  1453                           
  1454                           ;adc.c: 71:     RB5 = 1;
  1455     0167  1283               	bcf	3,5	;RP0=0, select bank0
  1456     0168  1686               	bsf	6,5	;volatile
  1457                           
  1458                           ;adc.c: 74:     rxData = rxData << 1;
  1459     0169  0817               	movf	readADC2@rxData,w
  1460     016A  0092               	movwf	??_readADC2
  1461     016B  0712               	addwf	??_readADC2,w
  1462     016C  0097               	movwf	readADC2@rxData
  1463                           
  1464                           ;adc.c: 77:     if(RA3 == 1)
  1465     016D  1D85               	btfss	5,3	;volatile
  1466     016E  2972               	goto	l1461
  1467                           
  1468                           ;adc.c: 78:       rxData = rxData | 0x01;
  1469     016F  0817               	movf	readADC2@rxData,w
  1470     0170  3801               	iorlw	1
  1471     0171  2974               	goto	L1
  1472     0172                     l1461:
  1473                           
  1474                           ;adc.c: 80:       rxData = rxData & 0xfe;
  1475     0172  0817               	movf	readADC2@rxData,w
  1476     0173  39FE               	andlw	254
  1477     0174                     L1:
  1478     0174  0097               	movwf	readADC2@rxData
  1479                           
  1480                           ;adc.c: 82:     _delay((unsigned long)((100)*(4000000/4000000.0)));
  1481     0175  3021               	movlw	33
  1482     0176  0092               	movwf	??_readADC2
  1483     0177                     u847:
  1484     0177  0B92               	decfsz	??_readADC2,f
  1485     0178  2977               	goto	u847
  1486                           
  1487                           ;adc.c: 83:     RB5 = 0;
  1488     0179  1283               	bcf	3,5	;RP0=0, select bank0
  1489     017A  1286               	bcf	6,5	;volatile
  1490                           
  1491                           ;adc.c: 84:     }
  1492     017B  3001               	movlw	1
  1493     017C  00CF               	movwf	79
  1494     017D  084F               	movf	79,w
  1495     017E  0796               	addwf	readADC2@bits,f
  1496     017F  3008               	movlw	8
  1497     0180  0216               	subwf	readADC2@bits,w
  1498     0181  1C03               	skipc
  1499     0182  2963               	goto	l1451
  1500                           
  1501                           ;adc.c: 87:   RB7 = 1;
  1502     0183  1786               	bsf	6,7	;volatile
  1503                           
  1504                           ;adc.c: 90:   volt = (rxData << 2);
  1505     0184  0817               	movf	readADC2@rxData,w
  1506     0185  0092               	movwf	??_readADC2
  1507     0186  0193               	clrf	??_readADC2+1
  1508     0187  1003               	clrc
  1509     0188  0D92               	rlf	??_readADC2,f
  1510     0189  0D93               	rlf	??_readADC2+1,f
  1511     018A  1003               	clrc
  1512     018B  0D92               	rlf	??_readADC2,f
  1513     018C  0D93               	rlf	??_readADC2+1,f
  1514     018D  0812               	movf	??_readADC2,w
  1515     018E  0094               	movwf	readADC2@volt
  1516     018F  0813               	movf	??_readADC2+1,w
  1517     0190  0095               	movwf	readADC2@volt+1
  1518                           
  1519                           ;adc.c: 91:   return volt;
  1520     0191  0815               	movf	readADC2@volt+1,w
  1521     0192  0091               	movwf	?_readADC2+1
  1522     0193  0814               	movf	readADC2@volt,w
  1523     0194  0090               	movwf	?_readADC2
  1524     0195  0008               	return
  1525     0196                     __end_of_readADC2:
  1526                           
  1527                           	psect	text8
  1528     0196                     __ptext8:	
  1529 ;; *************** function _readADC1 *****************
  1530 ;; Defined at:
  1531 ;;		line 6 in file "adc.c"
  1532 ;; Parameters:    Size  Location     Type
  1533 ;;		None
  1534 ;; Auto vars:     Size  Location     Type
  1535 ;;  volt            2    8[BANK0 ] unsigned int 
  1536 ;;  rxData          1   11[BANK0 ] unsigned char 
  1537 ;;  bits            1   10[BANK0 ] unsigned char 
  1538 ;; Return value:  Size  Location     Type
  1539 ;;                  2    4[BANK0 ] unsigned int 
  1540 ;; Registers used:
  1541 ;;		wreg, status,2, status,0, btemp+1
  1542 ;; Tracked objects:
  1543 ;;		On entry : 100/0
  1544 ;;		On exit  : 100/0
  1545 ;;		Unchanged: 0/0
  1546 ;; Data sizes:     COMMON   BANK0
  1547 ;;      Params:         0       2
  1548 ;;      Locals:         0       4
  1549 ;;      Temps:          0       2
  1550 ;;      Totals:         0       8
  1551 ;;Total ram usage:        8 bytes
  1552 ;; Hardware stack levels used: 1
  1553 ;; Hardware stack levels required when called: 2
  1554 ;; This function calls:
  1555 ;;		Nothing
  1556 ;; This function is called by:
  1557 ;;		_main
  1558 ;; This function uses a non-reentrant model
  1559 ;;
  1560                           
  1561     0196                     _readADC1:	
  1562                           ;psect for function _readADC1
  1563                           
  1564                           
  1565                           ;adc.c: 7:   unsigned char bits;;adc.c: 8:   unsigned char rxData = 0;
  1566                           
  1567                           ;incstack = 0
  1568                           ; Regs used in _readADC1: [wreg+status,2+status,0+btemp+1]
  1569     0196  0197               	clrf	readADC1@rxData
  1570                           
  1571                           ;adc.c: 11:   RB7 = 0;
  1572     0197  1386               	bcf	6,7	;volatile
  1573                           
  1574                           ;adc.c: 14:   for (bits = 0; bits < 3; bits++)
  1575     0198  0196               	clrf	readADC1@bits
  1576     0199                     l1385:
  1577                           
  1578                           ;adc.c: 15:   {;adc.c: 16:       _delay((unsigned long)((100)*(4000000/4000000.0)));
  1579     0199  3021               	movlw	33
  1580     019A  0092               	movwf	??_readADC1
  1581     019B                     u857:
  1582     019B  0B92               	decfsz	??_readADC1,f
  1583     019C  299B               	goto	u857
  1584                           
  1585                           ;adc.c: 17:       RB5 = 1;
  1586     019D  1283               	bcf	3,5	;RP0=0, select bank0
  1587     019E  1686               	bsf	6,5	;volatile
  1588                           
  1589                           ;adc.c: 18:       _delay((unsigned long)((100)*(4000000/4000000.0)));
  1590     019F  3021               	movlw	33
  1591     01A0  0092               	movwf	??_readADC1
  1592     01A1                     u867:
  1593     01A1  0B92               	decfsz	??_readADC1,f
  1594     01A2  29A1               	goto	u867
  1595                           
  1596                           ;adc.c: 19:       RB5 = 0;
  1597     01A3  1283               	bcf	3,5	;RP0=0, select bank0
  1598     01A4  1286               	bcf	6,5	;volatile
  1599                           
  1600                           ;adc.c: 20:   }
  1601     01A5  3001               	movlw	1
  1602     01A6  00CF               	movwf	79
  1603     01A7  084F               	movf	79,w
  1604     01A8  0796               	addwf	readADC1@bits,f
  1605     01A9  3003               	movlw	3
  1606     01AA  0216               	subwf	readADC1@bits,w
  1607     01AB  1C03               	skipc
  1608     01AC  2999               	goto	l1385
  1609                           
  1610                           ;adc.c: 23:   for (bits = 0; bits < 8; bits++)
  1611     01AD  0196               	clrf	readADC1@bits
  1612     01AE                     l1401:
  1613                           
  1614                           ;adc.c: 24:   {;adc.c: 26:     _delay((unsigned long)((100)*(4000000/4000000.0)));
  1615     01AE  3021               	movlw	33
  1616     01AF  0092               	movwf	??_readADC1
  1617     01B0                     u877:
  1618     01B0  0B92               	decfsz	??_readADC1,f
  1619     01B1  29B0               	goto	u877
  1620                           
  1621                           ;adc.c: 27:     RB5 = 1;
  1622     01B2  1283               	bcf	3,5	;RP0=0, select bank0
  1623     01B3  1686               	bsf	6,5	;volatile
  1624                           
  1625                           ;adc.c: 30:     rxData = rxData << 1;
  1626     01B4  0817               	movf	readADC1@rxData,w
  1627     01B5  0092               	movwf	??_readADC1
  1628     01B6  0712               	addwf	??_readADC1,w
  1629     01B7  0097               	movwf	readADC1@rxData
  1630                           
  1631                           ;adc.c: 33:     if(RB6 == 1)
  1632     01B8  1F06               	btfss	6,6	;volatile
  1633     01B9  29BD               	goto	l1411
  1634                           
  1635                           ;adc.c: 34:       rxData = rxData | 0x01;
  1636     01BA  0817               	movf	readADC1@rxData,w
  1637     01BB  3801               	iorlw	1
  1638     01BC  29BF               	goto	L2
  1639     01BD                     l1411:
  1640                           
  1641                           ;adc.c: 36:       rxData = rxData & 0xfe;
  1642     01BD  0817               	movf	readADC1@rxData,w
  1643     01BE  39FE               	andlw	254
  1644     01BF                     L2:
  1645     01BF  0097               	movwf	readADC1@rxData
  1646                           
  1647                           ;adc.c: 38:     _delay((unsigned long)((100)*(4000000/4000000.0)));
  1648     01C0  3021               	movlw	33
  1649     01C1  0092               	movwf	??_readADC1
  1650     01C2                     u887:
  1651     01C2  0B92               	decfsz	??_readADC1,f
  1652     01C3  29C2               	goto	u887
  1653                           
  1654                           ;adc.c: 39:     RB5 = 0;
  1655     01C4  1283               	bcf	3,5	;RP0=0, select bank0
  1656     01C5  1286               	bcf	6,5	;volatile
  1657                           
  1658                           ;adc.c: 40:     }
  1659     01C6  3001               	movlw	1
  1660     01C7  00CF               	movwf	79
  1661     01C8  084F               	movf	79,w
  1662     01C9  0796               	addwf	readADC1@bits,f
  1663     01CA  3008               	movlw	8
  1664     01CB  0216               	subwf	readADC1@bits,w
  1665     01CC  1C03               	skipc
  1666     01CD  29AE               	goto	l1401
  1667                           
  1668                           ;adc.c: 43:   RB7 = 1;
  1669     01CE  1786               	bsf	6,7	;volatile
  1670                           
  1671                           ;adc.c: 46:   volt = (rxData << 2);
  1672     01CF  0817               	movf	readADC1@rxData,w
  1673     01D0  0092               	movwf	??_readADC1
  1674     01D1  0193               	clrf	??_readADC1+1
  1675     01D2  1003               	clrc
  1676     01D3  0D92               	rlf	??_readADC1,f
  1677     01D4  0D93               	rlf	??_readADC1+1,f
  1678     01D5  1003               	clrc
  1679     01D6  0D92               	rlf	??_readADC1,f
  1680     01D7  0D93               	rlf	??_readADC1+1,f
  1681     01D8  0812               	movf	??_readADC1,w
  1682     01D9  0094               	movwf	readADC1@volt
  1683     01DA  0813               	movf	??_readADC1+1,w
  1684     01DB  0095               	movwf	readADC1@volt+1
  1685                           
  1686                           ;adc.c: 47:   return volt;
  1687     01DC  0815               	movf	readADC1@volt+1,w
  1688     01DD  0091               	movwf	?_readADC1+1
  1689     01DE  0814               	movf	readADC1@volt,w
  1690     01DF  0090               	movwf	?_readADC1
  1691     01E0  0008               	return
  1692     01E1                     __end_of_readADC1:
  1693                           
  1694                           	psect	text9
  1695     02D5                     __ptext9:	
  1696 ;; *************** function ___wmul *****************
  1697 ;; Defined at:
  1698 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\Umul16.c"
  1699 ;; Parameters:    Size  Location     Type
  1700 ;;  multiplier      2    9[BANK0 ] unsigned int 
  1701 ;;  multiplicand    2   11[BANK0 ] unsigned int 
  1702 ;; Auto vars:     Size  Location     Type
  1703 ;;  product         2   13[BANK0 ] unsigned int 
  1704 ;; Return value:  Size  Location     Type
  1705 ;;                  2    9[BANK0 ] unsigned int 
  1706 ;; Registers used:
  1707 ;;		wreg, status,2, status,0
  1708 ;; Tracked objects:
  1709 ;;		On entry : 100/0
  1710 ;;		On exit  : 100/0
  1711 ;;		Unchanged: 0/0
  1712 ;; Data sizes:     COMMON   BANK0
  1713 ;;      Params:         0       4
  1714 ;;      Locals:         0       2
  1715 ;;      Temps:          0       0
  1716 ;;      Totals:         0       6
  1717 ;;Total ram usage:        6 bytes
  1718 ;; Hardware stack levels used: 1
  1719 ;; Hardware stack levels required when called: 2
  1720 ;; This function calls:
  1721 ;;		Nothing
  1722 ;; This function is called by:
  1723 ;;		_main
  1724 ;; This function uses a non-reentrant model
  1725 ;;
  1726                           
  1727     02D5                     ___wmul:	
  1728                           ;psect for function ___wmul
  1729                           
  1730                           
  1731                           ;incstack = 0
  1732                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  1733     02D5  0199               	clrf	___wmul@product
  1734     02D6  019A               	clrf	___wmul@product+1
  1735     02D7                     l1479:
  1736     02D7  1C15               	btfss	___wmul@multiplier,0
  1737     02D8  2ADF               	goto	l241
  1738     02D9  0817               	movf	___wmul@multiplicand,w
  1739     02DA  0799               	addwf	___wmul@product,f
  1740     02DB  1803               	skipnc
  1741     02DC  0A9A               	incf	___wmul@product+1,f
  1742     02DD  0818               	movf	___wmul@multiplicand+1,w
  1743     02DE  079A               	addwf	___wmul@product+1,f
  1744     02DF                     l241:
  1745     02DF  3001               	movlw	1
  1746     02E0                     u755:
  1747     02E0  1003               	clrc
  1748     02E1  0D97               	rlf	___wmul@multiplicand,f
  1749     02E2  0D98               	rlf	___wmul@multiplicand+1,f
  1750     02E3  3EFF               	addlw	-1
  1751     02E4  1D03               	skipz
  1752     02E5  2AE0               	goto	u755
  1753     02E6  3001               	movlw	1
  1754     02E7                     u765:
  1755     02E7  1003               	clrc
  1756     02E8  0C96               	rrf	___wmul@multiplier+1,f
  1757     02E9  0C95               	rrf	___wmul@multiplier,f
  1758     02EA  3EFF               	addlw	-1
  1759     02EB  1D03               	skipz
  1760     02EC  2AE7               	goto	u765
  1761     02ED  0815               	movf	___wmul@multiplier,w
  1762     02EE  0416               	iorwf	___wmul@multiplier+1,w
  1763     02EF  1D03               	btfss	3,2
  1764     02F0  2AD7               	goto	l1479
  1765     02F1  081A               	movf	___wmul@product+1,w
  1766     02F2  0096               	movwf	?___wmul+1
  1767     02F3  0819               	movf	___wmul@product,w
  1768     02F4  0095               	movwf	?___wmul
  1769     02F5  0008               	return
  1770     02F6                     __end_of___wmul:
  1771                           
  1772                           	psect	text10
  1773     0393                     __ptext10:	
  1774 ;; *************** function _Lcd_Write_Int *****************
  1775 ;; Defined at:
  1776 ;;		line 121 in file "lcd.c"
  1777 ;; Parameters:    Size  Location     Type
  1778 ;;  a               2   30[BANK0 ] unsigned int 
  1779 ;; Auto vars:     Size  Location     Type
  1780 ;;  temp           16   32[BANK0 ] unsigned char [16]
  1781 ;; Return value:  Size  Location     Type
  1782 ;;                  1    wreg      void 
  1783 ;; Registers used:
  1784 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1785 ;; Tracked objects:
  1786 ;;		On entry : 100/0
  1787 ;;		On exit  : 900/0
  1788 ;;		Unchanged: 0/0
  1789 ;; Data sizes:     COMMON   BANK0
  1790 ;;      Params:         0       2
  1791 ;;      Locals:         0      16
  1792 ;;      Temps:          0       0
  1793 ;;      Totals:         0      18
  1794 ;;Total ram usage:       18 bytes
  1795 ;; Hardware stack levels used: 1
  1796 ;; Hardware stack levels required when called: 5
  1797 ;; This function calls:
  1798 ;;		_Lcd_Write_String
  1799 ;;		_utoa
  1800 ;; This function is called by:
  1801 ;;		_main
  1802 ;; This function uses a non-reentrant model
  1803 ;;
  1804                           
  1805     0393                     _Lcd_Write_Int:	
  1806                           ;psect for function _Lcd_Write_Int
  1807                           
  1808                           
  1809                           ;lcd.c: 121: void Lcd_Write_Int(unsigned int a);lcd.c: 122: {;lcd.c: 123:     char temp[
      +                          16];;lcd.c: 124:     utoa((char*)temp, a, 10);
  1810                           
  1811                           ;incstack = 0
  1812                           ; Regs used in _Lcd_Write_Int: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1813     0393  082B               	movf	Lcd_Write_Int@a+1,w
  1814     0394  00A3               	movwf	utoa@val+1
  1815     0395  082A               	movf	Lcd_Write_Int@a,w
  1816     0396  00A2               	movwf	utoa@val
  1817     0397  300A               	movlw	10
  1818     0398  00A4               	movwf	utoa@base
  1819     0399  3000               	movlw	0
  1820     039A  00A5               	movwf	utoa@base+1
  1821     039B  302C               	movlw	(low (Lcd_Write_Int@temp| 0))& (0+255)
  1822     039C  20F7               	fcall	_utoa
  1823                           
  1824                           ;lcd.c: 125:     Lcd_Write_String(temp);
  1825     039D  302C               	movlw	(low (Lcd_Write_Int@temp| 0))& (0+255)
  1826     039E  2314               	fcall	_Lcd_Write_String
  1827     039F  0008               	return
  1828     03A0                     __end_of_Lcd_Write_Int:
  1829                           
  1830                           	psect	text11
  1831     00F7                     __ptext11:	
  1832 ;; *************** function _utoa *****************
  1833 ;; Defined at:
  1834 ;;		line 17 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\itoa.c"
  1835 ;; Parameters:    Size  Location     Type
  1836 ;;  buf             1    wreg     PTR unsigned char 
  1837 ;;		 -> Lcd_Write_Int@temp(16), 
  1838 ;;  val             2   22[BANK0 ] unsigned int 
  1839 ;;  base            2   24[BANK0 ] int 
  1840 ;; Auto vars:     Size  Location     Type
  1841 ;;  buf             1   29[BANK0 ] PTR unsigned char 
  1842 ;;		 -> Lcd_Write_Int@temp(16), 
  1843 ;;  v               2   26[BANK0 ] unsigned int 
  1844 ;;  c               1   28[BANK0 ] unsigned char 
  1845 ;; Return value:  Size  Location     Type
  1846 ;;                  1    wreg      PTR unsigned char 
  1847 ;; Registers used:
  1848 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1849 ;; Tracked objects:
  1850 ;;		On entry : 100/0
  1851 ;;		On exit  : 900/0
  1852 ;;		Unchanged: 0/0
  1853 ;; Data sizes:     COMMON   BANK0
  1854 ;;      Params:         0       4
  1855 ;;      Locals:         0       4
  1856 ;;      Temps:          0       0
  1857 ;;      Totals:         0       8
  1858 ;;Total ram usage:        8 bytes
  1859 ;; Hardware stack levels used: 1
  1860 ;; Hardware stack levels required when called: 3
  1861 ;; This function calls:
  1862 ;;		___lwdiv
  1863 ;;		___lwmod
  1864 ;; This function is called by:
  1865 ;;		_Lcd_Write_Int
  1866 ;; This function uses a non-reentrant model
  1867 ;;
  1868                           
  1869     00F7                     _utoa:	
  1870                           ;psect for function _utoa
  1871                           
  1872                           
  1873                           ;incstack = 0
  1874                           ; Regs used in _utoa: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1875                           ;utoa@buf stored from wreg
  1876     00F7  00A9               	movwf	utoa@buf
  1877     00F8  0823               	movf	utoa@val+1,w
  1878     00F9  00A7               	movwf	utoa@v+1
  1879     00FA  0822               	movf	utoa@val,w
  1880     00FB  00A6               	movwf	utoa@v
  1881     00FC                     l1313:
  1882     00FC  0825               	movf	utoa@base+1,w
  1883     00FD  009C               	movwf	___lwdiv@divisor+1
  1884     00FE  0824               	movf	utoa@base,w
  1885     00FF  009B               	movwf	___lwdiv@divisor
  1886     0100  0827               	movf	utoa@v+1,w
  1887     0101  009E               	movwf	___lwdiv@dividend+1
  1888     0102  0826               	movf	utoa@v,w
  1889     0103  009D               	movwf	___lwdiv@dividend
  1890     0104  21E1               	fcall	___lwdiv
  1891     0105  081C               	movf	?___lwdiv+1,w
  1892     0106  00A7               	movwf	utoa@v+1
  1893     0107  081B               	movf	?___lwdiv,w
  1894     0108  00A6               	movwf	utoa@v
  1895     0109  3001               	movlw	1
  1896     010A  00CF               	movwf	79
  1897     010B  084F               	movf	79,w
  1898     010C  07A9               	addwf	utoa@buf,f
  1899     010D  0826               	movf	utoa@v,w
  1900     010E  0427               	iorwf	utoa@v+1,w
  1901     010F  1D03               	btfss	3,2
  1902     0110  28FC               	goto	l1313
  1903     0111  0829               	movf	utoa@buf,w
  1904     0112  0084               	movwf	4
  1905     0113  1383               	bcf	3,7	;select IRP bank0
  1906     0114  0180               	clrf	0
  1907     0115  3001               	movlw	1
  1908     0116  02A9               	subwf	utoa@buf,f
  1909     0117                     l1323:
  1910     0117  0825               	movf	utoa@base+1,w
  1911     0118  0091               	movwf	___lwmod@divisor+1
  1912     0119  0824               	movf	utoa@base,w
  1913     011A  0090               	movwf	___lwmod@divisor
  1914     011B  0823               	movf	utoa@val+1,w
  1915     011C  0093               	movwf	___lwmod@dividend+1
  1916     011D  0822               	movf	utoa@val,w
  1917     011E  0092               	movwf	___lwmod@dividend
  1918     011F  224F               	fcall	___lwmod
  1919     0120  0810               	movf	?___lwmod,w
  1920     0121  00A8               	movwf	utoa@c
  1921     0122  0825               	movf	utoa@base+1,w
  1922     0123  009C               	movwf	___lwdiv@divisor+1
  1923     0124  0824               	movf	utoa@base,w
  1924     0125  009B               	movwf	___lwdiv@divisor
  1925     0126  0823               	movf	utoa@val+1,w
  1926     0127  009E               	movwf	___lwdiv@dividend+1
  1927     0128  0822               	movf	utoa@val,w
  1928     0129  009D               	movwf	___lwdiv@dividend
  1929     012A  21E1               	fcall	___lwdiv
  1930     012B  081C               	movf	?___lwdiv+1,w
  1931     012C  00A3               	movwf	utoa@val+1
  1932     012D  081B               	movf	?___lwdiv,w
  1933     012E  00A2               	movwf	utoa@val
  1934     012F  300A               	movlw	10
  1935     0130  0228               	subwf	utoa@c,w
  1936     0131  1C03               	skipc
  1937     0132  2937               	goto	l701
  1938     0133  3007               	movlw	7
  1939     0134  00CF               	movwf	79
  1940     0135  084F               	movf	79,w
  1941     0136  07A8               	addwf	utoa@c,f
  1942     0137                     l701:
  1943     0137  3030               	movlw	48
  1944     0138  00CF               	movwf	79
  1945     0139  084F               	movf	79,w
  1946     013A  07A8               	addwf	utoa@c,f
  1947     013B  0829               	movf	utoa@buf,w
  1948     013C  0084               	movwf	4
  1949     013D  0828               	movf	utoa@c,w
  1950     013E  1383               	bcf	3,7	;select IRP bank0
  1951     013F  0080               	movwf	0
  1952     0140  3001               	movlw	1
  1953     0141  02A9               	subwf	utoa@buf,f
  1954     0142  0822               	movf	utoa@val,w
  1955     0143  0423               	iorwf	utoa@val+1,w
  1956     0144  1D03               	btfss	3,2
  1957     0145  2917               	goto	l1323
  1958                           
  1959                           ;	Return value of _utoa is never used
  1960     0146  3001               	movlw	1
  1961     0147  00CF               	movwf	79
  1962     0148  084F               	movf	79,w
  1963     0149  07A9               	addwf	utoa@buf,f
  1964     014A  0008               	return
  1965     014B                     __end_of_utoa:
  1966                           
  1967                           	psect	text12
  1968     024F                     __ptext12:	
  1969 ;; *************** function ___lwmod *****************
  1970 ;; Defined at:
  1971 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\lwmod.c"
  1972 ;; Parameters:    Size  Location     Type
  1973 ;;  divisor         2    4[BANK0 ] unsigned int 
  1974 ;;  dividend        2    6[BANK0 ] unsigned int 
  1975 ;; Auto vars:     Size  Location     Type
  1976 ;;  counter         1    8[BANK0 ] unsigned char 
  1977 ;; Return value:  Size  Location     Type
  1978 ;;                  2    4[BANK0 ] unsigned int 
  1979 ;; Registers used:
  1980 ;;		wreg, status,2, status,0, btemp+1
  1981 ;; Tracked objects:
  1982 ;;		On entry : 100/0
  1983 ;;		On exit  : 100/0
  1984 ;;		Unchanged: 0/0
  1985 ;; Data sizes:     COMMON   BANK0
  1986 ;;      Params:         0       4
  1987 ;;      Locals:         0       1
  1988 ;;      Temps:          0       0
  1989 ;;      Totals:         0       5
  1990 ;;Total ram usage:        5 bytes
  1991 ;; Hardware stack levels used: 1
  1992 ;; Hardware stack levels required when called: 2
  1993 ;; This function calls:
  1994 ;;		Nothing
  1995 ;; This function is called by:
  1996 ;;		_main
  1997 ;;		_utoa
  1998 ;; This function uses a non-reentrant model
  1999 ;;
  2000                           
  2001     024F                     ___lwmod:	
  2002                           ;psect for function ___lwmod
  2003                           
  2004                           
  2005                           ;incstack = 0
  2006                           ; Regs used in ___lwmod: [wreg+status,2+status,0+btemp+1]
  2007     024F  0810               	movf	___lwmod@divisor,w
  2008     0250  0411               	iorwf	___lwmod@divisor+1,w
  2009     0251  1903               	btfsc	3,2
  2010     0252  2A7C               	goto	l1257
  2011     0253  0194               	clrf	___lwmod@counter
  2012     0254  0A94               	incf	___lwmod@counter,f
  2013     0255                     l1247:
  2014     0255  1B91               	btfsc	___lwmod@divisor+1,7
  2015     0256  2A63               	goto	l1249
  2016     0257  3001               	movlw	1
  2017     0258                     u535:
  2018     0258  1003               	clrc
  2019     0259  0D90               	rlf	___lwmod@divisor,f
  2020     025A  0D91               	rlf	___lwmod@divisor+1,f
  2021     025B  3EFF               	addlw	-1
  2022     025C  1D03               	skipz
  2023     025D  2A58               	goto	u535
  2024     025E  3001               	movlw	1
  2025     025F  00CF               	movwf	79
  2026     0260  084F               	movf	79,w
  2027     0261  0794               	addwf	___lwmod@counter,f
  2028     0262  2A55               	goto	l1247
  2029     0263                     l1249:
  2030     0263  0811               	movf	___lwmod@divisor+1,w
  2031     0264  0213               	subwf	___lwmod@dividend+1,w
  2032     0265  1D03               	skipz
  2033     0266  2A69               	goto	u555
  2034     0267  0810               	movf	___lwmod@divisor,w
  2035     0268  0212               	subwf	___lwmod@dividend,w
  2036     0269                     u555:
  2037     0269  1C03               	skipc
  2038     026A  2A71               	goto	l1253
  2039     026B  0810               	movf	___lwmod@divisor,w
  2040     026C  0292               	subwf	___lwmod@dividend,f
  2041     026D  0811               	movf	___lwmod@divisor+1,w
  2042     026E  1C03               	skipc
  2043     026F  0393               	decf	___lwmod@dividend+1,f
  2044     0270  0293               	subwf	___lwmod@dividend+1,f
  2045     0271                     l1253:
  2046     0271  3001               	movlw	1
  2047     0272                     u565:
  2048     0272  1003               	clrc
  2049     0273  0C91               	rrf	___lwmod@divisor+1,f
  2050     0274  0C90               	rrf	___lwmod@divisor,f
  2051     0275  3EFF               	addlw	-1
  2052     0276  1D03               	skipz
  2053     0277  2A72               	goto	u565
  2054     0278  3001               	movlw	1
  2055     0279  0294               	subwf	___lwmod@counter,f
  2056     027A  1D03               	btfss	3,2
  2057     027B  2A63               	goto	l1249
  2058     027C                     l1257:
  2059     027C  0813               	movf	___lwmod@dividend+1,w
  2060     027D  0091               	movwf	?___lwmod+1
  2061     027E  0812               	movf	___lwmod@dividend,w
  2062     027F  0090               	movwf	?___lwmod
  2063     0280  0008               	return
  2064     0281                     __end_of___lwmod:
  2065                           
  2066                           	psect	text13
  2067     01E1                     __ptext13:	
  2068 ;; *************** function ___lwdiv *****************
  2069 ;; Defined at:
  2070 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\lwdiv.c"
  2071 ;; Parameters:    Size  Location     Type
  2072 ;;  divisor         2   15[BANK0 ] unsigned int 
  2073 ;;  dividend        2   17[BANK0 ] unsigned int 
  2074 ;; Auto vars:     Size  Location     Type
  2075 ;;  quotient        2   19[BANK0 ] unsigned int 
  2076 ;;  counter         1   21[BANK0 ] unsigned char 
  2077 ;; Return value:  Size  Location     Type
  2078 ;;                  2   15[BANK0 ] unsigned int 
  2079 ;; Registers used:
  2080 ;;		wreg, status,2, status,0, btemp+1
  2081 ;; Tracked objects:
  2082 ;;		On entry : 100/0
  2083 ;;		On exit  : 100/0
  2084 ;;		Unchanged: 0/0
  2085 ;; Data sizes:     COMMON   BANK0
  2086 ;;      Params:         0       4
  2087 ;;      Locals:         0       3
  2088 ;;      Temps:          0       0
  2089 ;;      Totals:         0       7
  2090 ;;Total ram usage:        7 bytes
  2091 ;; Hardware stack levels used: 1
  2092 ;; Hardware stack levels required when called: 2
  2093 ;; This function calls:
  2094 ;;		Nothing
  2095 ;; This function is called by:
  2096 ;;		_main
  2097 ;;		_utoa
  2098 ;; This function uses a non-reentrant model
  2099 ;;
  2100                           
  2101     01E1                     ___lwdiv:	
  2102                           ;psect for function ___lwdiv
  2103                           
  2104                           
  2105                           ;incstack = 0
  2106                           ; Regs used in ___lwdiv: [wreg+status,2+status,0+btemp+1]
  2107     01E1  019F               	clrf	___lwdiv@quotient
  2108     01E2  01A0               	clrf	___lwdiv@quotient+1
  2109     01E3  081B               	movf	___lwdiv@divisor,w
  2110     01E4  041C               	iorwf	___lwdiv@divisor+1,w
  2111     01E5  1903               	btfsc	3,2
  2112     01E6  2A18               	goto	l1235
  2113     01E7  01A1               	clrf	___lwdiv@counter
  2114     01E8  0AA1               	incf	___lwdiv@counter,f
  2115     01E9                     l1223:
  2116     01E9  1B9C               	btfsc	___lwdiv@divisor+1,7
  2117     01EA  29F7               	goto	l1225
  2118     01EB  3001               	movlw	1
  2119     01EC                     u465:
  2120     01EC  1003               	clrc
  2121     01ED  0D9B               	rlf	___lwdiv@divisor,f
  2122     01EE  0D9C               	rlf	___lwdiv@divisor+1,f
  2123     01EF  3EFF               	addlw	-1
  2124     01F0  1D03               	skipz
  2125     01F1  29EC               	goto	u465
  2126     01F2  3001               	movlw	1
  2127     01F3  00CF               	movwf	79
  2128     01F4  084F               	movf	79,w
  2129     01F5  07A1               	addwf	___lwdiv@counter,f
  2130     01F6  29E9               	goto	l1223
  2131     01F7                     l1225:
  2132     01F7  3001               	movlw	1
  2133     01F8                     u485:
  2134     01F8  1003               	clrc
  2135     01F9  0D9F               	rlf	___lwdiv@quotient,f
  2136     01FA  0DA0               	rlf	___lwdiv@quotient+1,f
  2137     01FB  3EFF               	addlw	-1
  2138     01FC  1D03               	skipz
  2139     01FD  29F8               	goto	u485
  2140     01FE  081C               	movf	___lwdiv@divisor+1,w
  2141     01FF  021E               	subwf	___lwdiv@dividend+1,w
  2142     0200  1D03               	skipz
  2143     0201  2A04               	goto	u495
  2144     0202  081B               	movf	___lwdiv@divisor,w
  2145     0203  021D               	subwf	___lwdiv@dividend,w
  2146     0204                     u495:
  2147     0204  1C03               	skipc
  2148     0205  2A0D               	goto	l1231
  2149     0206  081B               	movf	___lwdiv@divisor,w
  2150     0207  029D               	subwf	___lwdiv@dividend,f
  2151     0208  081C               	movf	___lwdiv@divisor+1,w
  2152     0209  1C03               	skipc
  2153     020A  039E               	decf	___lwdiv@dividend+1,f
  2154     020B  029E               	subwf	___lwdiv@dividend+1,f
  2155     020C  141F               	bsf	___lwdiv@quotient,0
  2156     020D                     l1231:
  2157     020D  3001               	movlw	1
  2158     020E                     u505:
  2159     020E  1003               	clrc
  2160     020F  0C9C               	rrf	___lwdiv@divisor+1,f
  2161     0210  0C9B               	rrf	___lwdiv@divisor,f
  2162     0211  3EFF               	addlw	-1
  2163     0212  1D03               	skipz
  2164     0213  2A0E               	goto	u505
  2165     0214  3001               	movlw	1
  2166     0215  02A1               	subwf	___lwdiv@counter,f
  2167     0216  1D03               	btfss	3,2
  2168     0217  29F7               	goto	l1225
  2169     0218                     l1235:
  2170     0218  0820               	movf	___lwdiv@quotient+1,w
  2171     0219  009C               	movwf	?___lwdiv+1
  2172     021A  081F               	movf	___lwdiv@quotient,w
  2173     021B  009B               	movwf	?___lwdiv
  2174     021C  0008               	return
  2175     021D                     __end_of___lwdiv:
  2176                           
  2177                           	psect	text14
  2178     0314                     __ptext14:	
  2179 ;; *************** function _Lcd_Write_String *****************
  2180 ;; Defined at:
  2181 ;;		line 111 in file "lcd.c"
  2182 ;; Parameters:    Size  Location     Type
  2183 ;;  a               1    wreg     PTR unsigned char 
  2184 ;;		 -> Lcd_Write_Int@temp(16), welcomeMessage@msg(3), 
  2185 ;; Auto vars:     Size  Location     Type
  2186 ;;  a               1   12[BANK0 ] PTR unsigned char 
  2187 ;;		 -> Lcd_Write_Int@temp(16), welcomeMessage@msg(3), 
  2188 ;;  i               2   10[BANK0 ] int 
  2189 ;; Return value:  Size  Location     Type
  2190 ;;                  1    wreg      void 
  2191 ;; Registers used:
  2192 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2193 ;; Tracked objects:
  2194 ;;		On entry : 100/0
  2195 ;;		On exit  : 900/0
  2196 ;;		Unchanged: 0/0
  2197 ;; Data sizes:     COMMON   BANK0
  2198 ;;      Params:         0       0
  2199 ;;      Locals:         0       3
  2200 ;;      Temps:          0       1
  2201 ;;      Totals:         0       4
  2202 ;;Total ram usage:        4 bytes
  2203 ;; Hardware stack levels used: 1
  2204 ;; Hardware stack levels required when called: 4
  2205 ;; This function calls:
  2206 ;;		_Lcd_Write_Char
  2207 ;; This function is called by:
  2208 ;;		_welcomeMessage
  2209 ;;		_Lcd_Write_Int
  2210 ;; This function uses a non-reentrant model
  2211 ;;
  2212                           
  2213     0314                     _Lcd_Write_String:	
  2214                           ;psect for function _Lcd_Write_String
  2215                           
  2216                           
  2217                           ;incstack = 0
  2218                           ; Regs used in _Lcd_Write_String: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2219                           ;Lcd_Write_String@a stored from wreg
  2220     0314  0098               	movwf	Lcd_Write_String@a
  2221                           
  2222                           ;lcd.c: 111: void Lcd_Write_String(char *a);lcd.c: 112: {;lcd.c: 113:  int i;;lcd.c: 114
      +                          :  for(i=0;a[i]!='\0';i++)
  2223     0315  0196               	clrf	Lcd_Write_String@i
  2224     0316  0197               	clrf	Lcd_Write_String@i+1
  2225     0317                     l1303:
  2226     0317  0816               	movf	Lcd_Write_String@i,w
  2227     0318  0718               	addwf	Lcd_Write_String@a,w
  2228     0319  0095               	movwf	??_Lcd_Write_String
  2229     031A  0815               	movf	??_Lcd_Write_String,w
  2230     031B  0084               	movwf	4
  2231     031C  1383               	bcf	3,7	;select IRP bank0
  2232     031D  0800               	movf	0,w
  2233     031E  1903               	btfsc	3,2
  2234     031F  0008               	return
  2235                           
  2236                           ;lcd.c: 115:     {;lcd.c: 116:         Lcd_Write_Char(a[i]);
  2237     0320  0816               	movf	Lcd_Write_String@i,w
  2238     0321  0718               	addwf	Lcd_Write_String@a,w
  2239     0322  0095               	movwf	??_Lcd_Write_String
  2240     0323  0815               	movf	??_Lcd_Write_String,w
  2241     0324  0084               	movwf	4
  2242     0325  0800               	movf	0,w
  2243     0326  22B2               	fcall	_Lcd_Write_Char
  2244                           
  2245                           ;lcd.c: 117:     }
  2246     0327  3001               	movlw	1
  2247     0328  0796               	addwf	Lcd_Write_String@i,f
  2248     0329  1803               	skipnc
  2249     032A  0A97               	incf	Lcd_Write_String@i+1,f
  2250     032B  3000               	movlw	0
  2251     032C  0797               	addwf	Lcd_Write_String@i+1,f
  2252     032D  2B17               	goto	l1303
  2253     032E                     __end_of_Lcd_Write_String:
  2254                           
  2255                           	psect	text15
  2256     02B2                     __ptext15:	
  2257 ;; *************** function _Lcd_Write_Char *****************
  2258 ;; Defined at:
  2259 ;;		line 94 in file "lcd.c"
  2260 ;; Parameters:    Size  Location     Type
  2261 ;;  a               1    wreg     unsigned char 
  2262 ;; Auto vars:     Size  Location     Type
  2263 ;;  a               1    8[BANK0 ] unsigned char 
  2264 ;;  y               1    7[BANK0 ] unsigned char 
  2265 ;;  temp            1    6[BANK0 ] unsigned char 
  2266 ;; Return value:  Size  Location     Type
  2267 ;;                  1    wreg      void 
  2268 ;; Registers used:
  2269 ;;		wreg, status,2, status,0, pclath, cstack
  2270 ;; Tracked objects:
  2271 ;;		On entry : 100/0
  2272 ;;		On exit  : 100/0
  2273 ;;		Unchanged: 0/0
  2274 ;; Data sizes:     COMMON   BANK0
  2275 ;;      Params:         0       0
  2276 ;;      Locals:         0       3
  2277 ;;      Temps:          0       1
  2278 ;;      Totals:         0       4
  2279 ;;Total ram usage:        4 bytes
  2280 ;; Hardware stack levels used: 1
  2281 ;; Hardware stack levels required when called: 3
  2282 ;; This function calls:
  2283 ;;		_Lcd_Port
  2284 ;; This function is called by:
  2285 ;;		_main
  2286 ;;		_Lcd_Write_String
  2287 ;; This function uses a non-reentrant model
  2288 ;;
  2289                           
  2290     02B2                     _Lcd_Write_Char:	
  2291                           ;psect for function _Lcd_Write_Char
  2292                           
  2293                           
  2294                           ;incstack = 0
  2295                           ; Regs used in _Lcd_Write_Char: [wreg+status,2+status,0+pclath+cstack]
  2296                           ;Lcd_Write_Char@a stored from wreg
  2297     02B2  0094               	movwf	Lcd_Write_Char@a
  2298                           
  2299                           ;lcd.c: 94: void Lcd_Write_Char(char a);lcd.c: 95: {;lcd.c: 96:    char temp,y;;lcd.c: 9
      +                          7:    temp = a&0x0F;
  2300     02B3  0814               	movf	Lcd_Write_Char@a,w
  2301     02B4  390F               	andlw	15
  2302     02B5  0092               	movwf	Lcd_Write_Char@temp
  2303                           
  2304                           ;lcd.c: 98:    y = a&0xF0;
  2305     02B6  0814               	movf	Lcd_Write_Char@a,w
  2306     02B7  39F0               	andlw	240
  2307     02B8  0093               	movwf	Lcd_Write_Char@y
  2308                           
  2309                           ;lcd.c: 99:    RA0 = 1;
  2310     02B9  1405               	bsf	5,0	;volatile
  2311                           
  2312                           ;lcd.c: 100:    Lcd_Port(y>>4);
  2313     02BA  0813               	movf	Lcd_Write_Char@y,w
  2314     02BB  0091               	movwf	??_Lcd_Write_Char
  2315     02BC  3004               	movlw	4
  2316     02BD                     u445:
  2317     02BD  1003               	clrc
  2318     02BE  0C91               	rrf	??_Lcd_Write_Char,f
  2319     02BF  3EFF               	addlw	-1
  2320     02C0  1D03               	skipz
  2321     02C1  2ABD               	goto	u445
  2322     02C2  0811               	movf	??_Lcd_Write_Char,w
  2323     02C3  2346               	fcall	_Lcd_Port
  2324                           
  2325                           ;lcd.c: 101:    RA2 = 1;
  2326     02C4  1505               	bsf	5,2	;volatile
  2327                           
  2328                           ;lcd.c: 102:    _delay((unsigned long)((40)*(4000000/4000000.0)));
  2329     02C5  300D               	movlw	13
  2330     02C6  0091               	movwf	??_Lcd_Write_Char
  2331     02C7                     u897:
  2332     02C7  0B91               	decfsz	??_Lcd_Write_Char,f
  2333     02C8  2AC7               	goto	u897
  2334                           
  2335                           ;lcd.c: 103:    RA2 = 0;
  2336     02C9  1283               	bcf	3,5	;RP0=0, select bank0
  2337     02CA  1105               	bcf	5,2	;volatile
  2338                           
  2339                           ;lcd.c: 104:    Lcd_Port(temp);
  2340     02CB  0812               	movf	Lcd_Write_Char@temp,w
  2341     02CC  2346               	fcall	_Lcd_Port
  2342                           
  2343                           ;lcd.c: 105:    RA2 = 1;
  2344     02CD  1505               	bsf	5,2	;volatile
  2345                           
  2346                           ;lcd.c: 106:    _delay((unsigned long)((40)*(4000000/4000000.0)));
  2347     02CE  300D               	movlw	13
  2348     02CF  0091               	movwf	??_Lcd_Write_Char
  2349     02D0                     u907:
  2350     02D0  0B91               	decfsz	??_Lcd_Write_Char,f
  2351     02D1  2AD0               	goto	u907
  2352                           
  2353                           ;lcd.c: 107:    RA2 = 0;
  2354     02D2  1283               	bcf	3,5	;RP0=0, select bank0
  2355     02D3  1105               	bcf	5,2	;volatile
  2356     02D4  0008               	return
  2357     02D5                     __end_of_Lcd_Write_Char:
  2358                           
  2359                           	psect	text16
  2360     0281                     __ptext16:	
  2361 ;; *************** function _Lcd_Init *****************
  2362 ;; Defined at:
  2363 ;;		line 74 in file "lcd.c"
  2364 ;; Parameters:    Size  Location     Type
  2365 ;;		None
  2366 ;; Auto vars:     Size  Location     Type
  2367 ;;		None
  2368 ;; Return value:  Size  Location     Type
  2369 ;;                  1    wreg      void 
  2370 ;; Registers used:
  2371 ;;		wreg, status,2, status,0, pclath, cstack
  2372 ;; Tracked objects:
  2373 ;;		On entry : B00/100
  2374 ;;		On exit  : 100/0
  2375 ;;		Unchanged: 0/0
  2376 ;; Data sizes:     COMMON   BANK0
  2377 ;;      Params:         0       0
  2378 ;;      Locals:         0       0
  2379 ;;      Temps:          0       2
  2380 ;;      Totals:         0       2
  2381 ;;Total ram usage:        2 bytes
  2382 ;; Hardware stack levels used: 1
  2383 ;; Hardware stack levels required when called: 4
  2384 ;; This function calls:
  2385 ;;		_Lcd_Cmd
  2386 ;;		_Lcd_Port
  2387 ;; This function is called by:
  2388 ;;		_main
  2389 ;; This function uses a non-reentrant model
  2390 ;;
  2391                           
  2392     0281                     _Lcd_Init:	
  2393                           ;psect for function _Lcd_Init
  2394                           
  2395                           
  2396                           ;lcd.c: 76:   Lcd_Port(0x00);
  2397                           
  2398                           ;incstack = 0
  2399                           ; Regs used in _Lcd_Init: [wreg+status,2+status,0+pclath+cstack]
  2400     0281  3000               	movlw	0
  2401     0282  2346               	fcall	_Lcd_Port
  2402                           
  2403                           ;lcd.c: 77:    _delay((unsigned long)((20)*(4000000/4000.0)));
  2404     0283  301A               	movlw	26
  2405     0284  0095               	movwf	??_Lcd_Init+1
  2406     0285  30F8               	movlw	248
  2407     0286  0094               	movwf	??_Lcd_Init
  2408     0287                     u917:
  2409     0287  0B94               	decfsz	??_Lcd_Init,f
  2410     0288  2A87               	goto	u917
  2411     0289  0B95               	decfsz	??_Lcd_Init+1,f
  2412     028A  2A87               	goto	u917
  2413     028B  0000               	nop
  2414                           
  2415                           ;lcd.c: 78:   Lcd_Cmd(0x03);
  2416     028C  3003               	movlw	3
  2417     028D  2373               	fcall	_Lcd_Cmd
  2418                           
  2419                           ;lcd.c: 79:  _delay((unsigned long)((5)*(4000000/4000.0)));
  2420     028E  3007               	movlw	7
  2421     028F  0095               	movwf	??_Lcd_Init+1
  2422     0290  307D               	movlw	125
  2423     0291  0094               	movwf	??_Lcd_Init
  2424     0292                     u927:
  2425     0292  0B94               	decfsz	??_Lcd_Init,f
  2426     0293  2A92               	goto	u927
  2427     0294  0B95               	decfsz	??_Lcd_Init+1,f
  2428     0295  2A92               	goto	u927
  2429                           
  2430                           ;lcd.c: 80:   Lcd_Cmd(0x03);
  2431     0296  3003               	movlw	3
  2432     0297  2373               	fcall	_Lcd_Cmd
  2433                           
  2434                           ;lcd.c: 81:  _delay((unsigned long)((11)*(4000000/4000.0)));
  2435     0298  300F               	movlw	15
  2436     0299  0095               	movwf	??_Lcd_Init+1
  2437     029A  3047               	movlw	71
  2438     029B  0094               	movwf	??_Lcd_Init
  2439     029C                     u937:
  2440     029C  0B94               	decfsz	??_Lcd_Init,f
  2441     029D  2A9C               	goto	u937
  2442     029E  0B95               	decfsz	??_Lcd_Init+1,f
  2443     029F  2A9C               	goto	u937
  2444     02A0  2AA1               	nop2
  2445                           
  2446                           ;lcd.c: 82:   Lcd_Cmd(0x03);
  2447     02A1  3003               	movlw	3
  2448     02A2  2373               	fcall	_Lcd_Cmd
  2449                           
  2450                           ;lcd.c: 84:   Lcd_Cmd(0x02);
  2451     02A3  3002               	movlw	2
  2452     02A4  2373               	fcall	_Lcd_Cmd
  2453                           
  2454                           ;lcd.c: 85:   Lcd_Cmd(0x02);
  2455     02A5  3002               	movlw	2
  2456     02A6  2373               	fcall	_Lcd_Cmd
  2457                           
  2458                           ;lcd.c: 86:   Lcd_Cmd(0x08);
  2459     02A7  3008               	movlw	8
  2460     02A8  2373               	fcall	_Lcd_Cmd
  2461                           
  2462                           ;lcd.c: 87:   Lcd_Cmd(0x00);
  2463     02A9  3000               	movlw	0
  2464     02AA  2373               	fcall	_Lcd_Cmd
  2465                           
  2466                           ;lcd.c: 88:   Lcd_Cmd(0x0C);
  2467     02AB  300C               	movlw	12
  2468     02AC  2373               	fcall	_Lcd_Cmd
  2469                           
  2470                           ;lcd.c: 89:   Lcd_Cmd(0x00);
  2471     02AD  3000               	movlw	0
  2472     02AE  2373               	fcall	_Lcd_Cmd
  2473                           
  2474                           ;lcd.c: 90:   Lcd_Cmd(0x06);
  2475     02AF  3006               	movlw	6
  2476     02B0  2373               	fcall	_Lcd_Cmd
  2477     02B1  0008               	return
  2478     02B2                     __end_of_Lcd_Init:
  2479                           
  2480                           	psect	text17
  2481     0373                     __ptext17:	
  2482 ;; *************** function _Lcd_Cmd *****************
  2483 ;; Defined at:
  2484 ;;		line 31 in file "lcd.c"
  2485 ;; Parameters:    Size  Location     Type
  2486 ;;  a               1    wreg     unsigned char 
  2487 ;; Auto vars:     Size  Location     Type
  2488 ;;  a               1    7[BANK0 ] unsigned char 
  2489 ;; Return value:  Size  Location     Type
  2490 ;;                  1    wreg      void 
  2491 ;; Registers used:
  2492 ;;		wreg, status,2, status,0, pclath, cstack
  2493 ;; Tracked objects:
  2494 ;;		On entry : 0/0
  2495 ;;		On exit  : 100/0
  2496 ;;		Unchanged: 0/0
  2497 ;; Data sizes:     COMMON   BANK0
  2498 ;;      Params:         0       0
  2499 ;;      Locals:         0       1
  2500 ;;      Temps:          0       2
  2501 ;;      Totals:         0       3
  2502 ;;Total ram usage:        3 bytes
  2503 ;; Hardware stack levels used: 1
  2504 ;; Hardware stack levels required when called: 3
  2505 ;; This function calls:
  2506 ;;		_Lcd_Port
  2507 ;; This function is called by:
  2508 ;;		_Lcd_Clear
  2509 ;;		_Lcd_Set_Cursor
  2510 ;;		_Lcd_Init
  2511 ;; This function uses a non-reentrant model
  2512 ;;
  2513                           
  2514     0373                     _Lcd_Cmd:	
  2515                           ;psect for function _Lcd_Cmd
  2516                           
  2517                           
  2518                           ;incstack = 0
  2519                           ; Regs used in _Lcd_Cmd: [wreg+status,2+status,0+pclath+cstack]
  2520                           ;Lcd_Cmd@a stored from wreg
  2521     0373  1283               	bcf	3,5	;RP0=0, select bank0
  2522     0374  0093               	movwf	Lcd_Cmd@a
  2523                           
  2524                           ;lcd.c: 31: void Lcd_Cmd(char a);lcd.c: 32: {;lcd.c: 34:     RA0 = 0;
  2525     0375  1005               	bcf	5,0	;volatile
  2526                           
  2527                           ;lcd.c: 35:  Lcd_Port(a);
  2528     0376  0813               	movf	Lcd_Cmd@a,w
  2529     0377  2346               	fcall	_Lcd_Port
  2530                           
  2531                           ;lcd.c: 38:  RA2 = 1;
  2532     0378  1505               	bsf	5,2	;volatile
  2533                           
  2534                           ;lcd.c: 39:     _delay((unsigned long)((4)*(4000000/4000.0)));
  2535     0379  3006               	movlw	6
  2536     037A  0092               	movwf	??_Lcd_Cmd+1
  2537     037B  3030               	movlw	48
  2538     037C  0091               	movwf	??_Lcd_Cmd
  2539     037D                     u947:
  2540     037D  0B91               	decfsz	??_Lcd_Cmd,f
  2541     037E  2B7D               	goto	u947
  2542     037F  0B92               	decfsz	??_Lcd_Cmd+1,f
  2543     0380  2B7D               	goto	u947
  2544     0381  0000               	nop
  2545                           
  2546                           ;lcd.c: 40:     RA2 = 0;
  2547     0382  1283               	bcf	3,5	;RP0=0, select bank0
  2548     0383  1105               	bcf	5,2	;volatile
  2549     0384  0008               	return
  2550     0385                     __end_of_Lcd_Cmd:
  2551                           
  2552                           	psect	text18
  2553     0346                     __ptext18:	
  2554 ;; *************** function _Lcd_Port *****************
  2555 ;; Defined at:
  2556 ;;		line 7 in file "lcd.c"
  2557 ;; Parameters:    Size  Location     Type
  2558 ;;  a               1    wreg     unsigned char 
  2559 ;; Auto vars:     Size  Location     Type
  2560 ;;  a               1    4[BANK0 ] unsigned char 
  2561 ;; Return value:  Size  Location     Type
  2562 ;;                  1    wreg      void 
  2563 ;; Registers used:
  2564 ;;		wreg
  2565 ;; Tracked objects:
  2566 ;;		On entry : 0/0
  2567 ;;		On exit  : 100/0
  2568 ;;		Unchanged: 0/0
  2569 ;; Data sizes:     COMMON   BANK0
  2570 ;;      Params:         0       0
  2571 ;;      Locals:         0       1
  2572 ;;      Temps:          0       0
  2573 ;;      Totals:         0       1
  2574 ;;Total ram usage:        1 bytes
  2575 ;; Hardware stack levels used: 1
  2576 ;; Hardware stack levels required when called: 2
  2577 ;; This function calls:
  2578 ;;		Nothing
  2579 ;; This function is called by:
  2580 ;;		_Lcd_Cmd
  2581 ;;		_Lcd_Init
  2582 ;;		_Lcd_Write_Char
  2583 ;; This function uses a non-reentrant model
  2584 ;;
  2585                           
  2586     0346                     _Lcd_Port:	
  2587                           ;psect for function _Lcd_Port
  2588                           
  2589                           
  2590                           ;incstack = 0
  2591                           ; Regs used in _Lcd_Port: [wreg]
  2592                           ;Lcd_Port@a stored from wreg
  2593     0346  1283               	bcf	3,5	;RP0=0, select bank0
  2594     0347  0090               	movwf	Lcd_Port@a
  2595                           
  2596                           ;lcd.c: 7: void Lcd_Port(char a);lcd.c: 8: {;lcd.c: 9:  if(a & 1)
  2597     0348  1C10               	btfss	Lcd_Port@a,0
  2598     0349  2B4C               	goto	l86
  2599                           
  2600                           ;lcd.c: 10:   RB1 = 1;
  2601     034A  1486               	bsf	6,1	;volatile
  2602     034B  2B4D               	goto	l87
  2603     034C                     l86:	
  2604                           ;lcd.c: 11:  else
  2605                           
  2606                           
  2607                           ;lcd.c: 12:   RB1 = 0;
  2608     034C  1086               	bcf	6,1	;volatile
  2609     034D                     l87:
  2610                           
  2611                           ;lcd.c: 14:  if(a & 2)
  2612     034D  1C90               	btfss	Lcd_Port@a,1
  2613     034E  2B51               	goto	l88
  2614                           
  2615                           ;lcd.c: 15:   RB2 = 1;
  2616     034F  1506               	bsf	6,2	;volatile
  2617     0350  2B52               	goto	l89
  2618     0351                     l88:	
  2619                           ;lcd.c: 16:  else
  2620                           
  2621                           
  2622                           ;lcd.c: 17:   RB2 = 0;
  2623     0351  1106               	bcf	6,2	;volatile
  2624     0352                     l89:
  2625                           
  2626                           ;lcd.c: 19:  if(a & 4)
  2627     0352  1D10               	btfss	Lcd_Port@a,2
  2628     0353  2B56               	goto	l90
  2629                           
  2630                           ;lcd.c: 20:   RB3 = 1;
  2631     0354  1586               	bsf	6,3	;volatile
  2632     0355  2B57               	goto	l91
  2633     0356                     l90:	
  2634                           ;lcd.c: 21:  else
  2635                           
  2636                           
  2637                           ;lcd.c: 22:   RB3 = 0;
  2638     0356  1186               	bcf	6,3	;volatile
  2639     0357                     l91:
  2640                           
  2641                           ;lcd.c: 24:  if(a & 8)
  2642     0357  1D90               	btfss	Lcd_Port@a,3
  2643     0358  2B5B               	goto	l92
  2644                           
  2645                           ;lcd.c: 25:   RB4 = 1;
  2646     0359  1606               	bsf	6,4	;volatile
  2647     035A  0008               	return
  2648     035B                     l92:	
  2649                           ;lcd.c: 26:  else
  2650                           
  2651                           
  2652                           ;lcd.c: 27:   RB4 = 0;
  2653     035B  1206               	bcf	6,4	;volatile
  2654     035C  0008               	return
  2655     035D                     __end_of_Lcd_Port:
  2656                           
  2657                           	psect	text19
  2658     03B6                     __ptext19:	
  2659 ;; *************** function _isr *****************
  2660 ;; Defined at:
  2661 ;;		line 38 in file "main.c"
  2662 ;; Parameters:    Size  Location     Type
  2663 ;;		None
  2664 ;; Auto vars:     Size  Location     Type
  2665 ;;		None
  2666 ;; Return value:  Size  Location     Type
  2667 ;;                  1    wreg      void 
  2668 ;; Registers used:
  2669 ;;		wreg, status,2, status,0, pclath, cstack
  2670 ;; Tracked objects:
  2671 ;;		On entry : 0/0
  2672 ;;		On exit  : 100/0
  2673 ;;		Unchanged: 0/0
  2674 ;; Data sizes:     COMMON   BANK0
  2675 ;;      Params:         0       0
  2676 ;;      Locals:         0       0
  2677 ;;      Temps:          0       2
  2678 ;;      Totals:         0       2
  2679 ;;Total ram usage:        2 bytes
  2680 ;; Hardware stack levels used: 1
  2681 ;; Hardware stack levels required when called: 1
  2682 ;; This function calls:
  2683 ;;		i1_delay_100ms
  2684 ;; This function is called by:
  2685 ;;		Interrupt level 1
  2686 ;; This function uses a non-reentrant model
  2687 ;;
  2688                           
  2689     03B6                     _isr:	
  2690                           ;psect for function _isr
  2691                           
  2692                           
  2693                           ;main.c: 40:     INTCONbits.INTF = 0;
  2694     03B6  108B               	bcf	11,1	;volatile
  2695                           
  2696                           ;main.c: 42:     toggleHold = ~toggleHold;
  2697     03B7  09C6               	comf	_toggleHold,f	;volatile
  2698                           
  2699                           ;main.c: 43:     delay_100ms();
  2700     03B8  23C1               	fcall	i1_delay_100ms
  2701     03B9  1283               	bcf	3,5	;RP0=0, select bank0
  2702     03BA  080F               	movf	??_isr+1,w
  2703     03BB  008A               	movwf	10
  2704     03BC  0E0E               	swapf	??_isr,w
  2705     03BD  0083               	movwf	3
  2706     03BE  0ECE               	swapf	78,f
  2707     03BF  0E4E               	swapf	78,w
  2708     03C0  0009               	retfie
  2709     03C1                     __end_of_isr:
  2710                           
  2711                           	psect	intentry
  2712     0004                     __pintentry:	
  2713                           ;incstack = 0
  2714                           ; Regs used in _isr: [wreg+status,2+status,0+pclath+cstack]
  2715                           
  2716     0004                     interrupt_function:
  2717     004E                     saved_w	set	btemp
  2718     0004  00CE               	movwf	btemp
  2719     0005  0E03               	swapf	3,w
  2720     0006  1283               	bcf	3,5	;RP0=0, select bank0
  2721     0007  008E               	movwf	??_isr
  2722     0008  080A               	movf	10,w
  2723     0009  008F               	movwf	??_isr+1
  2724     000A  2BB6               	ljmp	_isr
  2725                           
  2726                           	psect	text20
  2727     03C1                     __ptext20:	
  2728 ;; *************** function i1_delay_100ms *****************
  2729 ;; Defined at:
  2730 ;;		line 26 in file "main.c"
  2731 ;; Parameters:    Size  Location     Type
  2732 ;;		None
  2733 ;; Auto vars:     Size  Location     Type
  2734 ;;		None
  2735 ;; Return value:  Size  Location     Type
  2736 ;;                  1    wreg      void 
  2737 ;; Registers used:
  2738 ;;		wreg
  2739 ;; Tracked objects:
  2740 ;;		On entry : 100/0
  2741 ;;		On exit  : 0/0
  2742 ;;		Unchanged: 0/0
  2743 ;; Data sizes:     COMMON   BANK0
  2744 ;;      Params:         0       0
  2745 ;;      Locals:         0       0
  2746 ;;      Temps:          0       2
  2747 ;;      Totals:         0       2
  2748 ;;Total ram usage:        2 bytes
  2749 ;; Hardware stack levels used: 1
  2750 ;; This function calls:
  2751 ;;		Nothing
  2752 ;; This function is called by:
  2753 ;;		_isr
  2754 ;; This function uses a non-reentrant model
  2755 ;;
  2756                           
  2757     03C1                     i1_delay_100ms:	
  2758                           ;psect for function i1_delay_100ms
  2759                           
  2760                           
  2761                           ;main.c: 27:     _delay((unsigned long)((100)*(4000000/4000.0)));
  2762                           
  2763                           ;incstack = 0
  2764                           ; Regs used in i1_delay_100ms: [wreg]
  2765     03C1  3082               	movlw	130
  2766     03C2  008D               	movwf	??i1_delay_100ms+1
  2767     03C3  30DD               	movlw	221
  2768     03C4  008C               	movwf	??i1_delay_100ms
  2769     03C5                     u95_27:
  2770     03C5  0B8C               	decfsz	??i1_delay_100ms,f
  2771     03C6  2BC5               	goto	u95_27
  2772     03C7  0B8D               	decfsz	??i1_delay_100ms+1,f
  2773     03C8  2BC5               	goto	u95_27
  2774     03C9  2BCA               	nop2
  2775     03CA  0008               	return
  2776     03CB                     __end_ofi1_delay_100ms:
  2777     004E                     btemp	set	78	;btemp
  2778     004E                     wtemp0	set	78
  2779                           
  2780                           	psect	config
  2781                           
  2782                           ;Config register CONFIG @ 0x2007
  2783                           ;	Oscillator Selection bits
  2784                           ;	FOSC = XT, XT oscillator
  2785                           ;	Watchdog Timer
  2786                           ;	WDTE = OFF, WDT disabled
  2787                           ;	Power-up Timer Enable bit
  2788                           ;	PWRTE = ON, Power-up Timer is enabled
  2789                           ;	Code Protection bit
  2790                           ;	CP = OFF, Code protection disabled
  2791     2007                     	org	8199
  2792     2007  3FF1               	dw	16369

Data Sizes:
    Strings     5
    Constant    0
    Data        3
    BSS         3
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON            0      0       0
    BANK0            66     56      62

Pointer List with Targets:

    strcpy@from	PTR const unsigned char  size(1) Largest target is 5
		 -> STR_1(CODE[5]), 

    strcpy@to	PTR unsigned char  size(1) Largest target is 3
		 -> welcomeMessage@msg(BANK0[3]), 

    strcpy@cp	PTR unsigned char  size(1) Largest target is 3
		 -> welcomeMessage@msg(BANK0[3]), 

    utoa@buf	PTR unsigned char  size(1) Largest target is 16
		 -> Lcd_Write_Int@temp(BANK0[16]), 

    sp__itoa	PTR unsigned char  size(1) Largest target is 0

    sp__utoa	PTR unsigned char  size(1) Largest target is 16
		 -> Lcd_Write_Int@temp(BANK0[16]), 

    Lcd_Write_String@a	PTR unsigned char  size(1) Largest target is 16
		 -> Lcd_Write_Int@temp(BANK0[16]), welcomeMessage@msg(BANK0[3]), 

    sp__strcpy	PTR unsigned char  size(1) Largest target is 3
		 -> welcomeMessage@msg(BANK0[3]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _isr in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_Lcd_Write_Int
    _welcomeMessage->_Lcd_Set_Cursor
    _delay_1000ms->_delay_100ms
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Clear->_Lcd_Cmd
    ___wmul->___lwmod
    _Lcd_Write_Int->_utoa
    _utoa->___lwdiv
    ___lwdiv->___wmul
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Init->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port

Critical Paths under _isr in BANK0

    _isr->i1_delay_100ms

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 8     8      0   10367
                                             48 BANK0      8     8      0
                          _Lcd_Clear
                           _Lcd_Init
                     _Lcd_Set_Cursor
                     _Lcd_Write_Char
                      _Lcd_Write_Int
                            ___lwdiv
                            ___lwmod
                             ___wmul
                        _delay_100ms
                           _readADC1
                           _readADC2
                     _welcomeMessage
 ---------------------------------------------------------------------------------
 (1) _welcomeMessage                                       3     3      0    2298
                                             14 BANK0      3     3      0
                          _Lcd_Clear
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
                       _delay_1000ms
                             _strcpy
 ---------------------------------------------------------------------------------
 (2) _strcpy                                               3     2      1     184
                                              4 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (2) _delay_1000ms                                         2     2      0      46
                                              6 BANK0      2     2      0
                        _delay_100ms
 ---------------------------------------------------------------------------------
 (3) _delay_100ms                                          2     2      0       0
                                              4 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _Lcd_Set_Cursor                                       6     5      1    1520
                                              8 BANK0      6     5      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Clear                                            2     2      0     110
                                              8 BANK0      2     2      0
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _readADC2                                             8     6      2     208
                                              4 BANK0      8     6      2
 ---------------------------------------------------------------------------------
 (1) _readADC1                                             8     6      2     208
                                              4 BANK0      8     6      2
 ---------------------------------------------------------------------------------
 (1) ___wmul                                               6     2      4     396
                                              9 BANK0      6     2      4
                            ___lwmod (ARG)
 ---------------------------------------------------------------------------------
 (1) _Lcd_Write_Int                                       18    16      2    3382
                                             30 BANK0     18    16      2
                   _Lcd_Write_String
                               _utoa
 ---------------------------------------------------------------------------------
 (2) _utoa                                                 8     4      4    2335
                                             22 BANK0      8     4      4
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (1) ___lwmod                                              5     1      4     615
                                              4 BANK0      5     1      4
 ---------------------------------------------------------------------------------
 (1) ___lwdiv                                              7     3      4    1074
                                             15 BANK0      7     3      4
                            ___lwmod (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_String                                     4     4      0     367
                                              9 BANK0      4     4      0
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (3) _Lcd_Write_Char                                       4     4      0     178
                                              5 BANK0      4     4      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             2     2      0     198
                                              8 BANK0      2     2      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (3) _Lcd_Cmd                                              3     3      0     110
                                              5 BANK0      3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (4) _Lcd_Port                                             1     1      0      88
                                              4 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _isr                                                  2     2      0       0
                                              2 BANK0      2     2      0
                      i1_delay_100ms
 ---------------------------------------------------------------------------------
 (6) i1_delay_100ms                                        2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Lcd_Clear
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Init
     _Lcd_Cmd
     _Lcd_Port
   _Lcd_Set_Cursor
     _Lcd_Cmd
   _Lcd_Write_Char
     _Lcd_Port
   _Lcd_Write_Int
     _Lcd_Write_String
       _Lcd_Write_Char
     _utoa
       ___lwdiv
         ___lwmod (ARG)
         ___wmul (ARG)
           ___lwmod (ARG)
       ___lwmod
   ___lwdiv
   ___lwmod
   ___wmul
   _delay_100ms
   _readADC1
   _readADC2
   _welcomeMessage
     _Lcd_Clear
     _Lcd_Set_Cursor
     _Lcd_Write_String
     _delay_1000ms
       _delay_100ms
     _strcpy

 _isr (ROOT)
   i1_delay_100ms

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               42     38      3E       3       93.9%
BITBANK0            42      0       0       5        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               0      0       0       1        0.0%
BITCOMMON            0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      3E       6        0.0%
ABS                  0      0      3E       4        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA              40      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.41 build 20230208172133 
Symbol Table                                                                                   Tue May 02 20:53:38 2023

                       pc 0002                        l90 0356                        l91 0357  
                      l92 035B                        l86 034C                        l87 034D  
                      l88 0351                        l89 0352                        fsr 0004  
     ___wmul@multiplicand 0017                       l241 02DF                       l701 0137  
                     _RA0 0028                       _RA1 0029                       _RA2 002A  
                     _RB1 0031                       _RA3 002B                       _RB2 0032  
                     _RB3 0033                       _RB4 0034                       _RB5 0035  
                     _RB6 0036                       _RB7 0037                       u505 020E  
                     u445 02BD                       u605 0227                       u535 0258  
                     u465 01EC                       u625 0240                       u555 0269  
                     u485 01F8                       u565 0272                       u495 0204  
                     u807 038D                       u817 0150                       u585 0370  
                     u907 02D0                       u755 02E0                       u827 0156  
                     u917 0287                       u765 02E7                       u837 0165  
                     u927 0292                       u847 0177                       u937 029C  
                     u857 019B                       u947 037D                       u867 01A1  
                     u877 01B0                       u797 03B0                       u887 01C2  
                     u897 02C7                       _isr 03B6                       fsr0 0004  
                     indf 0000      __end_of_delay_1000ms 0373                      l1303 0317  
                    l1231 020D                      l1223 01E9                      l1225 01F7  
                    l1313 00FC                      l1401 01AE                      l1235 0218  
                    l1323 0117                      l1411 01BD                      l1253 0271  
                    l1309 0331                      l1247 0255                      l1249 0263  
                    l1257 027C                      l1451 0163                      l1435 014E  
                    l1267 035F                      l1461 0172                      l1287 0236  
                    l1535 0026                      l1385 0199                      l1537 005B  
                    l1479 02D7                      ?_isr 000C                      STR_1 03A6  
       ?_Lcd_Write_String 000C                      _main 0017                      btemp 004E  
                    _utoa 00F7                      start 000B        ??_Lcd_Write_String 0015  
         __end_of_Lcd_Cmd 0385                     ??_isr 000E                     ?_main 000C  
                   ?_utoa 0022           __end_of___lwdiv 021D           __end_of___lwmod 0281  
                   _TRISA 0085                     _TRISB 0086                     u95_27 03C5  
                   pclath 000A                     utoa@c 0028                     utoa@v 0026  
                   status 0003                     wtemp0 004E          __end_of_Lcd_Init 02B2  
        __end_of_Lcd_Port 035D           __initialization 000C              __end_of_main 00F7  
            __end_of_utoa 014B                    ??_main 0000                    ??_utoa 0000  
           i1_delay_100ms 03C1                 ??_Lcd_Cmd 0011              readADC1@bits 0016  
            readADC2@bits 0016              readADC1@volt 0014              readADC2@volt 0014  
        ??_welcomeMessage 0000                    _adcVal 0044          __end_of_readADC1 01E1  
        __end_of_readADC2 0196                    ___wmul 02D5                 ??___lwdiv 0000  
               ??___lwmod 0000                    main@d1 003C                    main@d2 003E  
                  main@d3 0040                    main@d4 0042                    _strcpy 032E  
   __end_of_Lcd_Write_Int 03A0                    saved_w 004E            ?i1_delay_100ms 000C  
         Lcd_Set_Cursor@a 0016           Lcd_Set_Cursor@b 0014           Lcd_Set_Cursor@y 0018  
         Lcd_Set_Cursor@z 0017   __end_of__initialization 0015         __end_of_Lcd_Clear 0393  
            _delay_1000ms 035D            __pcstackCOMMON 0000              __pidataBANK0 03CB  
          _Lcd_Set_Cursor 021D            _OPTION_REGbits 0081                 ?_Lcd_Init 000C  
               ?_Lcd_Port 000C            Lcd_Write_Int@a 002A                __pbssBANK0 0044  
           delay_1000ms@i 0012                __pmaintext 0017                   ?___wmul 0015  
              __pintentry 0004    __end_of_Lcd_Set_Cursor 024F                   ?_strcpy 0010  
         ??i1_delay_100ms 000C                ??_Lcd_Init 0014                ??_Lcd_Port 0000  
              __stringtab 03A0                 ?_readADC1 0010                 ?_readADC2 0010  
          _Lcd_Write_Char 02B2                   _Lcd_Cmd 0373                   ___lwdiv 01E1  
                 ___lwmod 024F           ?_Lcd_Set_Cursor 0014                   __ptext1 02F6  
                 __ptext2 032E                   __ptext3 035D                   __ptext4 03AB  
                 __ptext5 021D                   __ptext6 0385                   __ptext7 014B  
                 __ptext8 0196                   __ptext9 02D5             ??_delay_100ms 0010  
  __end_of_Lcd_Write_Char 02D5      end_of_initialization 0015                ??_readADC1 0012  
              ??_readADC2 0012                 Lcd_Port@a 0010                   utoa@buf 0029  
       Lcd_Write_Int@temp 002C                   utoa@val 0022                _toggleHold 0046  
       welcomeMessage@msg 001A           ?_Lcd_Write_Char 000C         Lcd_Write_String@a 0018  
       Lcd_Write_String@i 0016       __end_of_delay_100ms 03B6                 _Lcd_Clear 0385  
          __end_of___wmul 02F6          _Lcd_Write_String 0314            __end_of_strcpy 0346  
     start_initialization 000C               __end_of_isr 03C1                ?_Lcd_Clear 000C  
                ??___wmul 0000               __pdataBANK0 0047           Lcd_Write_Char@a 0014  
         Lcd_Write_Char@y 0013                  ??_strcpy 0000                 ___latbits 0000  
           __pcstackBANK0 000C               _delay_100ms 03AB                  ?_Lcd_Cmd 000C  
        ___lwdiv@dividend 001D          ??_Lcd_Set_Cursor 0015                  ?___lwdiv 001B  
                ?___lwmod 0010                 __pstrings 03A0             _Lcd_Write_Int 0393  
   __end_ofi1_delay_100ms 03CB          ___lwdiv@quotient 001F         interrupt_function 0004  
          ___wmul@product 0019                  Lcd_Cmd@a 0013               ??_Lcd_Clear 0014  
          readADC1@rxData 0017               __stringbase 03A5         ___wmul@multiplier 0015  
          readADC2@rxData 0017            ?_Lcd_Write_Int 002A          ??_Lcd_Write_Char 0011  
                _Lcd_Init 0281                  _Lcd_Port 0346  __end_of_Lcd_Write_String 032E  
           ?_delay_1000ms 000C        __end_of__stringtab 03A6            _welcomeMessage 02F6  
         ___lwdiv@divisor 001B           ___lwdiv@counter 0021                  __ptext10 0393  
                __ptext11 00F7                  __ptext20 03C1                  __ptext12 024F  
                __ptext13 01E1                  __ptext14 0314                  __ptext15 02B2  
                __ptext16 0281                  __ptext17 0373                  __ptext18 0346  
                __ptext19 03B6                  _readADC1 0196                  _readADC2 014B  
              strcpy@from 0010            ??_delay_1000ms 0000           ??_Lcd_Write_Int 0000  
  __end_of_welcomeMessage 0314                _INTCONbits 000B              ?_delay_100ms 000C  
      Lcd_Write_Char@temp 0012                  intlevel1 0000          ___lwmod@dividend 0012  
               stringcode 03A0        Lcd_Set_Cursor@temp 0019           ?_welcomeMessage 000C  
                utoa@base 0024           ___lwmod@divisor 0010                  strcpy@cp 0012  
                strcpy@to 0011           ___lwmod@counter 0014                  stringdir 03A0  
                stringtab 03A0        welcomeMessage@F331 0047  

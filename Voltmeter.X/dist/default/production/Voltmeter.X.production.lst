

Microchip MPLAB XC8 Assembler V2.41 build 20230208172133 
                                                                                               Wed May 03 13:16:23 2023

Microchip MPLAB XC8 C Compiler v2.41 (Free license) build 20230208172133 Og9 
     1                           	processor	16F84A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2,noexec
     5                           	psect	strings,global,class=STRING,delta=2,noexec
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    11                           	psect	maintext,global,class=CODE,split=1,delta=2
    12                           	psect	text1,local,class=CODE,merge=1,delta=2
    13                           	psect	text2,local,class=CODE,merge=1,delta=2,group=2
    14                           	psect	text3,local,class=CODE,merge=1,delta=2
    15                           	psect	text4,local,class=CODE,merge=1,delta=2
    16                           	psect	text5,local,class=CODE,merge=1,delta=2
    17                           	psect	text6,local,class=CODE,merge=1,delta=2
    18                           	psect	text7,local,class=CODE,merge=1,delta=2
    19                           	psect	text8,local,class=CODE,merge=1,delta=2
    20                           	psect	text9,local,class=CODE,merge=1,delta=2,group=1
    21                           	psect	text10,local,class=CODE,merge=1,delta=2
    22                           	psect	text11,local,class=CODE,merge=1,delta=2,group=2
    23                           	psect	text12,local,class=CODE,merge=1,delta=2,group=1
    24                           	psect	text13,local,class=CODE,merge=1,delta=2,group=1
    25                           	psect	text14,local,class=CODE,merge=1,delta=2
    26                           	psect	text15,local,class=CODE,merge=1,delta=2
    27                           	psect	text16,local,class=CODE,merge=1,delta=2
    28                           	psect	text17,local,class=CODE,merge=1,delta=2
    29                           	psect	text18,local,class=CODE,merge=1,delta=2
    30                           	psect	text19,local,class=CODE,merge=1,delta=2
    31                           	psect	intentry,global,class=CODE,delta=2
    32                           	psect	text20,local,class=CODE,merge=1,delta=2
    33                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    34                           	dabs	1,0x4E,2
    35     0000                     
    36                           ; Version 2.20
    37                           ; Generated 12/02/2020 GMT
    38                           ; 
    39                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    40                           ; All rights reserved.
    41                           ; 
    42                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    43                           ; 
    44                           ; Redistribution and use in source and binary forms, with or without modification, are
    45                           ; permitted provided that the following conditions are met:
    46                           ; 
    47                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    48                           ;        conditions and the following disclaimer.
    49                           ; 
    50                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    51                           ;        of conditions and the following disclaimer in the documentation and/or other
    52                           ;        materials provided with the distribution.
    53                           ; 
    54                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    55                           ;        software without specific prior written permission.
    56                           ; 
    57                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    58                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    59                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    60                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    61                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    62                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    63                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    64                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    65                           ; 
    66                           ; 
    67                           ; Code-generator required, PIC16F84A Definitions
    68                           ; 
    69                           ; SFR Addresses
    70     0000                     	;# 
    71     0001                     	;# 
    72     0002                     	;# 
    73     0003                     	;# 
    74     0004                     	;# 
    75     0005                     	;# 
    76     0006                     	;# 
    77     0008                     	;# 
    78     0009                     	;# 
    79     000A                     	;# 
    80     000B                     	;# 
    81     0081                     	;# 
    82     0085                     	;# 
    83     0086                     	;# 
    84     0088                     	;# 
    85     0089                     	;# 
    86     0000                     	;# 
    87     0001                     	;# 
    88     0002                     	;# 
    89     0003                     	;# 
    90     0004                     	;# 
    91     0005                     	;# 
    92     0006                     	;# 
    93     0008                     	;# 
    94     0009                     	;# 
    95     000A                     	;# 
    96     000B                     	;# 
    97     0081                     	;# 
    98     0085                     	;# 
    99     0086                     	;# 
   100     0088                     	;# 
   101     0089                     	;# 
   102     0000                     	;# 
   103     0001                     	;# 
   104     0002                     	;# 
   105     0003                     	;# 
   106     0004                     	;# 
   107     0005                     	;# 
   108     0006                     	;# 
   109     0008                     	;# 
   110     0009                     	;# 
   111     000A                     	;# 
   112     000B                     	;# 
   113     0081                     	;# 
   114     0085                     	;# 
   115     0086                     	;# 
   116     0088                     	;# 
   117     0089                     	;# 
   118     0000                     	;# 
   119     0001                     	;# 
   120     0002                     	;# 
   121     0003                     	;# 
   122     0004                     	;# 
   123     0005                     	;# 
   124     0006                     	;# 
   125     0008                     	;# 
   126     0009                     	;# 
   127     000A                     	;# 
   128     000B                     	;# 
   129     0081                     	;# 
   130     0085                     	;# 
   131     0086                     	;# 
   132     0088                     	;# 
   133     0089                     	;# 
   134                           
   135                           	psect	idataBANK0
   136     03C5                     __pidataBANK0:
   137                           
   138                           ;initializer for welcomeMessage@F331
   139     03C5  3448               	retlw	72
   140     03C6  3469               	retlw	105
   141     03C7  3400               	retlw	0
   142     000B                     _INTCONbits	set	11
   143     002B                     _RA3	set	43
   144     0036                     _RB6	set	54
   145     002A                     _RA2	set	42
   146     0028                     _RA0	set	40
   147     0034                     _RB4	set	52
   148     0033                     _RB3	set	51
   149     0032                     _RB2	set	50
   150     0031                     _RB1	set	49
   151     0029                     _RA1	set	41
   152     0035                     _RB5	set	53
   153     0037                     _RB7	set	55
   154     0081                     _OPTION_REGbits	set	129
   155     0085                     _TRISA	set	133
   156     0086                     _TRISB	set	134
   157                           
   158                           	psect	strings
   159     039A                     __pstrings:
   160     039A                     stringtab:
   161     039A                     __stringtab:
   162     039A                     stringcode:	
   163                           ;	String table - string pointers are 1 byte each
   164                           
   165     039A                     stringdir:
   166     039A  3003               	movlw	high stringdir
   167     039B  008A               	movwf	10
   168     039C  0804               	movf	4,w
   169     039D  0A84               	incf	4,f
   170     039E  0782               	addwf	2,f
   171     039F                     __stringbase:
   172     039F  3400               	retlw	0
   173     03A0                     __end_of__stringtab:
   174     03A0                     STR_1:
   175     03A0  3430               	retlw	48	;'0'
   176     03A1  342D               	retlw	45	;'-'
   177     03A2  3435               	retlw	53	;'5'
   178     03A3  3456               	retlw	86	;'V'
   179     03A4  3400               	retlw	0
   180                           
   181                           	psect	cinit
   182     000C                     start_initialization:	
   183                           ; #config settings
   184                           
   185     000C                     __initialization:
   186                           
   187                           ; Initialize objects allocated to BANK0
   188     000C  23C5               	fcall	__pidataBANK0	;fetch initializer
   189     000D  00C7               	movwf	__pdataBANK0& (0+127)
   190     000E  23C6               	fcall	__pidataBANK0+1	;fetch initializer
   191     000F  00C8               	movwf	(__pdataBANK0+1)& (0+127)
   192     0010  23C7               	fcall	__pidataBANK0+2	;fetch initializer
   193     0011  00C9               	movwf	(__pdataBANK0+2)& (0+127)
   194                           
   195                           ; Clear objects allocated to BANK0
   196     0012  01C4               	clrf	__pbssBANK0& (0+127)
   197     0013  01C5               	clrf	(__pbssBANK0+1)& (0+127)
   198     0014  01C6               	clrf	(__pbssBANK0+2)& (0+127)
   199     0015                     end_of_initialization:	
   200                           ;End of C runtime variable initialization code
   201                           
   202     0015                     __end_of__initialization:
   203     0015  0183               	clrf	3
   204     0016  2817               	ljmp	_main	;jump to C main() function
   205                           
   206                           	psect	bssBANK0
   207     0044                     __pbssBANK0:
   208     0044                     _adcVal:
   209     0044                     	ds	2
   210     0046                     _toggleHold:
   211     0046                     	ds	1
   212                           
   213                           	psect	dataBANK0
   214     0047                     __pdataBANK0:
   215     0047                     welcomeMessage@F331:
   216     0047                     	ds	3
   217                           
   218                           	psect	cstackCOMMON
   219     0000                     __pcstackCOMMON:
   220     0000                     ??_strcpy:
   221     0000                     ??_Lcd_Write_Int:	
   222                           ; 1 bytes @ 0x0
   223                           
   224     0000                     ??_utoa:	
   225                           ; 1 bytes @ 0x0
   226                           
   227     0000                     ??_delay_2000ms:	
   228                           ; 1 bytes @ 0x0
   229                           
   230     0000                     ??_welcomeMessage:	
   231                           ; 1 bytes @ 0x0
   232                           
   233     0000                     ??_main:	
   234                           ; 1 bytes @ 0x0
   235                           
   236     0000                     ??_Lcd_Port:	
   237                           ; 1 bytes @ 0x0
   238                           
   239     0000                     ??___wmul:	
   240                           ; 1 bytes @ 0x0
   241                           
   242     0000                     ??___lwdiv:	
   243                           ; 1 bytes @ 0x0
   244                           
   245     0000                     ??___lwmod:	
   246                           ; 1 bytes @ 0x0
   247                           
   248                           
   249                           	psect	cstackBANK0
   250     000C                     __pcstackBANK0:	
   251                           ; 1 bytes @ 0x0
   252                           
   253     000C                     ?_Lcd_Clear:
   254     000C                     ?_Lcd_Write_String:	
   255                           ; 1 bytes @ 0x0
   256                           
   257     000C                     ?_Lcd_Init:	
   258                           ; 1 bytes @ 0x0
   259                           
   260     000C                     ?_Lcd_Write_Char:	
   261                           ; 1 bytes @ 0x0
   262                           
   263     000C                     ?_delay_100ms:	
   264                           ; 1 bytes @ 0x0
   265                           
   266     000C                     ?_delay_2000ms:	
   267                           ; 1 bytes @ 0x0
   268                           
   269     000C                     ?_isr:	
   270                           ; 1 bytes @ 0x0
   271                           
   272     000C                     ?_welcomeMessage:	
   273                           ; 1 bytes @ 0x0
   274                           
   275     000C                     ?_main:	
   276                           ; 1 bytes @ 0x0
   277                           
   278     000C                     ?_Lcd_Port:	
   279                           ; 1 bytes @ 0x0
   280                           
   281     000C                     ?_Lcd_Cmd:	
   282                           ; 1 bytes @ 0x0
   283                           
   284     000C                     ?i1_delay_100ms:	
   285                           ; 1 bytes @ 0x0
   286                           
   287     000C                     ??i1_delay_100ms:	
   288                           ; 1 bytes @ 0x0
   289                           
   290                           
   291                           ; 1 bytes @ 0x0
   292     000C                     	ds	2
   293     000E                     ??_isr:
   294                           
   295                           ; 1 bytes @ 0x2
   296     000E                     	ds	2
   297     0010                     ?_strcpy:
   298     0010                     ??_delay_100ms:	
   299                           ; 1 bytes @ 0x4
   300                           
   301     0010                     ?_readADC1:	
   302                           ; 1 bytes @ 0x4
   303                           
   304     0010                     ?_readADC2:	
   305                           ; 2 bytes @ 0x4
   306                           
   307     0010                     ?___lwmod:	
   308                           ; 2 bytes @ 0x4
   309                           
   310     0010                     Lcd_Port@a:	
   311                           ; 2 bytes @ 0x4
   312                           
   313     0010                     strcpy@from:	
   314                           ; 1 bytes @ 0x4
   315                           
   316     0010                     ___lwmod@divisor:	
   317                           ; 1 bytes @ 0x4
   318                           
   319                           
   320                           ; 2 bytes @ 0x4
   321     0010                     	ds	1
   322     0011                     ??_Lcd_Write_Char:
   323     0011                     ??_Lcd_Cmd:	
   324                           ; 1 bytes @ 0x5
   325                           
   326     0011                     strcpy@to:	
   327                           ; 1 bytes @ 0x5
   328                           
   329                           
   330                           ; 1 bytes @ 0x5
   331     0011                     	ds	1
   332     0012                     ??_readADC1:
   333     0012                     ??_readADC2:	
   334                           ; 1 bytes @ 0x6
   335                           
   336     0012                     Lcd_Write_Char@temp:	
   337                           ; 1 bytes @ 0x6
   338                           
   339     0012                     strcpy@cp:	
   340                           ; 1 bytes @ 0x6
   341                           
   342     0012                     delay_2000ms@i:	
   343                           ; 1 bytes @ 0x6
   344                           
   345     0012                     ___lwmod@dividend:	
   346                           ; 2 bytes @ 0x6
   347                           
   348                           
   349                           ; 2 bytes @ 0x6
   350     0012                     	ds	1
   351     0013                     Lcd_Cmd@a:
   352     0013                     Lcd_Write_Char@y:	
   353                           ; 1 bytes @ 0x7
   354                           
   355                           
   356                           ; 1 bytes @ 0x7
   357     0013                     	ds	1
   358     0014                     ??_Lcd_Clear:
   359     0014                     ?_Lcd_Set_Cursor:	
   360                           ; 1 bytes @ 0x8
   361                           
   362     0014                     ??_Lcd_Init:	
   363                           ; 1 bytes @ 0x8
   364                           
   365     0014                     Lcd_Set_Cursor@b:	
   366                           ; 1 bytes @ 0x8
   367                           
   368     0014                     Lcd_Write_Char@a:	
   369                           ; 1 bytes @ 0x8
   370                           
   371     0014                     ___lwmod@counter:	
   372                           ; 1 bytes @ 0x8
   373                           
   374     0014                     readADC1@volt:	
   375                           ; 1 bytes @ 0x8
   376                           
   377     0014                     readADC2@volt:	
   378                           ; 2 bytes @ 0x8
   379                           
   380                           
   381                           ; 2 bytes @ 0x8
   382     0014                     	ds	1
   383     0015                     ??_Lcd_Set_Cursor:
   384     0015                     ??_Lcd_Write_String:	
   385                           ; 1 bytes @ 0x9
   386                           
   387     0015                     ?___wmul:	
   388                           ; 1 bytes @ 0x9
   389                           
   390     0015                     ___wmul@multiplier:	
   391                           ; 2 bytes @ 0x9
   392                           
   393                           
   394                           ; 2 bytes @ 0x9
   395     0015                     	ds	1
   396     0016                     Lcd_Set_Cursor@a:
   397     0016                     readADC1@bits:	
   398                           ; 1 bytes @ 0xA
   399                           
   400     0016                     readADC2@bits:	
   401                           ; 1 bytes @ 0xA
   402                           
   403     0016                     Lcd_Write_String@i:	
   404                           ; 1 bytes @ 0xA
   405                           
   406                           
   407                           ; 2 bytes @ 0xA
   408     0016                     	ds	1
   409     0017                     Lcd_Set_Cursor@z:
   410     0017                     readADC1@rxData:	
   411                           ; 1 bytes @ 0xB
   412                           
   413     0017                     readADC2@rxData:	
   414                           ; 1 bytes @ 0xB
   415                           
   416     0017                     ___wmul@multiplicand:	
   417                           ; 1 bytes @ 0xB
   418                           
   419                           
   420                           ; 2 bytes @ 0xB
   421     0017                     	ds	1
   422     0018                     Lcd_Set_Cursor@y:
   423     0018                     Lcd_Write_String@a:	
   424                           ; 1 bytes @ 0xC
   425                           
   426                           
   427                           ; 1 bytes @ 0xC
   428     0018                     	ds	1
   429     0019                     Lcd_Set_Cursor@temp:
   430     0019                     ___wmul@product:	
   431                           ; 1 bytes @ 0xD
   432                           
   433                           
   434                           ; 2 bytes @ 0xD
   435     0019                     	ds	1
   436     001A                     welcomeMessage@msg:
   437                           
   438                           ; 3 bytes @ 0xE
   439     001A                     	ds	1
   440     001B                     ?___lwdiv:
   441     001B                     ___lwdiv@divisor:	
   442                           ; 2 bytes @ 0xF
   443                           
   444                           
   445                           ; 2 bytes @ 0xF
   446     001B                     	ds	2
   447     001D                     ___lwdiv@dividend:
   448                           
   449                           ; 2 bytes @ 0x11
   450     001D                     	ds	2
   451     001F                     ___lwdiv@quotient:
   452                           
   453                           ; 2 bytes @ 0x13
   454     001F                     	ds	2
   455     0021                     ___lwdiv@counter:
   456                           
   457                           ; 1 bytes @ 0x15
   458     0021                     	ds	1
   459     0022                     ?_utoa:
   460     0022                     utoa@val:	
   461                           ; 1 bytes @ 0x16
   462                           
   463                           
   464                           ; 2 bytes @ 0x16
   465     0022                     	ds	2
   466     0024                     utoa@base:
   467                           
   468                           ; 2 bytes @ 0x18
   469     0024                     	ds	2
   470     0026                     utoa@v:
   471                           
   472                           ; 2 bytes @ 0x1A
   473     0026                     	ds	2
   474     0028                     utoa@c:
   475                           
   476                           ; 1 bytes @ 0x1C
   477     0028                     	ds	1
   478     0029                     utoa@buf:
   479                           
   480                           ; 1 bytes @ 0x1D
   481     0029                     	ds	1
   482     002A                     ?_Lcd_Write_Int:
   483     002A                     Lcd_Write_Int@a:	
   484                           ; 1 bytes @ 0x1E
   485                           
   486                           
   487                           ; 2 bytes @ 0x1E
   488     002A                     	ds	2
   489     002C                     Lcd_Write_Int@temp:
   490                           
   491                           ; 16 bytes @ 0x20
   492     002C                     	ds	16
   493     003C                     main@ADC1_Digit1:
   494                           
   495                           ; 2 bytes @ 0x30
   496     003C                     	ds	2
   497     003E                     main@ADC1_Digit2:
   498                           
   499                           ; 2 bytes @ 0x32
   500     003E                     	ds	2
   501     0040                     main@ADC2_Digit1:
   502                           
   503                           ; 2 bytes @ 0x34
   504     0040                     	ds	2
   505     0042                     main@ADC2_Digit2:
   506                           
   507                           ; 2 bytes @ 0x36
   508     0042                     	ds	2
   509                           
   510                           	psect	maintext
   511     0017                     __pmaintext:	
   512 ;;
   513 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   514 ;;
   515 ;; *************** function _main *****************
   516 ;; Defined at:
   517 ;;		line 71 in file "main.c"
   518 ;; Parameters:    Size  Location     Type
   519 ;;		None
   520 ;; Auto vars:     Size  Location     Type
   521 ;;  ADC2_Digit2     2   54[BANK0 ] unsigned short 
   522 ;;  ADC2_Digit1     2   52[BANK0 ] unsigned short 
   523 ;;  ADC1_Digit2     2   50[BANK0 ] unsigned short 
   524 ;;  ADC1_Digit1     2   48[BANK0 ] unsigned short 
   525 ;; Return value:  Size  Location     Type
   526 ;;                  1    wreg      void 
   527 ;; Registers used:
   528 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   529 ;; Tracked objects:
   530 ;;		On entry : B00/0
   531 ;;		On exit  : 0/0
   532 ;;		Unchanged: 0/0
   533 ;; Data sizes:     COMMON   BANK0
   534 ;;      Params:         0       0
   535 ;;      Locals:         0       8
   536 ;;      Temps:          0       0
   537 ;;      Totals:         0       8
   538 ;;Total ram usage:        8 bytes
   539 ;; Hardware stack levels required when called: 6
   540 ;; This function calls:
   541 ;;		_Lcd_Clear
   542 ;;		_Lcd_Init
   543 ;;		_Lcd_Set_Cursor
   544 ;;		_Lcd_Write_Char
   545 ;;		_Lcd_Write_Int
   546 ;;		___lwdiv
   547 ;;		___lwmod
   548 ;;		___wmul
   549 ;;		_delay_100ms
   550 ;;		_readADC1
   551 ;;		_readADC2
   552 ;;		_welcomeMessage
   553 ;; This function is called by:
   554 ;;		Startup code after reset
   555 ;; This function uses a non-reentrant model
   556 ;;
   557                           
   558     0017                     _main:	
   559                           ;psect for function _main
   560                           
   561                           
   562                           ;main.c: 74:     TRISB = 0b01000001;
   563                           
   564                           ;incstack = 0
   565                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   566     0017  3041               	movlw	65
   567     0018  1683               	bsf	3,5	;RP0=1, select bank1
   568     0019  0086               	movwf	6	;volatile
   569                           
   570                           ;main.c: 75:     TRISA = 0b01000;
   571     001A  3008               	movlw	8
   572     001B  0085               	movwf	5	;volatile
   573                           
   574                           ;main.c: 77:     RB7 = 1;
   575     001C  1283               	bcf	3,5	;RP0=0, select bank0
   576     001D  1786               	bsf	6,7	;volatile
   577                           
   578                           ;main.c: 78:     RB5 = 0;
   579     001E  1286               	bcf	6,5	;volatile
   580                           
   581                           ;main.c: 80:     RA1 = 0;
   582     001F  1085               	bcf	5,1	;volatile
   583                           
   584                           ;main.c: 86:     OPTION_REGbits.INTEDG = 1;
   585     0020  1683               	bsf	3,5	;RP0=1, select bank1
   586     0021  1701               	bsf	1,6	;volatile
   587                           
   588                           ;main.c: 88:     INTCONbits.INTE = 1;
   589     0022  160B               	bsf	11,4	;volatile
   590                           
   591                           ;main.c: 90:     INTCONbits.GIE = 1;
   592     0023  178B               	bsf	11,7	;volatile
   593                           
   594                           ;main.c: 93:     Lcd_Init();
   595     0024  227B               	fcall	_Lcd_Init
   596                           
   597                           ;main.c: 94:     welcomeMessage();
   598     0025  22F0               	fcall	_welcomeMessage
   599     0026                     l1531:
   600                           
   601                           ;main.c: 100:         while (toggleHold) {
   602     0026  1283               	bcf	3,5	;RP0=0, select bank0
   603     0027  0846               	movf	_toggleHold,w	;volatile
   604     0028  1903               	btfsc	3,2
   605     0029  285B               	goto	l1533
   606                           
   607                           ;main.c: 103:             Lcd_Set_Cursor(1, 1);
   608     002A  0194               	clrf	Lcd_Set_Cursor@b
   609     002B  0A94               	incf	Lcd_Set_Cursor@b,f
   610     002C  3001               	movlw	1
   611     002D  2217               	fcall	_Lcd_Set_Cursor
   612                           
   613                           ;main.c: 104:             Lcd_Write_Int(ADC1_Digit1);
   614     002E  083D               	movf	main@ADC1_Digit1+1,w
   615     002F  00AB               	movwf	Lcd_Write_Int@a+1
   616     0030  083C               	movf	main@ADC1_Digit1,w
   617     0031  00AA               	movwf	Lcd_Write_Int@a
   618     0032  238D               	fcall	_Lcd_Write_Int
   619                           
   620                           ;main.c: 105:             Lcd_Set_Cursor(1, 2);
   621     0033  3002               	movlw	2
   622     0034  0094               	movwf	Lcd_Set_Cursor@b
   623     0035  3001               	movlw	1
   624     0036  2217               	fcall	_Lcd_Set_Cursor
   625                           
   626                           ;main.c: 106:             Lcd_Write_Char('.');
   627     0037  302E               	movlw	46
   628     0038  22AC               	fcall	_Lcd_Write_Char
   629                           
   630                           ;main.c: 107:             Lcd_Set_Cursor(1, 3);
   631     0039  3003               	movlw	3
   632     003A  0094               	movwf	Lcd_Set_Cursor@b
   633     003B  3001               	movlw	1
   634     003C  2217               	fcall	_Lcd_Set_Cursor
   635                           
   636                           ;main.c: 108:             Lcd_Write_Int(ADC1_Digit2);
   637     003D  083F               	movf	main@ADC1_Digit2+1,w
   638     003E  00AB               	movwf	Lcd_Write_Int@a+1
   639     003F  083E               	movf	main@ADC1_Digit2,w
   640     0040  00AA               	movwf	Lcd_Write_Int@a
   641     0041  238D               	fcall	_Lcd_Write_Int
   642                           
   643                           ;main.c: 109:             Lcd_Set_Cursor(1, 6);
   644     0042  3006               	movlw	6
   645     0043  0094               	movwf	Lcd_Set_Cursor@b
   646     0044  3001               	movlw	1
   647     0045  2217               	fcall	_Lcd_Set_Cursor
   648                           
   649                           ;main.c: 110:             Lcd_Write_Int(ADC2_Digit1);
   650     0046  0841               	movf	main@ADC2_Digit1+1,w
   651     0047  00AB               	movwf	Lcd_Write_Int@a+1
   652     0048  0840               	movf	main@ADC2_Digit1,w
   653     0049  00AA               	movwf	Lcd_Write_Int@a
   654     004A  238D               	fcall	_Lcd_Write_Int
   655                           
   656                           ;main.c: 111:             Lcd_Set_Cursor(1, 7);
   657     004B  3007               	movlw	7
   658     004C  0094               	movwf	Lcd_Set_Cursor@b
   659     004D  3001               	movlw	1
   660     004E  2217               	fcall	_Lcd_Set_Cursor
   661                           
   662                           ;main.c: 112:             Lcd_Write_Char('.');
   663     004F  302E               	movlw	46
   664     0050  22AC               	fcall	_Lcd_Write_Char
   665                           
   666                           ;main.c: 113:             Lcd_Set_Cursor(1, 8);
   667     0051  3008               	movlw	8
   668     0052  0094               	movwf	Lcd_Set_Cursor@b
   669     0053  3001               	movlw	1
   670     0054  2217               	fcall	_Lcd_Set_Cursor
   671                           
   672                           ;main.c: 114:             Lcd_Write_Int(ADC2_Digit2);
   673     0055  0843               	movf	main@ADC2_Digit2+1,w
   674     0056  00AB               	movwf	Lcd_Write_Int@a+1
   675     0057  0842               	movf	main@ADC2_Digit2,w
   676     0058  00AA               	movwf	Lcd_Write_Int@a
   677     0059  238D               	fcall	_Lcd_Write_Int
   678     005A  2826               	goto	l1531
   679     005B                     l1533:
   680                           
   681                           ;main.c: 119:         adcVal = readADC1();
   682     005B  2190               	fcall	_readADC1
   683     005C  0811               	movf	?_readADC1+1,w
   684     005D  00C5               	movwf	_adcVal+1
   685     005E  0810               	movf	?_readADC1,w
   686     005F  00C4               	movwf	_adcVal
   687                           
   688                           ;main.c: 120:         ADC1_Digit1 = adcVal / 204;
   689     0060  30CC               	movlw	204
   690     0061  009B               	movwf	___lwdiv@divisor
   691     0062  3000               	movlw	0
   692     0063  009C               	movwf	___lwdiv@divisor+1
   693     0064  0845               	movf	_adcVal+1,w
   694     0065  009E               	movwf	___lwdiv@dividend+1
   695     0066  0844               	movf	_adcVal,w
   696     0067  009D               	movwf	___lwdiv@dividend
   697     0068  21DB               	fcall	___lwdiv
   698     0069  081C               	movf	?___lwdiv+1,w
   699     006A  00BD               	movwf	main@ADC1_Digit1+1
   700     006B  081B               	movf	?___lwdiv,w
   701     006C  00BC               	movwf	main@ADC1_Digit1
   702                           
   703                           ;main.c: 121:         ADC1_Digit2 = ((adcVal % 204)*10 / 204);
   704     006D  30CC               	movlw	204
   705     006E  009B               	movwf	___lwdiv@divisor
   706     006F  3000               	movlw	0
   707     0070  009C               	movwf	___lwdiv@divisor+1
   708     0071  0845               	movf	_adcVal+1,w
   709     0072  0093               	movwf	___lwmod@dividend+1
   710     0073  0844               	movf	_adcVal,w
   711     0074  0092               	movwf	___lwmod@dividend
   712     0075  30CC               	movlw	204
   713     0076  0090               	movwf	___lwmod@divisor
   714     0077  3000               	movlw	0
   715     0078  0091               	movwf	___lwmod@divisor+1
   716     0079  2249               	fcall	___lwmod
   717     007A  0811               	movf	?___lwmod+1,w
   718     007B  0096               	movwf	___wmul@multiplier+1
   719     007C  0810               	movf	?___lwmod,w
   720     007D  0095               	movwf	___wmul@multiplier
   721     007E  300A               	movlw	10
   722     007F  0097               	movwf	___wmul@multiplicand
   723     0080  3000               	movlw	0
   724     0081  0098               	movwf	___wmul@multiplicand+1
   725     0082  22CF               	fcall	___wmul
   726     0083  0816               	movf	?___wmul+1,w
   727     0084  009E               	movwf	___lwdiv@dividend+1
   728     0085  0815               	movf	?___wmul,w
   729     0086  009D               	movwf	___lwdiv@dividend
   730     0087  21DB               	fcall	___lwdiv
   731     0088  081C               	movf	?___lwdiv+1,w
   732     0089  00BF               	movwf	main@ADC1_Digit2+1
   733     008A  081B               	movf	?___lwdiv,w
   734     008B  00BE               	movwf	main@ADC1_Digit2
   735                           
   736                           ;main.c: 122:         adcVal = readADC2();
   737     008C  2145               	fcall	_readADC2
   738     008D  0811               	movf	?_readADC2+1,w
   739     008E  00C5               	movwf	_adcVal+1
   740     008F  0810               	movf	?_readADC2,w
   741     0090  00C4               	movwf	_adcVal
   742                           
   743                           ;main.c: 123:         ADC2_Digit1 = adcVal / 204;
   744     0091  30CC               	movlw	204
   745     0092  009B               	movwf	___lwdiv@divisor
   746     0093  3000               	movlw	0
   747     0094  009C               	movwf	___lwdiv@divisor+1
   748     0095  0845               	movf	_adcVal+1,w
   749     0096  009E               	movwf	___lwdiv@dividend+1
   750     0097  0844               	movf	_adcVal,w
   751     0098  009D               	movwf	___lwdiv@dividend
   752     0099  21DB               	fcall	___lwdiv
   753     009A  081C               	movf	?___lwdiv+1,w
   754     009B  00C1               	movwf	main@ADC2_Digit1+1
   755     009C  081B               	movf	?___lwdiv,w
   756     009D  00C0               	movwf	main@ADC2_Digit1
   757                           
   758                           ;main.c: 124:         ADC2_Digit2 = ((adcVal % 204)*10 / 204);
   759     009E  30CC               	movlw	204
   760     009F  009B               	movwf	___lwdiv@divisor
   761     00A0  3000               	movlw	0
   762     00A1  009C               	movwf	___lwdiv@divisor+1
   763     00A2  0845               	movf	_adcVal+1,w
   764     00A3  0093               	movwf	___lwmod@dividend+1
   765     00A4  0844               	movf	_adcVal,w
   766     00A5  0092               	movwf	___lwmod@dividend
   767     00A6  30CC               	movlw	204
   768     00A7  0090               	movwf	___lwmod@divisor
   769     00A8  3000               	movlw	0
   770     00A9  0091               	movwf	___lwmod@divisor+1
   771     00AA  2249               	fcall	___lwmod
   772     00AB  0811               	movf	?___lwmod+1,w
   773     00AC  0096               	movwf	___wmul@multiplier+1
   774     00AD  0810               	movf	?___lwmod,w
   775     00AE  0095               	movwf	___wmul@multiplier
   776     00AF  300A               	movlw	10
   777     00B0  0097               	movwf	___wmul@multiplicand
   778     00B1  3000               	movlw	0
   779     00B2  0098               	movwf	___wmul@multiplicand+1
   780     00B3  22CF               	fcall	___wmul
   781     00B4  0816               	movf	?___wmul+1,w
   782     00B5  009E               	movwf	___lwdiv@dividend+1
   783     00B6  0815               	movf	?___wmul,w
   784     00B7  009D               	movwf	___lwdiv@dividend
   785     00B8  21DB               	fcall	___lwdiv
   786     00B9  081C               	movf	?___lwdiv+1,w
   787     00BA  00C3               	movwf	main@ADC2_Digit2+1
   788     00BB  081B               	movf	?___lwdiv,w
   789     00BC  00C2               	movwf	main@ADC2_Digit2
   790                           
   791                           ;main.c: 130:         Lcd_Clear();
   792     00BD  237F               	fcall	_Lcd_Clear
   793                           
   794                           ;main.c: 131:         Lcd_Set_Cursor(1, 1);
   795     00BE  1283               	bcf	3,5	;RP0=0, select bank0
   796     00BF  0194               	clrf	Lcd_Set_Cursor@b
   797     00C0  0A94               	incf	Lcd_Set_Cursor@b,f
   798     00C1  3001               	movlw	1
   799     00C2  2217               	fcall	_Lcd_Set_Cursor
   800                           
   801                           ;main.c: 132:         Lcd_Write_Int(ADC1_Digit1);
   802     00C3  083D               	movf	main@ADC1_Digit1+1,w
   803     00C4  00AB               	movwf	Lcd_Write_Int@a+1
   804     00C5  083C               	movf	main@ADC1_Digit1,w
   805     00C6  00AA               	movwf	Lcd_Write_Int@a
   806     00C7  238D               	fcall	_Lcd_Write_Int
   807                           
   808                           ;main.c: 133:         Lcd_Set_Cursor(1, 2);
   809     00C8  3002               	movlw	2
   810     00C9  0094               	movwf	Lcd_Set_Cursor@b
   811     00CA  3001               	movlw	1
   812     00CB  2217               	fcall	_Lcd_Set_Cursor
   813                           
   814                           ;main.c: 134:         Lcd_Write_Char('.');
   815     00CC  302E               	movlw	46
   816     00CD  22AC               	fcall	_Lcd_Write_Char
   817                           
   818                           ;main.c: 135:         Lcd_Set_Cursor(1, 3);
   819     00CE  3003               	movlw	3
   820     00CF  0094               	movwf	Lcd_Set_Cursor@b
   821     00D0  3001               	movlw	1
   822     00D1  2217               	fcall	_Lcd_Set_Cursor
   823                           
   824                           ;main.c: 136:         Lcd_Write_Int(ADC1_Digit2);
   825     00D2  083F               	movf	main@ADC1_Digit2+1,w
   826     00D3  00AB               	movwf	Lcd_Write_Int@a+1
   827     00D4  083E               	movf	main@ADC1_Digit2,w
   828     00D5  00AA               	movwf	Lcd_Write_Int@a
   829     00D6  238D               	fcall	_Lcd_Write_Int
   830                           
   831                           ;main.c: 137:         Lcd_Set_Cursor(1, 6);
   832     00D7  3006               	movlw	6
   833     00D8  0094               	movwf	Lcd_Set_Cursor@b
   834     00D9  3001               	movlw	1
   835     00DA  2217               	fcall	_Lcd_Set_Cursor
   836                           
   837                           ;main.c: 138:         Lcd_Write_Int(ADC2_Digit1);
   838     00DB  0841               	movf	main@ADC2_Digit1+1,w
   839     00DC  00AB               	movwf	Lcd_Write_Int@a+1
   840     00DD  0840               	movf	main@ADC2_Digit1,w
   841     00DE  00AA               	movwf	Lcd_Write_Int@a
   842     00DF  238D               	fcall	_Lcd_Write_Int
   843                           
   844                           ;main.c: 139:         Lcd_Set_Cursor(1, 7);
   845     00E0  3007               	movlw	7
   846     00E1  0094               	movwf	Lcd_Set_Cursor@b
   847     00E2  3001               	movlw	1
   848     00E3  2217               	fcall	_Lcd_Set_Cursor
   849                           
   850                           ;main.c: 140:         Lcd_Write_Char('.');
   851     00E4  302E               	movlw	46
   852     00E5  22AC               	fcall	_Lcd_Write_Char
   853                           
   854                           ;main.c: 141:         Lcd_Set_Cursor(1, 8);
   855     00E6  3008               	movlw	8
   856     00E7  0094               	movwf	Lcd_Set_Cursor@b
   857     00E8  3001               	movlw	1
   858     00E9  2217               	fcall	_Lcd_Set_Cursor
   859                           
   860                           ;main.c: 142:         Lcd_Write_Int(ADC2_Digit2);
   861     00EA  0843               	movf	main@ADC2_Digit2+1,w
   862     00EB  00AB               	movwf	Lcd_Write_Int@a+1
   863     00EC  0842               	movf	main@ADC2_Digit2,w
   864     00ED  00AA               	movwf	Lcd_Write_Int@a
   865     00EE  238D               	fcall	_Lcd_Write_Int
   866                           
   867                           ;main.c: 144:         delay_100ms();
   868     00EF  23A5               	fcall	_delay_100ms
   869     00F0  2826               	goto	l1531
   870     00F1                     __end_of_main:
   871                           
   872                           	psect	text1
   873     02F0                     __ptext1:	
   874 ;; *************** function _welcomeMessage *****************
   875 ;; Defined at:
   876 ;;		line 53 in file "main.c"
   877 ;; Parameters:    Size  Location     Type
   878 ;;		None
   879 ;; Auto vars:     Size  Location     Type
   880 ;;  msg             3   14[BANK0 ] unsigned char [3]
   881 ;; Return value:  Size  Location     Type
   882 ;;                  1    wreg      void 
   883 ;; Registers used:
   884 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   885 ;; Tracked objects:
   886 ;;		On entry : 100/0
   887 ;;		On exit  : 0/0
   888 ;;		Unchanged: 0/0
   889 ;; Data sizes:     COMMON   BANK0
   890 ;;      Params:         0       0
   891 ;;      Locals:         0       3
   892 ;;      Temps:          0       0
   893 ;;      Totals:         0       3
   894 ;;Total ram usage:        3 bytes
   895 ;; Hardware stack levels used: 1
   896 ;; Hardware stack levels required when called: 5
   897 ;; This function calls:
   898 ;;		_Lcd_Clear
   899 ;;		_Lcd_Set_Cursor
   900 ;;		_Lcd_Write_String
   901 ;;		_delay_2000ms
   902 ;;		_strcpy
   903 ;; This function is called by:
   904 ;;		_main
   905 ;; This function uses a non-reentrant model
   906 ;;
   907                           
   908     02F0                     _welcomeMessage:	
   909                           ;psect for function _welcomeMessage
   910                           
   911                           
   912                           ;main.c: 54:     char msg[] = "Hi";
   913                           
   914                           ;incstack = 0
   915                           ; Regs used in _welcomeMessage: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   916     02F0  0847               	movf	welcomeMessage@F331,w
   917     02F1  009A               	movwf	welcomeMessage@msg
   918     02F2  0848               	movf	welcomeMessage@F331+1,w
   919     02F3  009B               	movwf	welcomeMessage@msg+1
   920     02F4  0849               	movf	welcomeMessage@F331+2,w
   921     02F5  009C               	movwf	welcomeMessage@msg+2
   922                           
   923                           ;main.c: 55:     Lcd_Clear();
   924     02F6  237F               	fcall	_Lcd_Clear
   925                           
   926                           ;main.c: 56:     Lcd_Set_Cursor(1, 1);
   927     02F7  1283               	bcf	3,5	;RP0=0, select bank0
   928     02F8  0194               	clrf	Lcd_Set_Cursor@b
   929     02F9  0A94               	incf	Lcd_Set_Cursor@b,f
   930     02FA  3001               	movlw	1
   931     02FB  2217               	fcall	_Lcd_Set_Cursor
   932                           
   933                           ;main.c: 57:     Lcd_Write_String(msg);
   934     02FC  301A               	movlw	(low (welcomeMessage@msg| 0))& (0+255)
   935     02FD  230E               	fcall	_Lcd_Write_String
   936                           
   937                           ;main.c: 58:     delay_2000ms();
   938     02FE  2357               	fcall	_delay_2000ms
   939                           
   940                           ;main.c: 59:     Lcd_Clear();
   941     02FF  237F               	fcall	_Lcd_Clear
   942                           
   943                           ;main.c: 60:     Lcd_Set_Cursor(1, 1);
   944     0300  1283               	bcf	3,5	;RP0=0, select bank0
   945     0301  0194               	clrf	Lcd_Set_Cursor@b
   946     0302  0A94               	incf	Lcd_Set_Cursor@b,f
   947     0303  3001               	movlw	1
   948     0304  2217               	fcall	_Lcd_Set_Cursor
   949                           
   950                           ;main.c: 61:     strcpy(msg, "0-5V");
   951     0305  3001               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   952     0306  0090               	movwf	strcpy@from
   953     0307  301A               	movlw	(low (welcomeMessage@msg| 0))& (0+255)
   954     0308  2328               	fcall	_strcpy
   955                           
   956                           ;main.c: 62:     Lcd_Write_String(msg);
   957     0309  301A               	movlw	(low (welcomeMessage@msg| 0))& (0+255)
   958     030A  230E               	fcall	_Lcd_Write_String
   959                           
   960                           ;main.c: 63:     delay_2000ms();
   961     030B  2357               	fcall	_delay_2000ms
   962                           
   963                           ;main.c: 64:     Lcd_Clear();
   964     030C  237F               	fcall	_Lcd_Clear
   965     030D  0008               	return
   966     030E                     __end_of_welcomeMessage:
   967                           
   968                           	psect	text2
   969     0328                     __ptext2:	
   970 ;; *************** function _strcpy *****************
   971 ;; Defined at:
   972 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\strcpy.c"
   973 ;; Parameters:    Size  Location     Type
   974 ;;  to              1    wreg     PTR unsigned char 
   975 ;;		 -> welcomeMessage@msg(3), 
   976 ;;  from            1    4[BANK0 ] PTR const unsigned char 
   977 ;;		 -> STR_1(5), 
   978 ;; Auto vars:     Size  Location     Type
   979 ;;  to              1    5[BANK0 ] PTR unsigned char 
   980 ;;		 -> welcomeMessage@msg(3), 
   981 ;;  cp              1    6[BANK0 ] PTR unsigned char 
   982 ;;		 -> welcomeMessage@msg(3), 
   983 ;; Return value:  Size  Location     Type
   984 ;;                  1    wreg      PTR unsigned char 
   985 ;; Registers used:
   986 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath
   987 ;; Tracked objects:
   988 ;;		On entry : 100/0
   989 ;;		On exit  : 900/0
   990 ;;		Unchanged: 0/0
   991 ;; Data sizes:     COMMON   BANK0
   992 ;;      Params:         0       1
   993 ;;      Locals:         0       2
   994 ;;      Temps:          0       0
   995 ;;      Totals:         0       3
   996 ;;Total ram usage:        3 bytes
   997 ;; Hardware stack levels used: 1
   998 ;; Hardware stack levels required when called: 2
   999 ;; This function calls:
  1000 ;;		Nothing
  1001 ;; This function is called by:
  1002 ;;		_welcomeMessage
  1003 ;; This function uses a non-reentrant model
  1004 ;;
  1005                           
  1006     0328                     _strcpy:	
  1007                           ;psect for function _strcpy
  1008                           
  1009                           
  1010                           ;incstack = 0
  1011                           ; Regs used in _strcpy: [wreg-fsr0h+status,2+status,0+btemp+1+pclath]
  1012                           ;strcpy@to stored from wreg
  1013     0328  0091               	movwf	strcpy@to
  1014     0329  0811               	movf	strcpy@to,w
  1015     032A  0092               	movwf	strcpy@cp
  1016     032B                     l1305:
  1017     032B  0810               	movf	strcpy@from,w
  1018     032C  0084               	movwf	4
  1019     032D  239A               	fcall	stringdir
  1020     032E  00CF               	movwf	79
  1021     032F  0812               	movf	strcpy@cp,w
  1022     0330  0084               	movwf	4
  1023     0331  084F               	movf	79,w
  1024     0332  1383               	bcf	3,7	;select IRP bank0
  1025     0333  0080               	movwf	0
  1026     0334  0800               	movf	0,w
  1027     0335  1903               	btfsc	3,2
  1028     0336  0008               	return
  1029     0337  3001               	movlw	1
  1030     0338  00CF               	movwf	79
  1031     0339  084F               	movf	79,w
  1032     033A  0792               	addwf	strcpy@cp,f
  1033     033B  3001               	movlw	1
  1034     033C  00CF               	movwf	79
  1035     033D  084F               	movf	79,w
  1036     033E  0790               	addwf	strcpy@from,f
  1037     033F  2B2B               	goto	l1305
  1038     0340                     __end_of_strcpy:
  1039                           
  1040                           	psect	text3
  1041     0357                     __ptext3:	
  1042 ;; *************** function _delay_2000ms *****************
  1043 ;; Defined at:
  1044 ;;		line 29 in file "main.c"
  1045 ;; Parameters:    Size  Location     Type
  1046 ;;		None
  1047 ;; Auto vars:     Size  Location     Type
  1048 ;;  i               2    6[BANK0 ] int 
  1049 ;; Return value:  Size  Location     Type
  1050 ;;                  1    wreg      void 
  1051 ;; Registers used:
  1052 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  1053 ;; Tracked objects:
  1054 ;;		On entry : 900/0
  1055 ;;		On exit  : 0/0
  1056 ;;		Unchanged: 0/0
  1057 ;; Data sizes:     COMMON   BANK0
  1058 ;;      Params:         0       0
  1059 ;;      Locals:         0       2
  1060 ;;      Temps:          0       0
  1061 ;;      Totals:         0       2
  1062 ;;Total ram usage:        2 bytes
  1063 ;; Hardware stack levels used: 1
  1064 ;; Hardware stack levels required when called: 3
  1065 ;; This function calls:
  1066 ;;		_delay_100ms
  1067 ;; This function is called by:
  1068 ;;		_welcomeMessage
  1069 ;; This function uses a non-reentrant model
  1070 ;;
  1071                           
  1072     0357                     _delay_2000ms:	
  1073                           ;psect for function _delay_2000ms
  1074                           
  1075                           
  1076                           ;main.c: 30:     for (int i = 0; i < 20; i++) {
  1077                           
  1078                           ;incstack = 0
  1079                           ; Regs used in _delay_2000ms: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  1080     0357  0192               	clrf	delay_2000ms@i
  1081     0358  0193               	clrf	delay_2000ms@i+1
  1082     0359                     l1263:
  1083                           
  1084                           ;main.c: 31:         delay_100ms();
  1085     0359  23A5               	fcall	_delay_100ms
  1086                           
  1087                           ;main.c: 32:     }
  1088     035A  3001               	movlw	1
  1089     035B  1283               	bcf	3,5	;RP0=0, select bank0
  1090     035C  0792               	addwf	delay_2000ms@i,f
  1091     035D  1803               	skipnc
  1092     035E  0A93               	incf	delay_2000ms@i+1,f
  1093     035F  3000               	movlw	0
  1094     0360  0793               	addwf	delay_2000ms@i+1,f
  1095     0361  0813               	movf	delay_2000ms@i+1,w
  1096     0362  3A80               	xorlw	128
  1097     0363  00CF               	movwf	79
  1098     0364  3080               	movlw	128
  1099     0365  024F               	subwf	79,w
  1100     0366  1D03               	skipz
  1101     0367  2B6A               	goto	u585
  1102     0368  3014               	movlw	20
  1103     0369  0212               	subwf	delay_2000ms@i,w
  1104     036A                     u585:
  1105     036A  1803               	btfsc	3,0
  1106     036B  0008               	return
  1107     036C  2B59               	goto	l1263
  1108     036D                     __end_of_delay_2000ms:
  1109                           
  1110                           	psect	text4
  1111     03A5                     __ptext4:	
  1112 ;; *************** function _delay_100ms *****************
  1113 ;; Defined at:
  1114 ;;		line 23 in file "main.c"
  1115 ;; Parameters:    Size  Location     Type
  1116 ;;		None
  1117 ;; Auto vars:     Size  Location     Type
  1118 ;;		None
  1119 ;; Return value:  Size  Location     Type
  1120 ;;                  1    wreg      void 
  1121 ;; Registers used:
  1122 ;;		wreg
  1123 ;; Tracked objects:
  1124 ;;		On entry : 0/0
  1125 ;;		On exit  : 0/0
  1126 ;;		Unchanged: 0/0
  1127 ;; Data sizes:     COMMON   BANK0
  1128 ;;      Params:         0       0
  1129 ;;      Locals:         0       0
  1130 ;;      Temps:          0       2
  1131 ;;      Totals:         0       2
  1132 ;;Total ram usage:        2 bytes
  1133 ;; Hardware stack levels used: 1
  1134 ;; Hardware stack levels required when called: 2
  1135 ;; This function calls:
  1136 ;;		Nothing
  1137 ;; This function is called by:
  1138 ;;		_delay_2000ms
  1139 ;;		_main
  1140 ;; This function uses a non-reentrant model
  1141 ;;
  1142                           
  1143     03A5                     _delay_100ms:	
  1144                           ;psect for function _delay_100ms
  1145                           
  1146                           
  1147                           ;main.c: 24:     _delay((unsigned long)((100)*(4000000/4000.0)));
  1148                           
  1149                           ;incstack = 0
  1150                           ; Regs used in _delay_100ms: [wreg]
  1151     03A5  3082               	movlw	130
  1152     03A6  1283               	bcf	3,5	;RP0=0, select bank0
  1153     03A7  0091               	movwf	??_delay_100ms+1
  1154     03A8  30DD               	movlw	221
  1155     03A9  0090               	movwf	??_delay_100ms
  1156     03AA                     u797:
  1157     03AA  0B90               	decfsz	??_delay_100ms,f
  1158     03AB  2BAA               	goto	u797
  1159     03AC  0B91               	decfsz	??_delay_100ms+1,f
  1160     03AD  2BAA               	goto	u797
  1161     03AE  2BAF               	nop2
  1162     03AF  0008               	return
  1163     03B0                     __end_of_delay_100ms:
  1164                           
  1165                           	psect	text5
  1166     0217                     __ptext5:	
  1167 ;; *************** function _Lcd_Set_Cursor *****************
  1168 ;; Defined at:
  1169 ;;		line 52 in file "lcd.c"
  1170 ;; Parameters:    Size  Location     Type
  1171 ;;  a               1    wreg     unsigned char 
  1172 ;;  b               1    8[BANK0 ] unsigned char 
  1173 ;; Auto vars:     Size  Location     Type
  1174 ;;  a               1   10[BANK0 ] unsigned char 
  1175 ;;  temp            1   13[BANK0 ] unsigned char 
  1176 ;;  y               1   12[BANK0 ] unsigned char 
  1177 ;;  z               1   11[BANK0 ] unsigned char 
  1178 ;; Return value:  Size  Location     Type
  1179 ;;                  1    wreg      void 
  1180 ;; Registers used:
  1181 ;;		wreg, status,2, status,0, pclath, cstack
  1182 ;; Tracked objects:
  1183 ;;		On entry : 100/0
  1184 ;;		On exit  : 100/0
  1185 ;;		Unchanged: 0/0
  1186 ;; Data sizes:     COMMON   BANK0
  1187 ;;      Params:         0       1
  1188 ;;      Locals:         0       4
  1189 ;;      Temps:          0       1
  1190 ;;      Totals:         0       6
  1191 ;;Total ram usage:        6 bytes
  1192 ;; Hardware stack levels used: 1
  1193 ;; Hardware stack levels required when called: 4
  1194 ;; This function calls:
  1195 ;;		_Lcd_Cmd
  1196 ;; This function is called by:
  1197 ;;		_welcomeMessage
  1198 ;;		_main
  1199 ;; This function uses a non-reentrant model
  1200 ;;
  1201                           
  1202     0217                     _Lcd_Set_Cursor:	
  1203                           ;psect for function _Lcd_Set_Cursor
  1204                           
  1205                           
  1206                           ;incstack = 0
  1207                           ; Regs used in _Lcd_Set_Cursor: [wreg+status,2+status,0+pclath+cstack]
  1208                           ;Lcd_Set_Cursor@a stored from wreg
  1209     0217  0096               	movwf	Lcd_Set_Cursor@a
  1210                           
  1211                           ;lcd.c: 52: void Lcd_Set_Cursor(char a, char b);lcd.c: 53: {;lcd.c: 54:  char temp,z,y;;
      +                          lcd.c: 55:  if(a == 1)
  1212     0218  0316               	decf	Lcd_Set_Cursor@a,w
  1213     0219  1D03               	btfss	3,2
  1214     021A  2A30               	goto	l1283
  1215                           
  1216                           ;lcd.c: 56:  {;lcd.c: 57:    temp = (char) (0x80 + b - 1);
  1217     021B  0814               	movf	Lcd_Set_Cursor@b,w
  1218     021C  3E7F               	addlw	127
  1219     021D  0099               	movwf	Lcd_Set_Cursor@temp
  1220                           
  1221                           ;lcd.c: 58:   z = temp>>4;
  1222     021E  0819               	movf	Lcd_Set_Cursor@temp,w
  1223     021F  0095               	movwf	??_Lcd_Set_Cursor
  1224     0220  3004               	movlw	4
  1225     0221                     u605:
  1226     0221  1003               	clrc
  1227     0222  0C95               	rrf	??_Lcd_Set_Cursor,f
  1228     0223  3EFF               	addlw	-1
  1229     0224  1D03               	skipz
  1230     0225  2A21               	goto	u605
  1231     0226  0815               	movf	??_Lcd_Set_Cursor,w
  1232     0227  0097               	movwf	Lcd_Set_Cursor@z
  1233                           
  1234                           ;lcd.c: 59:   y = temp & 0x0F;
  1235     0228  0819               	movf	Lcd_Set_Cursor@temp,w
  1236     0229  390F               	andlw	15
  1237     022A  0098               	movwf	Lcd_Set_Cursor@y
  1238                           
  1239                           ;lcd.c: 60:   Lcd_Cmd(z);
  1240     022B  0817               	movf	Lcd_Set_Cursor@z,w
  1241     022C  236D               	fcall	_Lcd_Cmd
  1242                           
  1243                           ;lcd.c: 61:   Lcd_Cmd(y);
  1244     022D  0818               	movf	Lcd_Set_Cursor@y,w
  1245     022E  236D               	fcall	_Lcd_Cmd
  1246                           
  1247                           ;lcd.c: 62:  }
  1248     022F  0008               	return
  1249     0230                     l1283:
  1250     0230  3002               	movlw	2
  1251     0231  0616               	xorwf	Lcd_Set_Cursor@a,w
  1252     0232  1D03               	btfss	3,2
  1253     0233  0008               	return
  1254                           
  1255                           ;lcd.c: 64:  {;lcd.c: 65:   temp = 0xC0 + b - 1;
  1256     0234  0814               	movf	Lcd_Set_Cursor@b,w
  1257     0235  3EBF               	addlw	191
  1258     0236  0099               	movwf	Lcd_Set_Cursor@temp
  1259                           
  1260                           ;lcd.c: 66:   z = temp>>4;
  1261     0237  0819               	movf	Lcd_Set_Cursor@temp,w
  1262     0238  0095               	movwf	??_Lcd_Set_Cursor
  1263     0239  3004               	movlw	4
  1264     023A                     u625:
  1265     023A  1003               	clrc
  1266     023B  0C95               	rrf	??_Lcd_Set_Cursor,f
  1267     023C  3EFF               	addlw	-1
  1268     023D  1D03               	skipz
  1269     023E  2A3A               	goto	u625
  1270     023F  0815               	movf	??_Lcd_Set_Cursor,w
  1271     0240  0097               	movwf	Lcd_Set_Cursor@z
  1272                           
  1273                           ;lcd.c: 67:   y = temp & 0x0F;
  1274     0241  0819               	movf	Lcd_Set_Cursor@temp,w
  1275     0242  390F               	andlw	15
  1276     0243  0098               	movwf	Lcd_Set_Cursor@y
  1277                           
  1278                           ;lcd.c: 68:   Lcd_Cmd(z);
  1279     0244  0817               	movf	Lcd_Set_Cursor@z,w
  1280     0245  236D               	fcall	_Lcd_Cmd
  1281                           
  1282                           ;lcd.c: 69:   Lcd_Cmd(y);
  1283     0246  0818               	movf	Lcd_Set_Cursor@y,w
  1284     0247  236D               	fcall	_Lcd_Cmd
  1285     0248  0008               	return
  1286     0249                     __end_of_Lcd_Set_Cursor:
  1287                           
  1288                           	psect	text6
  1289     037F                     __ptext6:	
  1290 ;; *************** function _Lcd_Clear *****************
  1291 ;; Defined at:
  1292 ;;		line 44 in file "lcd.c"
  1293 ;; Parameters:    Size  Location     Type
  1294 ;;		None
  1295 ;; Auto vars:     Size  Location     Type
  1296 ;;		None
  1297 ;; Return value:  Size  Location     Type
  1298 ;;                  1    wreg      void 
  1299 ;; Registers used:
  1300 ;;		wreg, status,2, status,0, pclath, cstack
  1301 ;; Tracked objects:
  1302 ;;		On entry : 0/0
  1303 ;;		On exit  : 0/0
  1304 ;;		Unchanged: 0/0
  1305 ;; Data sizes:     COMMON   BANK0
  1306 ;;      Params:         0       0
  1307 ;;      Locals:         0       0
  1308 ;;      Temps:          0       2
  1309 ;;      Totals:         0       2
  1310 ;;Total ram usage:        2 bytes
  1311 ;; Hardware stack levels used: 1
  1312 ;; Hardware stack levels required when called: 4
  1313 ;; This function calls:
  1314 ;;		_Lcd_Cmd
  1315 ;; This function is called by:
  1316 ;;		_welcomeMessage
  1317 ;;		_main
  1318 ;; This function uses a non-reentrant model
  1319 ;;
  1320                           
  1321     037F                     _Lcd_Clear:	
  1322                           ;psect for function _Lcd_Clear
  1323                           
  1324                           
  1325                           ;lcd.c: 46:  Lcd_Cmd(0x00);
  1326                           
  1327                           ;incstack = 0
  1328                           ; Regs used in _Lcd_Clear: [wreg+status,2+status,0+pclath+cstack]
  1329     037F  3000               	movlw	0
  1330     0380  236D               	fcall	_Lcd_Cmd
  1331                           
  1332                           ;lcd.c: 47:  Lcd_Cmd(0x01);
  1333     0381  3001               	movlw	1
  1334     0382  236D               	fcall	_Lcd_Cmd
  1335                           
  1336                           ;lcd.c: 48:     _delay((unsigned long)((2)*(4000000/4000.0)));
  1337     0383  3003               	movlw	3
  1338     0384  0095               	movwf	??_Lcd_Clear+1
  1339     0385  3097               	movlw	151
  1340     0386  0094               	movwf	??_Lcd_Clear
  1341     0387                     u807:
  1342     0387  0B94               	decfsz	??_Lcd_Clear,f
  1343     0388  2B87               	goto	u807
  1344     0389  0B95               	decfsz	??_Lcd_Clear+1,f
  1345     038A  2B87               	goto	u807
  1346     038B  2B8C               	nop2
  1347     038C  0008               	return
  1348     038D                     __end_of_Lcd_Clear:
  1349                           
  1350                           	psect	text7
  1351     0145                     __ptext7:	
  1352 ;; *************** function _readADC2 *****************
  1353 ;; Defined at:
  1354 ;;		line 49 in file "adc.c"
  1355 ;; Parameters:    Size  Location     Type
  1356 ;;		None
  1357 ;; Auto vars:     Size  Location     Type
  1358 ;;  volt            2    8[BANK0 ] unsigned int 
  1359 ;;  rxData          1   11[BANK0 ] unsigned char 
  1360 ;;  bits            1   10[BANK0 ] unsigned char 
  1361 ;; Return value:  Size  Location     Type
  1362 ;;                  2    4[BANK0 ] unsigned int 
  1363 ;; Registers used:
  1364 ;;		wreg, status,2, status,0, btemp+1
  1365 ;; Tracked objects:
  1366 ;;		On entry : 100/0
  1367 ;;		On exit  : 100/0
  1368 ;;		Unchanged: 0/0
  1369 ;; Data sizes:     COMMON   BANK0
  1370 ;;      Params:         0       2
  1371 ;;      Locals:         0       4
  1372 ;;      Temps:          0       2
  1373 ;;      Totals:         0       8
  1374 ;;Total ram usage:        8 bytes
  1375 ;; Hardware stack levels used: 1
  1376 ;; Hardware stack levels required when called: 2
  1377 ;; This function calls:
  1378 ;;		Nothing
  1379 ;; This function is called by:
  1380 ;;		_main
  1381 ;; This function uses a non-reentrant model
  1382 ;;
  1383                           
  1384     0145                     _readADC2:	
  1385                           ;psect for function _readADC2
  1386                           
  1387                           
  1388                           ;adc.c: 50:     unsigned char bits;;adc.c: 51:     unsigned char rxData = 0;
  1389                           
  1390                           ;incstack = 0
  1391                           ; Regs used in _readADC2: [wreg+status,2+status,0+btemp+1]
  1392     0145  0197               	clrf	readADC2@rxData
  1393                           
  1394                           ;adc.c: 54:     RB7 = 0;
  1395     0146  1386               	bcf	6,7	;volatile
  1396                           
  1397                           ;adc.c: 57:     for (bits = 0; bits < 3; bits++) {
  1398     0147  0196               	clrf	readADC2@bits
  1399     0148                     l1431:
  1400                           
  1401                           ;adc.c: 58:         _delay((unsigned long)((100)*(4000000/4000000.0)));
  1402     0148  3021               	movlw	33
  1403     0149  0092               	movwf	??_readADC2
  1404     014A                     u817:
  1405     014A  0B92               	decfsz	??_readADC2,f
  1406     014B  294A               	goto	u817
  1407                           
  1408                           ;adc.c: 59:         RB5 = 1;
  1409     014C  1283               	bcf	3,5	;RP0=0, select bank0
  1410     014D  1686               	bsf	6,5	;volatile
  1411                           
  1412                           ;adc.c: 60:         _delay((unsigned long)((100)*(4000000/4000000.0)));
  1413     014E  3021               	movlw	33
  1414     014F  0092               	movwf	??_readADC2
  1415     0150                     u827:
  1416     0150  0B92               	decfsz	??_readADC2,f
  1417     0151  2950               	goto	u827
  1418                           
  1419                           ;adc.c: 61:         RB5 = 0;
  1420     0152  1283               	bcf	3,5	;RP0=0, select bank0
  1421     0153  1286               	bcf	6,5	;volatile
  1422                           
  1423                           ;adc.c: 62:     }
  1424     0154  3001               	movlw	1
  1425     0155  00CF               	movwf	79
  1426     0156  084F               	movf	79,w
  1427     0157  0796               	addwf	readADC2@bits,f
  1428     0158  3003               	movlw	3
  1429     0159  0216               	subwf	readADC2@bits,w
  1430     015A  1C03               	skipc
  1431     015B  2948               	goto	l1431
  1432                           
  1433                           ;adc.c: 65:     for (bits = 0; bits < 8; bits++) {
  1434     015C  0196               	clrf	readADC2@bits
  1435     015D                     l1447:
  1436                           
  1437                           ;adc.c: 67:         _delay((unsigned long)((100)*(4000000/4000000.0)));
  1438     015D  3021               	movlw	33
  1439     015E  0092               	movwf	??_readADC2
  1440     015F                     u837:
  1441     015F  0B92               	decfsz	??_readADC2,f
  1442     0160  295F               	goto	u837
  1443                           
  1444                           ;adc.c: 68:         RB5 = 1;
  1445     0161  1283               	bcf	3,5	;RP0=0, select bank0
  1446     0162  1686               	bsf	6,5	;volatile
  1447                           
  1448                           ;adc.c: 71:         rxData = rxData << 1;
  1449     0163  0817               	movf	readADC2@rxData,w
  1450     0164  0092               	movwf	??_readADC2
  1451     0165  0712               	addwf	??_readADC2,w
  1452     0166  0097               	movwf	readADC2@rxData
  1453                           
  1454                           ;adc.c: 74:         if (RA3 == 1)
  1455     0167  1D85               	btfss	5,3	;volatile
  1456     0168  296C               	goto	l1457
  1457                           
  1458                           ;adc.c: 75:             rxData = rxData | 0x01;
  1459     0169  0817               	movf	readADC2@rxData,w
  1460     016A  3801               	iorlw	1
  1461     016B  296E               	goto	L1
  1462     016C                     l1457:
  1463                           
  1464                           ;adc.c: 77:             rxData = rxData & 0xfe;
  1465     016C  0817               	movf	readADC2@rxData,w
  1466     016D  39FE               	andlw	254
  1467     016E                     L1:
  1468     016E  0097               	movwf	readADC2@rxData
  1469                           
  1470                           ;adc.c: 79:         _delay((unsigned long)((100)*(4000000/4000000.0)));
  1471     016F  3021               	movlw	33
  1472     0170  0092               	movwf	??_readADC2
  1473     0171                     u847:
  1474     0171  0B92               	decfsz	??_readADC2,f
  1475     0172  2971               	goto	u847
  1476                           
  1477                           ;adc.c: 80:         RB5 = 0;
  1478     0173  1283               	bcf	3,5	;RP0=0, select bank0
  1479     0174  1286               	bcf	6,5	;volatile
  1480                           
  1481                           ;adc.c: 81:     }
  1482     0175  3001               	movlw	1
  1483     0176  00CF               	movwf	79
  1484     0177  084F               	movf	79,w
  1485     0178  0796               	addwf	readADC2@bits,f
  1486     0179  3008               	movlw	8
  1487     017A  0216               	subwf	readADC2@bits,w
  1488     017B  1C03               	skipc
  1489     017C  295D               	goto	l1447
  1490                           
  1491                           ;adc.c: 84:     RB7 = 1;
  1492     017D  1786               	bsf	6,7	;volatile
  1493                           
  1494                           ;adc.c: 87:     volt = (rxData << 2);
  1495     017E  0817               	movf	readADC2@rxData,w
  1496     017F  0092               	movwf	??_readADC2
  1497     0180  0193               	clrf	??_readADC2+1
  1498     0181  1003               	clrc
  1499     0182  0D92               	rlf	??_readADC2,f
  1500     0183  0D93               	rlf	??_readADC2+1,f
  1501     0184  1003               	clrc
  1502     0185  0D92               	rlf	??_readADC2,f
  1503     0186  0D93               	rlf	??_readADC2+1,f
  1504     0187  0812               	movf	??_readADC2,w
  1505     0188  0094               	movwf	readADC2@volt
  1506     0189  0813               	movf	??_readADC2+1,w
  1507     018A  0095               	movwf	readADC2@volt+1
  1508                           
  1509                           ;adc.c: 88:     return volt;
  1510     018B  0815               	movf	readADC2@volt+1,w
  1511     018C  0091               	movwf	?_readADC2+1
  1512     018D  0814               	movf	readADC2@volt,w
  1513     018E  0090               	movwf	?_readADC2
  1514     018F  0008               	return
  1515     0190                     __end_of_readADC2:
  1516                           
  1517                           	psect	text8
  1518     0190                     __ptext8:	
  1519 ;; *************** function _readADC1 *****************
  1520 ;; Defined at:
  1521 ;;		line 7 in file "adc.c"
  1522 ;; Parameters:    Size  Location     Type
  1523 ;;		None
  1524 ;; Auto vars:     Size  Location     Type
  1525 ;;  volt            2    8[BANK0 ] unsigned int 
  1526 ;;  rxData          1   11[BANK0 ] unsigned char 
  1527 ;;  bits            1   10[BANK0 ] unsigned char 
  1528 ;; Return value:  Size  Location     Type
  1529 ;;                  2    4[BANK0 ] unsigned int 
  1530 ;; Registers used:
  1531 ;;		wreg, status,2, status,0, btemp+1
  1532 ;; Tracked objects:
  1533 ;;		On entry : 100/0
  1534 ;;		On exit  : 100/0
  1535 ;;		Unchanged: 0/0
  1536 ;; Data sizes:     COMMON   BANK0
  1537 ;;      Params:         0       2
  1538 ;;      Locals:         0       4
  1539 ;;      Temps:          0       2
  1540 ;;      Totals:         0       8
  1541 ;;Total ram usage:        8 bytes
  1542 ;; Hardware stack levels used: 1
  1543 ;; Hardware stack levels required when called: 2
  1544 ;; This function calls:
  1545 ;;		Nothing
  1546 ;; This function is called by:
  1547 ;;		_main
  1548 ;; This function uses a non-reentrant model
  1549 ;;
  1550                           
  1551     0190                     _readADC1:	
  1552                           ;psect for function _readADC1
  1553                           
  1554                           
  1555                           ;adc.c: 8:     unsigned char bits;;adc.c: 9:     unsigned char rxData = 0;
  1556                           
  1557                           ;incstack = 0
  1558                           ; Regs used in _readADC1: [wreg+status,2+status,0+btemp+1]
  1559     0190  0197               	clrf	readADC1@rxData
  1560                           
  1561                           ;adc.c: 12:     RB7 = 0;
  1562     0191  1386               	bcf	6,7	;volatile
  1563                           
  1564                           ;adc.c: 15:     for (bits = 0; bits < 3; bits++) {
  1565     0192  0196               	clrf	readADC1@bits
  1566     0193                     l1381:
  1567                           
  1568                           ;adc.c: 16:         _delay((unsigned long)((100)*(4000000/4000000.0)));
  1569     0193  3021               	movlw	33
  1570     0194  0092               	movwf	??_readADC1
  1571     0195                     u857:
  1572     0195  0B92               	decfsz	??_readADC1,f
  1573     0196  2995               	goto	u857
  1574                           
  1575                           ;adc.c: 17:         RB5 = 1;
  1576     0197  1283               	bcf	3,5	;RP0=0, select bank0
  1577     0198  1686               	bsf	6,5	;volatile
  1578                           
  1579                           ;adc.c: 18:         _delay((unsigned long)((100)*(4000000/4000000.0)));
  1580     0199  3021               	movlw	33
  1581     019A  0092               	movwf	??_readADC1
  1582     019B                     u867:
  1583     019B  0B92               	decfsz	??_readADC1,f
  1584     019C  299B               	goto	u867
  1585                           
  1586                           ;adc.c: 19:         RB5 = 0;
  1587     019D  1283               	bcf	3,5	;RP0=0, select bank0
  1588     019E  1286               	bcf	6,5	;volatile
  1589                           
  1590                           ;adc.c: 20:     }
  1591     019F  3001               	movlw	1
  1592     01A0  00CF               	movwf	79
  1593     01A1  084F               	movf	79,w
  1594     01A2  0796               	addwf	readADC1@bits,f
  1595     01A3  3003               	movlw	3
  1596     01A4  0216               	subwf	readADC1@bits,w
  1597     01A5  1C03               	skipc
  1598     01A6  2993               	goto	l1381
  1599                           
  1600                           ;adc.c: 23:     for (bits = 0; bits < 8; bits++) {
  1601     01A7  0196               	clrf	readADC1@bits
  1602     01A8                     l1397:
  1603                           
  1604                           ;adc.c: 25:         _delay((unsigned long)((100)*(4000000/4000000.0)));
  1605     01A8  3021               	movlw	33
  1606     01A9  0092               	movwf	??_readADC1
  1607     01AA                     u877:
  1608     01AA  0B92               	decfsz	??_readADC1,f
  1609     01AB  29AA               	goto	u877
  1610                           
  1611                           ;adc.c: 26:         RB5 = 1;
  1612     01AC  1283               	bcf	3,5	;RP0=0, select bank0
  1613     01AD  1686               	bsf	6,5	;volatile
  1614                           
  1615                           ;adc.c: 29:         rxData = rxData << 1;
  1616     01AE  0817               	movf	readADC1@rxData,w
  1617     01AF  0092               	movwf	??_readADC1
  1618     01B0  0712               	addwf	??_readADC1,w
  1619     01B1  0097               	movwf	readADC1@rxData
  1620                           
  1621                           ;adc.c: 32:         if (RB6 == 1)
  1622     01B2  1F06               	btfss	6,6	;volatile
  1623     01B3  29B7               	goto	l1407
  1624                           
  1625                           ;adc.c: 33:             rxData = rxData | 0x01;
  1626     01B4  0817               	movf	readADC1@rxData,w
  1627     01B5  3801               	iorlw	1
  1628     01B6  29B9               	goto	L2
  1629     01B7                     l1407:
  1630                           
  1631                           ;adc.c: 35:             rxData = rxData & 0xfe;
  1632     01B7  0817               	movf	readADC1@rxData,w
  1633     01B8  39FE               	andlw	254
  1634     01B9                     L2:
  1635     01B9  0097               	movwf	readADC1@rxData
  1636                           
  1637                           ;adc.c: 37:         _delay((unsigned long)((100)*(4000000/4000000.0)));
  1638     01BA  3021               	movlw	33
  1639     01BB  0092               	movwf	??_readADC1
  1640     01BC                     u887:
  1641     01BC  0B92               	decfsz	??_readADC1,f
  1642     01BD  29BC               	goto	u887
  1643                           
  1644                           ;adc.c: 38:         RB5 = 0;
  1645     01BE  1283               	bcf	3,5	;RP0=0, select bank0
  1646     01BF  1286               	bcf	6,5	;volatile
  1647                           
  1648                           ;adc.c: 39:     }
  1649     01C0  3001               	movlw	1
  1650     01C1  00CF               	movwf	79
  1651     01C2  084F               	movf	79,w
  1652     01C3  0796               	addwf	readADC1@bits,f
  1653     01C4  3008               	movlw	8
  1654     01C5  0216               	subwf	readADC1@bits,w
  1655     01C6  1C03               	skipc
  1656     01C7  29A8               	goto	l1397
  1657                           
  1658                           ;adc.c: 42:     RB7 = 1;
  1659     01C8  1786               	bsf	6,7	;volatile
  1660                           
  1661                           ;adc.c: 45:     volt = (rxData << 2);
  1662     01C9  0817               	movf	readADC1@rxData,w
  1663     01CA  0092               	movwf	??_readADC1
  1664     01CB  0193               	clrf	??_readADC1+1
  1665     01CC  1003               	clrc
  1666     01CD  0D92               	rlf	??_readADC1,f
  1667     01CE  0D93               	rlf	??_readADC1+1,f
  1668     01CF  1003               	clrc
  1669     01D0  0D92               	rlf	??_readADC1,f
  1670     01D1  0D93               	rlf	??_readADC1+1,f
  1671     01D2  0812               	movf	??_readADC1,w
  1672     01D3  0094               	movwf	readADC1@volt
  1673     01D4  0813               	movf	??_readADC1+1,w
  1674     01D5  0095               	movwf	readADC1@volt+1
  1675                           
  1676                           ;adc.c: 46:     return volt;
  1677     01D6  0815               	movf	readADC1@volt+1,w
  1678     01D7  0091               	movwf	?_readADC1+1
  1679     01D8  0814               	movf	readADC1@volt,w
  1680     01D9  0090               	movwf	?_readADC1
  1681     01DA  0008               	return
  1682     01DB                     __end_of_readADC1:
  1683                           
  1684                           	psect	text9
  1685     02CF                     __ptext9:	
  1686 ;; *************** function ___wmul *****************
  1687 ;; Defined at:
  1688 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\Umul16.c"
  1689 ;; Parameters:    Size  Location     Type
  1690 ;;  multiplier      2    9[BANK0 ] unsigned int 
  1691 ;;  multiplicand    2   11[BANK0 ] unsigned int 
  1692 ;; Auto vars:     Size  Location     Type
  1693 ;;  product         2   13[BANK0 ] unsigned int 
  1694 ;; Return value:  Size  Location     Type
  1695 ;;                  2    9[BANK0 ] unsigned int 
  1696 ;; Registers used:
  1697 ;;		wreg, status,2, status,0
  1698 ;; Tracked objects:
  1699 ;;		On entry : 100/0
  1700 ;;		On exit  : 100/0
  1701 ;;		Unchanged: 0/0
  1702 ;; Data sizes:     COMMON   BANK0
  1703 ;;      Params:         0       4
  1704 ;;      Locals:         0       2
  1705 ;;      Temps:          0       0
  1706 ;;      Totals:         0       6
  1707 ;;Total ram usage:        6 bytes
  1708 ;; Hardware stack levels used: 1
  1709 ;; Hardware stack levels required when called: 2
  1710 ;; This function calls:
  1711 ;;		Nothing
  1712 ;; This function is called by:
  1713 ;;		_main
  1714 ;; This function uses a non-reentrant model
  1715 ;;
  1716                           
  1717     02CF                     ___wmul:	
  1718                           ;psect for function ___wmul
  1719                           
  1720                           
  1721                           ;incstack = 0
  1722                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  1723     02CF  0199               	clrf	___wmul@product
  1724     02D0  019A               	clrf	___wmul@product+1
  1725     02D1                     l1475:
  1726     02D1  1C15               	btfss	___wmul@multiplier,0
  1727     02D2  2AD9               	goto	l241
  1728     02D3  0817               	movf	___wmul@multiplicand,w
  1729     02D4  0799               	addwf	___wmul@product,f
  1730     02D5  1803               	skipnc
  1731     02D6  0A9A               	incf	___wmul@product+1,f
  1732     02D7  0818               	movf	___wmul@multiplicand+1,w
  1733     02D8  079A               	addwf	___wmul@product+1,f
  1734     02D9                     l241:
  1735     02D9  3001               	movlw	1
  1736     02DA                     u755:
  1737     02DA  1003               	clrc
  1738     02DB  0D97               	rlf	___wmul@multiplicand,f
  1739     02DC  0D98               	rlf	___wmul@multiplicand+1,f
  1740     02DD  3EFF               	addlw	-1
  1741     02DE  1D03               	skipz
  1742     02DF  2ADA               	goto	u755
  1743     02E0  3001               	movlw	1
  1744     02E1                     u765:
  1745     02E1  1003               	clrc
  1746     02E2  0C96               	rrf	___wmul@multiplier+1,f
  1747     02E3  0C95               	rrf	___wmul@multiplier,f
  1748     02E4  3EFF               	addlw	-1
  1749     02E5  1D03               	skipz
  1750     02E6  2AE1               	goto	u765
  1751     02E7  0815               	movf	___wmul@multiplier,w
  1752     02E8  0416               	iorwf	___wmul@multiplier+1,w
  1753     02E9  1D03               	btfss	3,2
  1754     02EA  2AD1               	goto	l1475
  1755     02EB  081A               	movf	___wmul@product+1,w
  1756     02EC  0096               	movwf	?___wmul+1
  1757     02ED  0819               	movf	___wmul@product,w
  1758     02EE  0095               	movwf	?___wmul
  1759     02EF  0008               	return
  1760     02F0                     __end_of___wmul:
  1761                           
  1762                           	psect	text10
  1763     038D                     __ptext10:	
  1764 ;; *************** function _Lcd_Write_Int *****************
  1765 ;; Defined at:
  1766 ;;		line 121 in file "lcd.c"
  1767 ;; Parameters:    Size  Location     Type
  1768 ;;  a               2   30[BANK0 ] unsigned int 
  1769 ;; Auto vars:     Size  Location     Type
  1770 ;;  temp           16   32[BANK0 ] unsigned char [16]
  1771 ;; Return value:  Size  Location     Type
  1772 ;;                  1    wreg      void 
  1773 ;; Registers used:
  1774 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1775 ;; Tracked objects:
  1776 ;;		On entry : 100/0
  1777 ;;		On exit  : 900/0
  1778 ;;		Unchanged: 0/0
  1779 ;; Data sizes:     COMMON   BANK0
  1780 ;;      Params:         0       2
  1781 ;;      Locals:         0      16
  1782 ;;      Temps:          0       0
  1783 ;;      Totals:         0      18
  1784 ;;Total ram usage:       18 bytes
  1785 ;; Hardware stack levels used: 1
  1786 ;; Hardware stack levels required when called: 5
  1787 ;; This function calls:
  1788 ;;		_Lcd_Write_String
  1789 ;;		_utoa
  1790 ;; This function is called by:
  1791 ;;		_main
  1792 ;; This function uses a non-reentrant model
  1793 ;;
  1794                           
  1795     038D                     _Lcd_Write_Int:	
  1796                           ;psect for function _Lcd_Write_Int
  1797                           
  1798                           
  1799                           ;lcd.c: 121: void Lcd_Write_Int(unsigned int a);lcd.c: 122: {;lcd.c: 123:     char temp[
      +                          16];;lcd.c: 124:     utoa((char*)temp, a, 10);
  1800                           
  1801                           ;incstack = 0
  1802                           ; Regs used in _Lcd_Write_Int: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1803     038D  082B               	movf	Lcd_Write_Int@a+1,w
  1804     038E  00A3               	movwf	utoa@val+1
  1805     038F  082A               	movf	Lcd_Write_Int@a,w
  1806     0390  00A2               	movwf	utoa@val
  1807     0391  300A               	movlw	10
  1808     0392  00A4               	movwf	utoa@base
  1809     0393  3000               	movlw	0
  1810     0394  00A5               	movwf	utoa@base+1
  1811     0395  302C               	movlw	(low (Lcd_Write_Int@temp| 0))& (0+255)
  1812     0396  20F1               	fcall	_utoa
  1813                           
  1814                           ;lcd.c: 125:     Lcd_Write_String(temp);
  1815     0397  302C               	movlw	(low (Lcd_Write_Int@temp| 0))& (0+255)
  1816     0398  230E               	fcall	_Lcd_Write_String
  1817     0399  0008               	return
  1818     039A                     __end_of_Lcd_Write_Int:
  1819                           
  1820                           	psect	text11
  1821     00F1                     __ptext11:	
  1822 ;; *************** function _utoa *****************
  1823 ;; Defined at:
  1824 ;;		line 17 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\itoa.c"
  1825 ;; Parameters:    Size  Location     Type
  1826 ;;  buf             1    wreg     PTR unsigned char 
  1827 ;;		 -> Lcd_Write_Int@temp(16), 
  1828 ;;  val             2   22[BANK0 ] unsigned int 
  1829 ;;  base            2   24[BANK0 ] int 
  1830 ;; Auto vars:     Size  Location     Type
  1831 ;;  buf             1   29[BANK0 ] PTR unsigned char 
  1832 ;;		 -> Lcd_Write_Int@temp(16), 
  1833 ;;  v               2   26[BANK0 ] unsigned int 
  1834 ;;  c               1   28[BANK0 ] unsigned char 
  1835 ;; Return value:  Size  Location     Type
  1836 ;;                  1    wreg      PTR unsigned char 
  1837 ;; Registers used:
  1838 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1839 ;; Tracked objects:
  1840 ;;		On entry : 100/0
  1841 ;;		On exit  : 900/0
  1842 ;;		Unchanged: 0/0
  1843 ;; Data sizes:     COMMON   BANK0
  1844 ;;      Params:         0       4
  1845 ;;      Locals:         0       4
  1846 ;;      Temps:          0       0
  1847 ;;      Totals:         0       8
  1848 ;;Total ram usage:        8 bytes
  1849 ;; Hardware stack levels used: 1
  1850 ;; Hardware stack levels required when called: 3
  1851 ;; This function calls:
  1852 ;;		___lwdiv
  1853 ;;		___lwmod
  1854 ;; This function is called by:
  1855 ;;		_Lcd_Write_Int
  1856 ;; This function uses a non-reentrant model
  1857 ;;
  1858                           
  1859     00F1                     _utoa:	
  1860                           ;psect for function _utoa
  1861                           
  1862                           
  1863                           ;incstack = 0
  1864                           ; Regs used in _utoa: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1865                           ;utoa@buf stored from wreg
  1866     00F1  00A9               	movwf	utoa@buf
  1867     00F2  0823               	movf	utoa@val+1,w
  1868     00F3  00A7               	movwf	utoa@v+1
  1869     00F4  0822               	movf	utoa@val,w
  1870     00F5  00A6               	movwf	utoa@v
  1871     00F6                     l1309:
  1872     00F6  0825               	movf	utoa@base+1,w
  1873     00F7  009C               	movwf	___lwdiv@divisor+1
  1874     00F8  0824               	movf	utoa@base,w
  1875     00F9  009B               	movwf	___lwdiv@divisor
  1876     00FA  0827               	movf	utoa@v+1,w
  1877     00FB  009E               	movwf	___lwdiv@dividend+1
  1878     00FC  0826               	movf	utoa@v,w
  1879     00FD  009D               	movwf	___lwdiv@dividend
  1880     00FE  21DB               	fcall	___lwdiv
  1881     00FF  081C               	movf	?___lwdiv+1,w
  1882     0100  00A7               	movwf	utoa@v+1
  1883     0101  081B               	movf	?___lwdiv,w
  1884     0102  00A6               	movwf	utoa@v
  1885     0103  3001               	movlw	1
  1886     0104  00CF               	movwf	79
  1887     0105  084F               	movf	79,w
  1888     0106  07A9               	addwf	utoa@buf,f
  1889     0107  0826               	movf	utoa@v,w
  1890     0108  0427               	iorwf	utoa@v+1,w
  1891     0109  1D03               	btfss	3,2
  1892     010A  28F6               	goto	l1309
  1893     010B  0829               	movf	utoa@buf,w
  1894     010C  0084               	movwf	4
  1895     010D  1383               	bcf	3,7	;select IRP bank0
  1896     010E  0180               	clrf	0
  1897     010F  3001               	movlw	1
  1898     0110  02A9               	subwf	utoa@buf,f
  1899     0111                     l1319:
  1900     0111  0825               	movf	utoa@base+1,w
  1901     0112  0091               	movwf	___lwmod@divisor+1
  1902     0113  0824               	movf	utoa@base,w
  1903     0114  0090               	movwf	___lwmod@divisor
  1904     0115  0823               	movf	utoa@val+1,w
  1905     0116  0093               	movwf	___lwmod@dividend+1
  1906     0117  0822               	movf	utoa@val,w
  1907     0118  0092               	movwf	___lwmod@dividend
  1908     0119  2249               	fcall	___lwmod
  1909     011A  0810               	movf	?___lwmod,w
  1910     011B  00A8               	movwf	utoa@c
  1911     011C  0825               	movf	utoa@base+1,w
  1912     011D  009C               	movwf	___lwdiv@divisor+1
  1913     011E  0824               	movf	utoa@base,w
  1914     011F  009B               	movwf	___lwdiv@divisor
  1915     0120  0823               	movf	utoa@val+1,w
  1916     0121  009E               	movwf	___lwdiv@dividend+1
  1917     0122  0822               	movf	utoa@val,w
  1918     0123  009D               	movwf	___lwdiv@dividend
  1919     0124  21DB               	fcall	___lwdiv
  1920     0125  081C               	movf	?___lwdiv+1,w
  1921     0126  00A3               	movwf	utoa@val+1
  1922     0127  081B               	movf	?___lwdiv,w
  1923     0128  00A2               	movwf	utoa@val
  1924     0129  300A               	movlw	10
  1925     012A  0228               	subwf	utoa@c,w
  1926     012B  1C03               	skipc
  1927     012C  2931               	goto	l701
  1928     012D  3007               	movlw	7
  1929     012E  00CF               	movwf	79
  1930     012F  084F               	movf	79,w
  1931     0130  07A8               	addwf	utoa@c,f
  1932     0131                     l701:
  1933     0131  3030               	movlw	48
  1934     0132  00CF               	movwf	79
  1935     0133  084F               	movf	79,w
  1936     0134  07A8               	addwf	utoa@c,f
  1937     0135  0829               	movf	utoa@buf,w
  1938     0136  0084               	movwf	4
  1939     0137  0828               	movf	utoa@c,w
  1940     0138  1383               	bcf	3,7	;select IRP bank0
  1941     0139  0080               	movwf	0
  1942     013A  3001               	movlw	1
  1943     013B  02A9               	subwf	utoa@buf,f
  1944     013C  0822               	movf	utoa@val,w
  1945     013D  0423               	iorwf	utoa@val+1,w
  1946     013E  1D03               	btfss	3,2
  1947     013F  2911               	goto	l1319
  1948                           
  1949                           ;	Return value of _utoa is never used
  1950     0140  3001               	movlw	1
  1951     0141  00CF               	movwf	79
  1952     0142  084F               	movf	79,w
  1953     0143  07A9               	addwf	utoa@buf,f
  1954     0144  0008               	return
  1955     0145                     __end_of_utoa:
  1956                           
  1957                           	psect	text12
  1958     0249                     __ptext12:	
  1959 ;; *************** function ___lwmod *****************
  1960 ;; Defined at:
  1961 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\lwmod.c"
  1962 ;; Parameters:    Size  Location     Type
  1963 ;;  divisor         2    4[BANK0 ] unsigned int 
  1964 ;;  dividend        2    6[BANK0 ] unsigned int 
  1965 ;; Auto vars:     Size  Location     Type
  1966 ;;  counter         1    8[BANK0 ] unsigned char 
  1967 ;; Return value:  Size  Location     Type
  1968 ;;                  2    4[BANK0 ] unsigned int 
  1969 ;; Registers used:
  1970 ;;		wreg, status,2, status,0, btemp+1
  1971 ;; Tracked objects:
  1972 ;;		On entry : 100/0
  1973 ;;		On exit  : 100/0
  1974 ;;		Unchanged: 0/0
  1975 ;; Data sizes:     COMMON   BANK0
  1976 ;;      Params:         0       4
  1977 ;;      Locals:         0       1
  1978 ;;      Temps:          0       0
  1979 ;;      Totals:         0       5
  1980 ;;Total ram usage:        5 bytes
  1981 ;; Hardware stack levels used: 1
  1982 ;; Hardware stack levels required when called: 2
  1983 ;; This function calls:
  1984 ;;		Nothing
  1985 ;; This function is called by:
  1986 ;;		_main
  1987 ;;		_utoa
  1988 ;; This function uses a non-reentrant model
  1989 ;;
  1990                           
  1991     0249                     ___lwmod:	
  1992                           ;psect for function ___lwmod
  1993                           
  1994                           
  1995                           ;incstack = 0
  1996                           ; Regs used in ___lwmod: [wreg+status,2+status,0+btemp+1]
  1997     0249  0810               	movf	___lwmod@divisor,w
  1998     024A  0411               	iorwf	___lwmod@divisor+1,w
  1999     024B  1903               	btfsc	3,2
  2000     024C  2A76               	goto	l1253
  2001     024D  0194               	clrf	___lwmod@counter
  2002     024E  0A94               	incf	___lwmod@counter,f
  2003     024F                     l1243:
  2004     024F  1B91               	btfsc	___lwmod@divisor+1,7
  2005     0250  2A5D               	goto	l1245
  2006     0251  3001               	movlw	1
  2007     0252                     u535:
  2008     0252  1003               	clrc
  2009     0253  0D90               	rlf	___lwmod@divisor,f
  2010     0254  0D91               	rlf	___lwmod@divisor+1,f
  2011     0255  3EFF               	addlw	-1
  2012     0256  1D03               	skipz
  2013     0257  2A52               	goto	u535
  2014     0258  3001               	movlw	1
  2015     0259  00CF               	movwf	79
  2016     025A  084F               	movf	79,w
  2017     025B  0794               	addwf	___lwmod@counter,f
  2018     025C  2A4F               	goto	l1243
  2019     025D                     l1245:
  2020     025D  0811               	movf	___lwmod@divisor+1,w
  2021     025E  0213               	subwf	___lwmod@dividend+1,w
  2022     025F  1D03               	skipz
  2023     0260  2A63               	goto	u555
  2024     0261  0810               	movf	___lwmod@divisor,w
  2025     0262  0212               	subwf	___lwmod@dividend,w
  2026     0263                     u555:
  2027     0263  1C03               	skipc
  2028     0264  2A6B               	goto	l1249
  2029     0265  0810               	movf	___lwmod@divisor,w
  2030     0266  0292               	subwf	___lwmod@dividend,f
  2031     0267  0811               	movf	___lwmod@divisor+1,w
  2032     0268  1C03               	skipc
  2033     0269  0393               	decf	___lwmod@dividend+1,f
  2034     026A  0293               	subwf	___lwmod@dividend+1,f
  2035     026B                     l1249:
  2036     026B  3001               	movlw	1
  2037     026C                     u565:
  2038     026C  1003               	clrc
  2039     026D  0C91               	rrf	___lwmod@divisor+1,f
  2040     026E  0C90               	rrf	___lwmod@divisor,f
  2041     026F  3EFF               	addlw	-1
  2042     0270  1D03               	skipz
  2043     0271  2A6C               	goto	u565
  2044     0272  3001               	movlw	1
  2045     0273  0294               	subwf	___lwmod@counter,f
  2046     0274  1D03               	btfss	3,2
  2047     0275  2A5D               	goto	l1245
  2048     0276                     l1253:
  2049     0276  0813               	movf	___lwmod@dividend+1,w
  2050     0277  0091               	movwf	?___lwmod+1
  2051     0278  0812               	movf	___lwmod@dividend,w
  2052     0279  0090               	movwf	?___lwmod
  2053     027A  0008               	return
  2054     027B                     __end_of___lwmod:
  2055                           
  2056                           	psect	text13
  2057     01DB                     __ptext13:	
  2058 ;; *************** function ___lwdiv *****************
  2059 ;; Defined at:
  2060 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\lwdiv.c"
  2061 ;; Parameters:    Size  Location     Type
  2062 ;;  divisor         2   15[BANK0 ] unsigned int 
  2063 ;;  dividend        2   17[BANK0 ] unsigned int 
  2064 ;; Auto vars:     Size  Location     Type
  2065 ;;  quotient        2   19[BANK0 ] unsigned int 
  2066 ;;  counter         1   21[BANK0 ] unsigned char 
  2067 ;; Return value:  Size  Location     Type
  2068 ;;                  2   15[BANK0 ] unsigned int 
  2069 ;; Registers used:
  2070 ;;		wreg, status,2, status,0, btemp+1
  2071 ;; Tracked objects:
  2072 ;;		On entry : 100/0
  2073 ;;		On exit  : 100/0
  2074 ;;		Unchanged: 0/0
  2075 ;; Data sizes:     COMMON   BANK0
  2076 ;;      Params:         0       4
  2077 ;;      Locals:         0       3
  2078 ;;      Temps:          0       0
  2079 ;;      Totals:         0       7
  2080 ;;Total ram usage:        7 bytes
  2081 ;; Hardware stack levels used: 1
  2082 ;; Hardware stack levels required when called: 2
  2083 ;; This function calls:
  2084 ;;		Nothing
  2085 ;; This function is called by:
  2086 ;;		_main
  2087 ;;		_utoa
  2088 ;; This function uses a non-reentrant model
  2089 ;;
  2090                           
  2091     01DB                     ___lwdiv:	
  2092                           ;psect for function ___lwdiv
  2093                           
  2094                           
  2095                           ;incstack = 0
  2096                           ; Regs used in ___lwdiv: [wreg+status,2+status,0+btemp+1]
  2097     01DB  019F               	clrf	___lwdiv@quotient
  2098     01DC  01A0               	clrf	___lwdiv@quotient+1
  2099     01DD  081B               	movf	___lwdiv@divisor,w
  2100     01DE  041C               	iorwf	___lwdiv@divisor+1,w
  2101     01DF  1903               	btfsc	3,2
  2102     01E0  2A12               	goto	l1231
  2103     01E1  01A1               	clrf	___lwdiv@counter
  2104     01E2  0AA1               	incf	___lwdiv@counter,f
  2105     01E3                     l1219:
  2106     01E3  1B9C               	btfsc	___lwdiv@divisor+1,7
  2107     01E4  29F1               	goto	l1221
  2108     01E5  3001               	movlw	1
  2109     01E6                     u465:
  2110     01E6  1003               	clrc
  2111     01E7  0D9B               	rlf	___lwdiv@divisor,f
  2112     01E8  0D9C               	rlf	___lwdiv@divisor+1,f
  2113     01E9  3EFF               	addlw	-1
  2114     01EA  1D03               	skipz
  2115     01EB  29E6               	goto	u465
  2116     01EC  3001               	movlw	1
  2117     01ED  00CF               	movwf	79
  2118     01EE  084F               	movf	79,w
  2119     01EF  07A1               	addwf	___lwdiv@counter,f
  2120     01F0  29E3               	goto	l1219
  2121     01F1                     l1221:
  2122     01F1  3001               	movlw	1
  2123     01F2                     u485:
  2124     01F2  1003               	clrc
  2125     01F3  0D9F               	rlf	___lwdiv@quotient,f
  2126     01F4  0DA0               	rlf	___lwdiv@quotient+1,f
  2127     01F5  3EFF               	addlw	-1
  2128     01F6  1D03               	skipz
  2129     01F7  29F2               	goto	u485
  2130     01F8  081C               	movf	___lwdiv@divisor+1,w
  2131     01F9  021E               	subwf	___lwdiv@dividend+1,w
  2132     01FA  1D03               	skipz
  2133     01FB  29FE               	goto	u495
  2134     01FC  081B               	movf	___lwdiv@divisor,w
  2135     01FD  021D               	subwf	___lwdiv@dividend,w
  2136     01FE                     u495:
  2137     01FE  1C03               	skipc
  2138     01FF  2A07               	goto	l1227
  2139     0200  081B               	movf	___lwdiv@divisor,w
  2140     0201  029D               	subwf	___lwdiv@dividend,f
  2141     0202  081C               	movf	___lwdiv@divisor+1,w
  2142     0203  1C03               	skipc
  2143     0204  039E               	decf	___lwdiv@dividend+1,f
  2144     0205  029E               	subwf	___lwdiv@dividend+1,f
  2145     0206  141F               	bsf	___lwdiv@quotient,0
  2146     0207                     l1227:
  2147     0207  3001               	movlw	1
  2148     0208                     u505:
  2149     0208  1003               	clrc
  2150     0209  0C9C               	rrf	___lwdiv@divisor+1,f
  2151     020A  0C9B               	rrf	___lwdiv@divisor,f
  2152     020B  3EFF               	addlw	-1
  2153     020C  1D03               	skipz
  2154     020D  2A08               	goto	u505
  2155     020E  3001               	movlw	1
  2156     020F  02A1               	subwf	___lwdiv@counter,f
  2157     0210  1D03               	btfss	3,2
  2158     0211  29F1               	goto	l1221
  2159     0212                     l1231:
  2160     0212  0820               	movf	___lwdiv@quotient+1,w
  2161     0213  009C               	movwf	?___lwdiv+1
  2162     0214  081F               	movf	___lwdiv@quotient,w
  2163     0215  009B               	movwf	?___lwdiv
  2164     0216  0008               	return
  2165     0217                     __end_of___lwdiv:
  2166                           
  2167                           	psect	text14
  2168     030E                     __ptext14:	
  2169 ;; *************** function _Lcd_Write_String *****************
  2170 ;; Defined at:
  2171 ;;		line 111 in file "lcd.c"
  2172 ;; Parameters:    Size  Location     Type
  2173 ;;  a               1    wreg     PTR unsigned char 
  2174 ;;		 -> Lcd_Write_Int@temp(16), welcomeMessage@msg(3), 
  2175 ;; Auto vars:     Size  Location     Type
  2176 ;;  a               1   12[BANK0 ] PTR unsigned char 
  2177 ;;		 -> Lcd_Write_Int@temp(16), welcomeMessage@msg(3), 
  2178 ;;  i               2   10[BANK0 ] int 
  2179 ;; Return value:  Size  Location     Type
  2180 ;;                  1    wreg      void 
  2181 ;; Registers used:
  2182 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2183 ;; Tracked objects:
  2184 ;;		On entry : 100/0
  2185 ;;		On exit  : 900/0
  2186 ;;		Unchanged: 0/0
  2187 ;; Data sizes:     COMMON   BANK0
  2188 ;;      Params:         0       0
  2189 ;;      Locals:         0       3
  2190 ;;      Temps:          0       1
  2191 ;;      Totals:         0       4
  2192 ;;Total ram usage:        4 bytes
  2193 ;; Hardware stack levels used: 1
  2194 ;; Hardware stack levels required when called: 4
  2195 ;; This function calls:
  2196 ;;		_Lcd_Write_Char
  2197 ;; This function is called by:
  2198 ;;		_welcomeMessage
  2199 ;;		_Lcd_Write_Int
  2200 ;; This function uses a non-reentrant model
  2201 ;;
  2202                           
  2203     030E                     _Lcd_Write_String:	
  2204                           ;psect for function _Lcd_Write_String
  2205                           
  2206                           
  2207                           ;incstack = 0
  2208                           ; Regs used in _Lcd_Write_String: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2209                           ;Lcd_Write_String@a stored from wreg
  2210     030E  0098               	movwf	Lcd_Write_String@a
  2211                           
  2212                           ;lcd.c: 111: void Lcd_Write_String(char *a);lcd.c: 112: {;lcd.c: 113:  int i;;lcd.c: 114
      +                          :  for(i=0;a[i]!='\0';i++)
  2213     030F  0196               	clrf	Lcd_Write_String@i
  2214     0310  0197               	clrf	Lcd_Write_String@i+1
  2215     0311                     l1299:
  2216     0311  0816               	movf	Lcd_Write_String@i,w
  2217     0312  0718               	addwf	Lcd_Write_String@a,w
  2218     0313  0095               	movwf	??_Lcd_Write_String
  2219     0314  0815               	movf	??_Lcd_Write_String,w
  2220     0315  0084               	movwf	4
  2221     0316  1383               	bcf	3,7	;select IRP bank0
  2222     0317  0800               	movf	0,w
  2223     0318  1903               	btfsc	3,2
  2224     0319  0008               	return
  2225                           
  2226                           ;lcd.c: 115:     {;lcd.c: 116:         Lcd_Write_Char(a[i]);
  2227     031A  0816               	movf	Lcd_Write_String@i,w
  2228     031B  0718               	addwf	Lcd_Write_String@a,w
  2229     031C  0095               	movwf	??_Lcd_Write_String
  2230     031D  0815               	movf	??_Lcd_Write_String,w
  2231     031E  0084               	movwf	4
  2232     031F  0800               	movf	0,w
  2233     0320  22AC               	fcall	_Lcd_Write_Char
  2234                           
  2235                           ;lcd.c: 117:     }
  2236     0321  3001               	movlw	1
  2237     0322  0796               	addwf	Lcd_Write_String@i,f
  2238     0323  1803               	skipnc
  2239     0324  0A97               	incf	Lcd_Write_String@i+1,f
  2240     0325  3000               	movlw	0
  2241     0326  0797               	addwf	Lcd_Write_String@i+1,f
  2242     0327  2B11               	goto	l1299
  2243     0328                     __end_of_Lcd_Write_String:
  2244                           
  2245                           	psect	text15
  2246     02AC                     __ptext15:	
  2247 ;; *************** function _Lcd_Write_Char *****************
  2248 ;; Defined at:
  2249 ;;		line 94 in file "lcd.c"
  2250 ;; Parameters:    Size  Location     Type
  2251 ;;  a               1    wreg     unsigned char 
  2252 ;; Auto vars:     Size  Location     Type
  2253 ;;  a               1    8[BANK0 ] unsigned char 
  2254 ;;  y               1    7[BANK0 ] unsigned char 
  2255 ;;  temp            1    6[BANK0 ] unsigned char 
  2256 ;; Return value:  Size  Location     Type
  2257 ;;                  1    wreg      void 
  2258 ;; Registers used:
  2259 ;;		wreg, status,2, status,0, pclath, cstack
  2260 ;; Tracked objects:
  2261 ;;		On entry : 100/0
  2262 ;;		On exit  : 100/0
  2263 ;;		Unchanged: 0/0
  2264 ;; Data sizes:     COMMON   BANK0
  2265 ;;      Params:         0       0
  2266 ;;      Locals:         0       3
  2267 ;;      Temps:          0       1
  2268 ;;      Totals:         0       4
  2269 ;;Total ram usage:        4 bytes
  2270 ;; Hardware stack levels used: 1
  2271 ;; Hardware stack levels required when called: 3
  2272 ;; This function calls:
  2273 ;;		_Lcd_Port
  2274 ;; This function is called by:
  2275 ;;		_main
  2276 ;;		_Lcd_Write_String
  2277 ;; This function uses a non-reentrant model
  2278 ;;
  2279                           
  2280     02AC                     _Lcd_Write_Char:	
  2281                           ;psect for function _Lcd_Write_Char
  2282                           
  2283                           
  2284                           ;incstack = 0
  2285                           ; Regs used in _Lcd_Write_Char: [wreg+status,2+status,0+pclath+cstack]
  2286                           ;Lcd_Write_Char@a stored from wreg
  2287     02AC  0094               	movwf	Lcd_Write_Char@a
  2288                           
  2289                           ;lcd.c: 94: void Lcd_Write_Char(char a);lcd.c: 95: {;lcd.c: 96:    char temp,y;;lcd.c: 9
      +                          7:    temp = a&0x0F;
  2290     02AD  0814               	movf	Lcd_Write_Char@a,w
  2291     02AE  390F               	andlw	15
  2292     02AF  0092               	movwf	Lcd_Write_Char@temp
  2293                           
  2294                           ;lcd.c: 98:    y = a&0xF0;
  2295     02B0  0814               	movf	Lcd_Write_Char@a,w
  2296     02B1  39F0               	andlw	240
  2297     02B2  0093               	movwf	Lcd_Write_Char@y
  2298                           
  2299                           ;lcd.c: 99:    RA0 = 1;
  2300     02B3  1405               	bsf	5,0	;volatile
  2301                           
  2302                           ;lcd.c: 100:    Lcd_Port(y>>4);
  2303     02B4  0813               	movf	Lcd_Write_Char@y,w
  2304     02B5  0091               	movwf	??_Lcd_Write_Char
  2305     02B6  3004               	movlw	4
  2306     02B7                     u445:
  2307     02B7  1003               	clrc
  2308     02B8  0C91               	rrf	??_Lcd_Write_Char,f
  2309     02B9  3EFF               	addlw	-1
  2310     02BA  1D03               	skipz
  2311     02BB  2AB7               	goto	u445
  2312     02BC  0811               	movf	??_Lcd_Write_Char,w
  2313     02BD  2340               	fcall	_Lcd_Port
  2314                           
  2315                           ;lcd.c: 101:    RA2 = 1;
  2316     02BE  1505               	bsf	5,2	;volatile
  2317                           
  2318                           ;lcd.c: 102:    _delay((unsigned long)((40)*(4000000/4000000.0)));
  2319     02BF  300D               	movlw	13
  2320     02C0  0091               	movwf	??_Lcd_Write_Char
  2321     02C1                     u897:
  2322     02C1  0B91               	decfsz	??_Lcd_Write_Char,f
  2323     02C2  2AC1               	goto	u897
  2324                           
  2325                           ;lcd.c: 103:    RA2 = 0;
  2326     02C3  1283               	bcf	3,5	;RP0=0, select bank0
  2327     02C4  1105               	bcf	5,2	;volatile
  2328                           
  2329                           ;lcd.c: 104:    Lcd_Port(temp);
  2330     02C5  0812               	movf	Lcd_Write_Char@temp,w
  2331     02C6  2340               	fcall	_Lcd_Port
  2332                           
  2333                           ;lcd.c: 105:    RA2 = 1;
  2334     02C7  1505               	bsf	5,2	;volatile
  2335                           
  2336                           ;lcd.c: 106:    _delay((unsigned long)((40)*(4000000/4000000.0)));
  2337     02C8  300D               	movlw	13
  2338     02C9  0091               	movwf	??_Lcd_Write_Char
  2339     02CA                     u907:
  2340     02CA  0B91               	decfsz	??_Lcd_Write_Char,f
  2341     02CB  2ACA               	goto	u907
  2342                           
  2343                           ;lcd.c: 107:    RA2 = 0;
  2344     02CC  1283               	bcf	3,5	;RP0=0, select bank0
  2345     02CD  1105               	bcf	5,2	;volatile
  2346     02CE  0008               	return
  2347     02CF                     __end_of_Lcd_Write_Char:
  2348                           
  2349                           	psect	text16
  2350     027B                     __ptext16:	
  2351 ;; *************** function _Lcd_Init *****************
  2352 ;; Defined at:
  2353 ;;		line 74 in file "lcd.c"
  2354 ;; Parameters:    Size  Location     Type
  2355 ;;		None
  2356 ;; Auto vars:     Size  Location     Type
  2357 ;;		None
  2358 ;; Return value:  Size  Location     Type
  2359 ;;                  1    wreg      void 
  2360 ;; Registers used:
  2361 ;;		wreg, status,2, status,0, pclath, cstack
  2362 ;; Tracked objects:
  2363 ;;		On entry : B00/100
  2364 ;;		On exit  : 100/0
  2365 ;;		Unchanged: 0/0
  2366 ;; Data sizes:     COMMON   BANK0
  2367 ;;      Params:         0       0
  2368 ;;      Locals:         0       0
  2369 ;;      Temps:          0       2
  2370 ;;      Totals:         0       2
  2371 ;;Total ram usage:        2 bytes
  2372 ;; Hardware stack levels used: 1
  2373 ;; Hardware stack levels required when called: 4
  2374 ;; This function calls:
  2375 ;;		_Lcd_Cmd
  2376 ;;		_Lcd_Port
  2377 ;; This function is called by:
  2378 ;;		_main
  2379 ;; This function uses a non-reentrant model
  2380 ;;
  2381                           
  2382     027B                     _Lcd_Init:	
  2383                           ;psect for function _Lcd_Init
  2384                           
  2385                           
  2386                           ;lcd.c: 76:   Lcd_Port(0x00);
  2387                           
  2388                           ;incstack = 0
  2389                           ; Regs used in _Lcd_Init: [wreg+status,2+status,0+pclath+cstack]
  2390     027B  3000               	movlw	0
  2391     027C  2340               	fcall	_Lcd_Port
  2392                           
  2393                           ;lcd.c: 77:    _delay((unsigned long)((20)*(4000000/4000.0)));
  2394     027D  301A               	movlw	26
  2395     027E  0095               	movwf	??_Lcd_Init+1
  2396     027F  30F8               	movlw	248
  2397     0280  0094               	movwf	??_Lcd_Init
  2398     0281                     u917:
  2399     0281  0B94               	decfsz	??_Lcd_Init,f
  2400     0282  2A81               	goto	u917
  2401     0283  0B95               	decfsz	??_Lcd_Init+1,f
  2402     0284  2A81               	goto	u917
  2403     0285  0000               	nop
  2404                           
  2405                           ;lcd.c: 78:   Lcd_Cmd(0x03);
  2406     0286  3003               	movlw	3
  2407     0287  236D               	fcall	_Lcd_Cmd
  2408                           
  2409                           ;lcd.c: 79:  _delay((unsigned long)((5)*(4000000/4000.0)));
  2410     0288  3007               	movlw	7
  2411     0289  0095               	movwf	??_Lcd_Init+1
  2412     028A  307D               	movlw	125
  2413     028B  0094               	movwf	??_Lcd_Init
  2414     028C                     u927:
  2415     028C  0B94               	decfsz	??_Lcd_Init,f
  2416     028D  2A8C               	goto	u927
  2417     028E  0B95               	decfsz	??_Lcd_Init+1,f
  2418     028F  2A8C               	goto	u927
  2419                           
  2420                           ;lcd.c: 80:   Lcd_Cmd(0x03);
  2421     0290  3003               	movlw	3
  2422     0291  236D               	fcall	_Lcd_Cmd
  2423                           
  2424                           ;lcd.c: 81:  _delay((unsigned long)((11)*(4000000/4000.0)));
  2425     0292  300F               	movlw	15
  2426     0293  0095               	movwf	??_Lcd_Init+1
  2427     0294  3047               	movlw	71
  2428     0295  0094               	movwf	??_Lcd_Init
  2429     0296                     u937:
  2430     0296  0B94               	decfsz	??_Lcd_Init,f
  2431     0297  2A96               	goto	u937
  2432     0298  0B95               	decfsz	??_Lcd_Init+1,f
  2433     0299  2A96               	goto	u937
  2434     029A  2A9B               	nop2
  2435                           
  2436                           ;lcd.c: 82:   Lcd_Cmd(0x03);
  2437     029B  3003               	movlw	3
  2438     029C  236D               	fcall	_Lcd_Cmd
  2439                           
  2440                           ;lcd.c: 84:   Lcd_Cmd(0x02);
  2441     029D  3002               	movlw	2
  2442     029E  236D               	fcall	_Lcd_Cmd
  2443                           
  2444                           ;lcd.c: 85:   Lcd_Cmd(0x02);
  2445     029F  3002               	movlw	2
  2446     02A0  236D               	fcall	_Lcd_Cmd
  2447                           
  2448                           ;lcd.c: 86:   Lcd_Cmd(0x08);
  2449     02A1  3008               	movlw	8
  2450     02A2  236D               	fcall	_Lcd_Cmd
  2451                           
  2452                           ;lcd.c: 87:   Lcd_Cmd(0x00);
  2453     02A3  3000               	movlw	0
  2454     02A4  236D               	fcall	_Lcd_Cmd
  2455                           
  2456                           ;lcd.c: 88:   Lcd_Cmd(0x0C);
  2457     02A5  300C               	movlw	12
  2458     02A6  236D               	fcall	_Lcd_Cmd
  2459                           
  2460                           ;lcd.c: 89:   Lcd_Cmd(0x00);
  2461     02A7  3000               	movlw	0
  2462     02A8  236D               	fcall	_Lcd_Cmd
  2463                           
  2464                           ;lcd.c: 90:   Lcd_Cmd(0x06);
  2465     02A9  3006               	movlw	6
  2466     02AA  236D               	fcall	_Lcd_Cmd
  2467     02AB  0008               	return
  2468     02AC                     __end_of_Lcd_Init:
  2469                           
  2470                           	psect	text17
  2471     036D                     __ptext17:	
  2472 ;; *************** function _Lcd_Cmd *****************
  2473 ;; Defined at:
  2474 ;;		line 31 in file "lcd.c"
  2475 ;; Parameters:    Size  Location     Type
  2476 ;;  a               1    wreg     unsigned char 
  2477 ;; Auto vars:     Size  Location     Type
  2478 ;;  a               1    7[BANK0 ] unsigned char 
  2479 ;; Return value:  Size  Location     Type
  2480 ;;                  1    wreg      void 
  2481 ;; Registers used:
  2482 ;;		wreg, status,2, status,0, pclath, cstack
  2483 ;; Tracked objects:
  2484 ;;		On entry : 0/0
  2485 ;;		On exit  : 100/0
  2486 ;;		Unchanged: 0/0
  2487 ;; Data sizes:     COMMON   BANK0
  2488 ;;      Params:         0       0
  2489 ;;      Locals:         0       1
  2490 ;;      Temps:          0       2
  2491 ;;      Totals:         0       3
  2492 ;;Total ram usage:        3 bytes
  2493 ;; Hardware stack levels used: 1
  2494 ;; Hardware stack levels required when called: 3
  2495 ;; This function calls:
  2496 ;;		_Lcd_Port
  2497 ;; This function is called by:
  2498 ;;		_Lcd_Clear
  2499 ;;		_Lcd_Set_Cursor
  2500 ;;		_Lcd_Init
  2501 ;; This function uses a non-reentrant model
  2502 ;;
  2503                           
  2504     036D                     _Lcd_Cmd:	
  2505                           ;psect for function _Lcd_Cmd
  2506                           
  2507                           
  2508                           ;incstack = 0
  2509                           ; Regs used in _Lcd_Cmd: [wreg+status,2+status,0+pclath+cstack]
  2510                           ;Lcd_Cmd@a stored from wreg
  2511     036D  1283               	bcf	3,5	;RP0=0, select bank0
  2512     036E  0093               	movwf	Lcd_Cmd@a
  2513                           
  2514                           ;lcd.c: 31: void Lcd_Cmd(char a);lcd.c: 32: {;lcd.c: 34:     RA0 = 0;
  2515     036F  1005               	bcf	5,0	;volatile
  2516                           
  2517                           ;lcd.c: 35:  Lcd_Port(a);
  2518     0370  0813               	movf	Lcd_Cmd@a,w
  2519     0371  2340               	fcall	_Lcd_Port
  2520                           
  2521                           ;lcd.c: 38:  RA2 = 1;
  2522     0372  1505               	bsf	5,2	;volatile
  2523                           
  2524                           ;lcd.c: 39:     _delay((unsigned long)((4)*(4000000/4000.0)));
  2525     0373  3006               	movlw	6
  2526     0374  0092               	movwf	??_Lcd_Cmd+1
  2527     0375  3030               	movlw	48
  2528     0376  0091               	movwf	??_Lcd_Cmd
  2529     0377                     u947:
  2530     0377  0B91               	decfsz	??_Lcd_Cmd,f
  2531     0378  2B77               	goto	u947
  2532     0379  0B92               	decfsz	??_Lcd_Cmd+1,f
  2533     037A  2B77               	goto	u947
  2534     037B  0000               	nop
  2535                           
  2536                           ;lcd.c: 40:     RA2 = 0;
  2537     037C  1283               	bcf	3,5	;RP0=0, select bank0
  2538     037D  1105               	bcf	5,2	;volatile
  2539     037E  0008               	return
  2540     037F                     __end_of_Lcd_Cmd:
  2541                           
  2542                           	psect	text18
  2543     0340                     __ptext18:	
  2544 ;; *************** function _Lcd_Port *****************
  2545 ;; Defined at:
  2546 ;;		line 7 in file "lcd.c"
  2547 ;; Parameters:    Size  Location     Type
  2548 ;;  a               1    wreg     unsigned char 
  2549 ;; Auto vars:     Size  Location     Type
  2550 ;;  a               1    4[BANK0 ] unsigned char 
  2551 ;; Return value:  Size  Location     Type
  2552 ;;                  1    wreg      void 
  2553 ;; Registers used:
  2554 ;;		wreg
  2555 ;; Tracked objects:
  2556 ;;		On entry : 0/0
  2557 ;;		On exit  : 100/0
  2558 ;;		Unchanged: 0/0
  2559 ;; Data sizes:     COMMON   BANK0
  2560 ;;      Params:         0       0
  2561 ;;      Locals:         0       1
  2562 ;;      Temps:          0       0
  2563 ;;      Totals:         0       1
  2564 ;;Total ram usage:        1 bytes
  2565 ;; Hardware stack levels used: 1
  2566 ;; Hardware stack levels required when called: 2
  2567 ;; This function calls:
  2568 ;;		Nothing
  2569 ;; This function is called by:
  2570 ;;		_Lcd_Cmd
  2571 ;;		_Lcd_Init
  2572 ;;		_Lcd_Write_Char
  2573 ;; This function uses a non-reentrant model
  2574 ;;
  2575                           
  2576     0340                     _Lcd_Port:	
  2577                           ;psect for function _Lcd_Port
  2578                           
  2579                           
  2580                           ;incstack = 0
  2581                           ; Regs used in _Lcd_Port: [wreg]
  2582                           ;Lcd_Port@a stored from wreg
  2583     0340  1283               	bcf	3,5	;RP0=0, select bank0
  2584     0341  0090               	movwf	Lcd_Port@a
  2585                           
  2586                           ;lcd.c: 7: void Lcd_Port(char a);lcd.c: 8: {;lcd.c: 9:  if(a & 1)
  2587     0342  1C10               	btfss	Lcd_Port@a,0
  2588     0343  2B46               	goto	l86
  2589                           
  2590                           ;lcd.c: 10:   RB1 = 1;
  2591     0344  1486               	bsf	6,1	;volatile
  2592     0345  2B47               	goto	l87
  2593     0346                     l86:	
  2594                           ;lcd.c: 11:  else
  2595                           
  2596                           
  2597                           ;lcd.c: 12:   RB1 = 0;
  2598     0346  1086               	bcf	6,1	;volatile
  2599     0347                     l87:
  2600                           
  2601                           ;lcd.c: 14:  if(a & 2)
  2602     0347  1C90               	btfss	Lcd_Port@a,1
  2603     0348  2B4B               	goto	l88
  2604                           
  2605                           ;lcd.c: 15:   RB2 = 1;
  2606     0349  1506               	bsf	6,2	;volatile
  2607     034A  2B4C               	goto	l89
  2608     034B                     l88:	
  2609                           ;lcd.c: 16:  else
  2610                           
  2611                           
  2612                           ;lcd.c: 17:   RB2 = 0;
  2613     034B  1106               	bcf	6,2	;volatile
  2614     034C                     l89:
  2615                           
  2616                           ;lcd.c: 19:  if(a & 4)
  2617     034C  1D10               	btfss	Lcd_Port@a,2
  2618     034D  2B50               	goto	l90
  2619                           
  2620                           ;lcd.c: 20:   RB3 = 1;
  2621     034E  1586               	bsf	6,3	;volatile
  2622     034F  2B51               	goto	l91
  2623     0350                     l90:	
  2624                           ;lcd.c: 21:  else
  2625                           
  2626                           
  2627                           ;lcd.c: 22:   RB3 = 0;
  2628     0350  1186               	bcf	6,3	;volatile
  2629     0351                     l91:
  2630                           
  2631                           ;lcd.c: 24:  if(a & 8)
  2632     0351  1D90               	btfss	Lcd_Port@a,3
  2633     0352  2B55               	goto	l92
  2634                           
  2635                           ;lcd.c: 25:   RB4 = 1;
  2636     0353  1606               	bsf	6,4	;volatile
  2637     0354  0008               	return
  2638     0355                     l92:	
  2639                           ;lcd.c: 26:  else
  2640                           
  2641                           
  2642                           ;lcd.c: 27:   RB4 = 0;
  2643     0355  1206               	bcf	6,4	;volatile
  2644     0356  0008               	return
  2645     0357                     __end_of_Lcd_Port:
  2646                           
  2647                           	psect	text19
  2648     03B0                     __ptext19:	
  2649 ;; *************** function _isr *****************
  2650 ;; Defined at:
  2651 ;;		line 42 in file "main.c"
  2652 ;; Parameters:    Size  Location     Type
  2653 ;;		None
  2654 ;; Auto vars:     Size  Location     Type
  2655 ;;		None
  2656 ;; Return value:  Size  Location     Type
  2657 ;;                  1    wreg      void 
  2658 ;; Registers used:
  2659 ;;		wreg, status,2, status,0, pclath, cstack
  2660 ;; Tracked objects:
  2661 ;;		On entry : 0/0
  2662 ;;		On exit  : 100/0
  2663 ;;		Unchanged: 0/0
  2664 ;; Data sizes:     COMMON   BANK0
  2665 ;;      Params:         0       0
  2666 ;;      Locals:         0       0
  2667 ;;      Temps:          0       2
  2668 ;;      Totals:         0       2
  2669 ;;Total ram usage:        2 bytes
  2670 ;; Hardware stack levels used: 1
  2671 ;; Hardware stack levels required when called: 1
  2672 ;; This function calls:
  2673 ;;		i1_delay_100ms
  2674 ;; This function is called by:
  2675 ;;		Interrupt level 1
  2676 ;; This function uses a non-reentrant model
  2677 ;;
  2678                           
  2679     03B0                     _isr:	
  2680                           ;psect for function _isr
  2681                           
  2682                           
  2683                           ;main.c: 43:     INTCONbits.INTF = 0;
  2684     03B0  108B               	bcf	11,1	;volatile
  2685                           
  2686                           ;main.c: 44:     toggleHold = ~toggleHold;
  2687     03B1  09C6               	comf	_toggleHold,f	;volatile
  2688                           
  2689                           ;main.c: 45:     delay_100ms();
  2690     03B2  23BB               	fcall	i1_delay_100ms
  2691     03B3  1283               	bcf	3,5	;RP0=0, select bank0
  2692     03B4  080F               	movf	??_isr+1,w
  2693     03B5  008A               	movwf	10
  2694     03B6  0E0E               	swapf	??_isr,w
  2695     03B7  0083               	movwf	3
  2696     03B8  0ECE               	swapf	78,f
  2697     03B9  0E4E               	swapf	78,w
  2698     03BA  0009               	retfie
  2699     03BB                     __end_of_isr:
  2700                           
  2701                           	psect	intentry
  2702     0004                     __pintentry:	
  2703                           ;incstack = 0
  2704                           ; Regs used in _isr: [wreg+status,2+status,0+pclath+cstack]
  2705                           
  2706     0004                     interrupt_function:
  2707     004E                     saved_w	set	btemp
  2708     0004  00CE               	movwf	btemp
  2709     0005  0E03               	swapf	3,w
  2710     0006  1283               	bcf	3,5	;RP0=0, select bank0
  2711     0007  008E               	movwf	??_isr
  2712     0008  080A               	movf	10,w
  2713     0009  008F               	movwf	??_isr+1
  2714     000A  2BB0               	ljmp	_isr
  2715                           
  2716                           	psect	text20
  2717     03BB                     __ptext20:	
  2718 ;; *************** function i1_delay_100ms *****************
  2719 ;; Defined at:
  2720 ;;		line 23 in file "main.c"
  2721 ;; Parameters:    Size  Location     Type
  2722 ;;		None
  2723 ;; Auto vars:     Size  Location     Type
  2724 ;;		None
  2725 ;; Return value:  Size  Location     Type
  2726 ;;                  1    wreg      void 
  2727 ;; Registers used:
  2728 ;;		wreg
  2729 ;; Tracked objects:
  2730 ;;		On entry : 100/0
  2731 ;;		On exit  : 0/0
  2732 ;;		Unchanged: 0/0
  2733 ;; Data sizes:     COMMON   BANK0
  2734 ;;      Params:         0       0
  2735 ;;      Locals:         0       0
  2736 ;;      Temps:          0       2
  2737 ;;      Totals:         0       2
  2738 ;;Total ram usage:        2 bytes
  2739 ;; Hardware stack levels used: 1
  2740 ;; This function calls:
  2741 ;;		Nothing
  2742 ;; This function is called by:
  2743 ;;		_isr
  2744 ;; This function uses a non-reentrant model
  2745 ;;
  2746                           
  2747     03BB                     i1_delay_100ms:	
  2748                           ;psect for function i1_delay_100ms
  2749                           
  2750                           
  2751                           ;main.c: 24:     _delay((unsigned long)((100)*(4000000/4000.0)));
  2752                           
  2753                           ;incstack = 0
  2754                           ; Regs used in i1_delay_100ms: [wreg]
  2755     03BB  3082               	movlw	130
  2756     03BC  008D               	movwf	??i1_delay_100ms+1
  2757     03BD  30DD               	movlw	221
  2758     03BE  008C               	movwf	??i1_delay_100ms
  2759     03BF                     u95_27:
  2760     03BF  0B8C               	decfsz	??i1_delay_100ms,f
  2761     03C0  2BBF               	goto	u95_27
  2762     03C1  0B8D               	decfsz	??i1_delay_100ms+1,f
  2763     03C2  2BBF               	goto	u95_27
  2764     03C3  2BC4               	nop2
  2765     03C4  0008               	return
  2766     03C5                     __end_ofi1_delay_100ms:
  2767     004E                     btemp	set	78	;btemp
  2768     004E                     wtemp0	set	78
  2769                           
  2770                           	psect	config
  2771                           
  2772                           ;Config register CONFIG @ 0x2007
  2773                           ;	Oscillator Selection bits
  2774                           ;	FOSC = XT, XT oscillator
  2775                           ;	Watchdog Timer
  2776                           ;	WDTE = OFF, WDT disabled
  2777                           ;	Power-up Timer Enable bit
  2778                           ;	PWRTE = ON, Power-up Timer is enabled
  2779                           ;	Code Protection bit
  2780                           ;	CP = OFF, Code protection disabled
  2781     2007                     	org	8199
  2782     2007  3FF1               	dw	16369

Data Sizes:
    Strings     5
    Constant    0
    Data        3
    BSS         3
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON            0      0       0
    BANK0            66     56      62

Pointer List with Targets:

    strcpy@from	PTR const unsigned char  size(1) Largest target is 5
		 -> STR_1(CODE[5]), 

    strcpy@to	PTR unsigned char  size(1) Largest target is 3
		 -> welcomeMessage@msg(BANK0[3]), 

    strcpy@cp	PTR unsigned char  size(1) Largest target is 3
		 -> welcomeMessage@msg(BANK0[3]), 

    utoa@buf	PTR unsigned char  size(1) Largest target is 16
		 -> Lcd_Write_Int@temp(BANK0[16]), 

    sp__itoa	PTR unsigned char  size(1) Largest target is 0

    sp__utoa	PTR unsigned char  size(1) Largest target is 16
		 -> Lcd_Write_Int@temp(BANK0[16]), 

    Lcd_Write_String@a	PTR unsigned char  size(1) Largest target is 16
		 -> Lcd_Write_Int@temp(BANK0[16]), welcomeMessage@msg(BANK0[3]), 

    sp__strcpy	PTR unsigned char  size(1) Largest target is 3
		 -> welcomeMessage@msg(BANK0[3]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _isr in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_Lcd_Write_Int
    _welcomeMessage->_Lcd_Set_Cursor
    _delay_2000ms->_delay_100ms
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Clear->_Lcd_Cmd
    ___wmul->___lwmod
    _Lcd_Write_Int->_utoa
    _utoa->___lwdiv
    ___lwdiv->___wmul
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Init->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port

Critical Paths under _isr in BANK0

    _isr->i1_delay_100ms

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 8     8      0   10215
                                             48 BANK0      8     8      0
                          _Lcd_Clear
                           _Lcd_Init
                     _Lcd_Set_Cursor
                     _Lcd_Write_Char
                      _Lcd_Write_Int
                            ___lwdiv
                            ___lwmod
                             ___wmul
                        _delay_100ms
                           _readADC1
                           _readADC2
                     _welcomeMessage
 ---------------------------------------------------------------------------------
 (1) _welcomeMessage                                       3     3      0    2222
                                             14 BANK0      3     3      0
                          _Lcd_Clear
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
                       _delay_2000ms
                             _strcpy
 ---------------------------------------------------------------------------------
 (2) _strcpy                                               3     2      1     184
                                              4 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (2) _delay_2000ms                                         2     2      0      46
                                              6 BANK0      2     2      0
                        _delay_100ms
 ---------------------------------------------------------------------------------
 (3) _delay_100ms                                          2     2      0       0
                                              4 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _Lcd_Set_Cursor                                       6     5      1    1444
                                              8 BANK0      6     5      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Clear                                            2     2      0     110
                                              8 BANK0      2     2      0
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _readADC2                                             8     6      2     208
                                              4 BANK0      8     6      2
 ---------------------------------------------------------------------------------
 (1) _readADC1                                             8     6      2     208
                                              4 BANK0      8     6      2
 ---------------------------------------------------------------------------------
 (1) ___wmul                                               6     2      4     396
                                              9 BANK0      6     2      4
                            ___lwmod (ARG)
 ---------------------------------------------------------------------------------
 (1) _Lcd_Write_Int                                       18    16      2    3382
                                             30 BANK0     18    16      2
                   _Lcd_Write_String
                               _utoa
 ---------------------------------------------------------------------------------
 (2) _utoa                                                 8     4      4    2335
                                             22 BANK0      8     4      4
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (1) ___lwmod                                              5     1      4     615
                                              4 BANK0      5     1      4
 ---------------------------------------------------------------------------------
 (1) ___lwdiv                                              7     3      4    1074
                                             15 BANK0      7     3      4
                            ___lwmod (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_String                                     4     4      0     367
                                              9 BANK0      4     4      0
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (3) _Lcd_Write_Char                                       4     4      0     178
                                              5 BANK0      4     4      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             2     2      0     198
                                              8 BANK0      2     2      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (3) _Lcd_Cmd                                              3     3      0     110
                                              5 BANK0      3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (4) _Lcd_Port                                             1     1      0      88
                                              4 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _isr                                                  2     2      0       0
                                              2 BANK0      2     2      0
                      i1_delay_100ms
 ---------------------------------------------------------------------------------
 (6) i1_delay_100ms                                        2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Lcd_Clear
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Init
     _Lcd_Cmd
     _Lcd_Port
   _Lcd_Set_Cursor
     _Lcd_Cmd
   _Lcd_Write_Char
     _Lcd_Port
   _Lcd_Write_Int
     _Lcd_Write_String
       _Lcd_Write_Char
     _utoa
       ___lwdiv
         ___lwmod (ARG)
         ___wmul (ARG)
           ___lwmod (ARG)
       ___lwmod
   ___lwdiv
   ___lwmod
   ___wmul
   _delay_100ms
   _readADC1
   _readADC2
   _welcomeMessage
     _Lcd_Clear
     _Lcd_Set_Cursor
     _Lcd_Write_String
     _delay_2000ms
       _delay_100ms
     _strcpy

 _isr (ROOT)
   i1_delay_100ms

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               42     38      3E       3       93.9%
BITBANK0            42      0       0       5        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               0      0       0       1        0.0%
BITCOMMON            0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      3E       6        0.0%
ABS                  0      0      3E       4        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA              40      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.41 build 20230208172133 
Symbol Table                                                                                   Wed May 03 13:16:23 2023

                       pc 0002                        l90 0350                        l91 0351  
                      l92 0355                        l86 0346                        l87 0347  
                      l88 034B                        l89 034C                        fsr 0004  
     ___wmul@multiplicand 0017                       l241 02D9                       l701 0131  
                     _RA0 0028                       _RA1 0029                       _RA2 002A  
                     _RB1 0031                       _RA3 002B                       _RB2 0032  
                     _RB3 0033                       _RB4 0034                       _RB5 0035  
                     _RB6 0036                       _RB7 0037                       u505 0208  
                     u445 02B7                       u605 0221                       u535 0252  
                     u465 01E6                       u625 023A                       u555 0263  
                     u485 01F2                       u565 026C                       u495 01FE  
                     u807 0387                       u817 014A                       u585 036A  
                     u907 02CA                       u755 02DA                       u827 0150  
                     u917 0281                       u765 02E1                       u837 015F  
                     u927 028C                       u847 0171                       u937 0296  
                     u857 0195                       u947 0377                       u867 019B  
                     u877 01AA                       u797 03AA                       u887 01BC  
                     u897 02C1                       _isr 03B0                       fsr0 0004  
                     indf 0000      __end_of_delay_2000ms 036D                      l1221 01F1  
                    l1231 0212                      l1305 032B                      l1227 0207  
                    l1219 01E3                      l1243 024F                      l1245 025D  
                    l1253 0276                      l1309 00F6                      l1319 0111  
                    l1407 01B7                      l1431 0148                      l1263 0359  
                    l1249 026B                      l1283 0230                      l1531 0026  
                    l1381 0193                      l1533 005B                      l1447 015D  
                    l1457 016C                      l1299 0311                      l1475 02D1  
                    l1397 01A8                      ?_isr 000C                      STR_1 03A0  
       ?_Lcd_Write_String 000C                      _main 0017                      btemp 004E  
                    _utoa 00F1                      start 000B        ??_Lcd_Write_String 0015  
         __end_of_Lcd_Cmd 037F                     ??_isr 000E                     ?_main 000C  
                   ?_utoa 0022           __end_of___lwdiv 0217           __end_of___lwmod 027B  
                   _TRISA 0085                     _TRISB 0086                     u95_27 03BF  
                   pclath 000A                     utoa@c 0028                     utoa@v 0026  
                   status 0003                     wtemp0 004E          __end_of_Lcd_Init 02AC  
        __end_of_Lcd_Port 0357           __initialization 000C              __end_of_main 00F1  
            __end_of_utoa 0145                    ??_main 0000                    ??_utoa 0000  
           i1_delay_100ms 03BB                 ??_Lcd_Cmd 0011              readADC1@bits 0016  
            readADC2@bits 0016              readADC1@volt 0014              readADC2@volt 0014  
        ??_welcomeMessage 0000                    _adcVal 0044          __end_of_readADC1 01DB  
        __end_of_readADC2 0190                    ___wmul 02CF                 ??___lwdiv 0000  
               ??___lwmod 0000                    _strcpy 0328     __end_of_Lcd_Write_Int 039A  
                  saved_w 004E            ?i1_delay_100ms 000C           Lcd_Set_Cursor@a 0016  
         Lcd_Set_Cursor@b 0014           Lcd_Set_Cursor@y 0018           Lcd_Set_Cursor@z 0017  
 __end_of__initialization 0015         __end_of_Lcd_Clear 038D              _delay_2000ms 0357  
          __pcstackCOMMON 0000              __pidataBANK0 03C5            _Lcd_Set_Cursor 0217  
          _OPTION_REGbits 0081                 ?_Lcd_Init 000C                 ?_Lcd_Port 000C  
          Lcd_Write_Int@a 002A                __pbssBANK0 0044             delay_2000ms@i 0012  
              __pmaintext 0017                   ?___wmul 0015                __pintentry 0004  
  __end_of_Lcd_Set_Cursor 0249                   ?_strcpy 0010           ??i1_delay_100ms 000C  
              ??_Lcd_Init 0014                ??_Lcd_Port 0000                __stringtab 039A  
               ?_readADC1 0010                 ?_readADC2 0010            _Lcd_Write_Char 02AC  
                 _Lcd_Cmd 036D           main@ADC1_Digit1 003C           main@ADC1_Digit2 003E  
         main@ADC2_Digit1 0040           main@ADC2_Digit2 0042                   ___lwdiv 01DB  
                 ___lwmod 0249           ?_Lcd_Set_Cursor 0014                   __ptext1 02F0  
                 __ptext2 0328                   __ptext3 0357                   __ptext4 03A5  
                 __ptext5 0217                   __ptext6 037F                   __ptext7 0145  
                 __ptext8 0190                   __ptext9 02CF             ??_delay_100ms 0010  
  __end_of_Lcd_Write_Char 02CF      end_of_initialization 0015                ??_readADC1 0012  
              ??_readADC2 0012                 Lcd_Port@a 0010                   utoa@buf 0029  
       Lcd_Write_Int@temp 002C                   utoa@val 0022                _toggleHold 0046  
       welcomeMessage@msg 001A           ?_Lcd_Write_Char 000C         Lcd_Write_String@a 0018  
       Lcd_Write_String@i 0016       __end_of_delay_100ms 03B0                 _Lcd_Clear 037F  
          __end_of___wmul 02F0          _Lcd_Write_String 030E            __end_of_strcpy 0340  
     start_initialization 000C               __end_of_isr 03BB                ?_Lcd_Clear 000C  
                ??___wmul 0000               __pdataBANK0 0047           Lcd_Write_Char@a 0014  
         Lcd_Write_Char@y 0013                  ??_strcpy 0000                 ___latbits 0000  
           __pcstackBANK0 000C               _delay_100ms 03A5                  ?_Lcd_Cmd 000C  
        ___lwdiv@dividend 001D          ??_Lcd_Set_Cursor 0015                  ?___lwdiv 001B  
                ?___lwmod 0010                 __pstrings 039A             _Lcd_Write_Int 038D  
   __end_ofi1_delay_100ms 03C5          ___lwdiv@quotient 001F         interrupt_function 0004  
          ___wmul@product 0019                  Lcd_Cmd@a 0013               ??_Lcd_Clear 0014  
          readADC1@rxData 0017               __stringbase 039F         ___wmul@multiplier 0015  
          readADC2@rxData 0017            ?_Lcd_Write_Int 002A          ??_Lcd_Write_Char 0011  
                _Lcd_Init 027B                  _Lcd_Port 0340  __end_of_Lcd_Write_String 0328  
           ?_delay_2000ms 000C        __end_of__stringtab 03A0            _welcomeMessage 02F0  
         ___lwdiv@divisor 001B           ___lwdiv@counter 0021                  __ptext10 038D  
                __ptext11 00F1                  __ptext20 03BB                  __ptext12 0249  
                __ptext13 01DB                  __ptext14 030E                  __ptext15 02AC  
                __ptext16 027B                  __ptext17 036D                  __ptext18 0340  
                __ptext19 03B0                  _readADC1 0190                  _readADC2 0145  
              strcpy@from 0010            ??_delay_2000ms 0000           ??_Lcd_Write_Int 0000  
  __end_of_welcomeMessage 030E                _INTCONbits 000B              ?_delay_100ms 000C  
      Lcd_Write_Char@temp 0012                  intlevel1 0000          ___lwmod@dividend 0012  
               stringcode 039A        Lcd_Set_Cursor@temp 0019           ?_welcomeMessage 000C  
                utoa@base 0024           ___lwmod@divisor 0010                  strcpy@cp 0012  
                strcpy@to 0011           ___lwmod@counter 0014                  stringdir 039A  
                stringtab 039A        welcomeMessage@F331 0047  

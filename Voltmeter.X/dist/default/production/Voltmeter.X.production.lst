

Microchip MPLAB XC8 Assembler V2.41 build 20230208172133 
                                                                                               Tue Apr 25 14:44:14 2023

Microchip MPLAB XC8 C Compiler v2.41 (Free license) build 20230208172133 Og9 
     1                           	processor	16F84A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     7                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	maintext,global,class=CODE,split=1,delta=2
    11                           	psect	text1,local,class=CODE,merge=1,delta=2
    12                           	psect	text2,local,class=CODE,merge=1,delta=2
    13                           	psect	text3,local,class=CODE,merge=1,delta=2
    14                           	psect	text4,local,class=CODE,merge=1,delta=2
    15                           	psect	text5,local,class=CODE,merge=1,delta=2,group=1
    16                           	psect	text6,local,class=CODE,merge=1,delta=2
    17                           	psect	text7,local,class=CODE,merge=1,delta=2,group=2
    18                           	psect	text8,local,class=CODE,merge=1,delta=2,group=1
    19                           	psect	text9,local,class=CODE,merge=1,delta=2,group=1
    20                           	psect	text10,local,class=CODE,merge=1,delta=2
    21                           	psect	text11,local,class=CODE,merge=1,delta=2
    22                           	psect	text12,local,class=CODE,merge=1,delta=2
    23                           	psect	text13,local,class=CODE,merge=1,delta=2
    24                           	psect	text14,local,class=CODE,merge=1,delta=2
    25                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    26                           	dabs	1,0x4E,2
    27     0000                     
    28                           ; Version 2.20
    29                           ; Generated 12/02/2020 GMT
    30                           ; 
    31                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    32                           ; All rights reserved.
    33                           ; 
    34                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    35                           ; 
    36                           ; Redistribution and use in source and binary forms, with or without modification, are
    37                           ; permitted provided that the following conditions are met:
    38                           ; 
    39                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    40                           ;        conditions and the following disclaimer.
    41                           ; 
    42                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    43                           ;        of conditions and the following disclaimer in the documentation and/or other
    44                           ;        materials provided with the distribution.
    45                           ; 
    46                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    47                           ;        software without specific prior written permission.
    48                           ; 
    49                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    50                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    51                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    52                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    53                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    54                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    55                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    56                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    57                           ; 
    58                           ; 
    59                           ; Code-generator required, PIC16F84A Definitions
    60                           ; 
    61                           ; SFR Addresses
    62     0000                     	;# 
    63     0001                     	;# 
    64     0002                     	;# 
    65     0003                     	;# 
    66     0004                     	;# 
    67     0005                     	;# 
    68     0006                     	;# 
    69     0008                     	;# 
    70     0009                     	;# 
    71     000A                     	;# 
    72     000B                     	;# 
    73     0081                     	;# 
    74     0085                     	;# 
    75     0086                     	;# 
    76     0088                     	;# 
    77     0089                     	;# 
    78     0000                     	;# 
    79     0001                     	;# 
    80     0002                     	;# 
    81     0003                     	;# 
    82     0004                     	;# 
    83     0005                     	;# 
    84     0006                     	;# 
    85     0008                     	;# 
    86     0009                     	;# 
    87     000A                     	;# 
    88     000B                     	;# 
    89     0081                     	;# 
    90     0085                     	;# 
    91     0086                     	;# 
    92     0088                     	;# 
    93     0089                     	;# 
    94     0000                     	;# 
    95     0001                     	;# 
    96     0002                     	;# 
    97     0003                     	;# 
    98     0004                     	;# 
    99     0005                     	;# 
   100     0006                     	;# 
   101     0008                     	;# 
   102     0009                     	;# 
   103     000A                     	;# 
   104     000B                     	;# 
   105     0081                     	;# 
   106     0085                     	;# 
   107     0086                     	;# 
   108     0088                     	;# 
   109     0089                     	;# 
   110     0000                     	;# 
   111     0001                     	;# 
   112     0002                     	;# 
   113     0003                     	;# 
   114     0004                     	;# 
   115     0005                     	;# 
   116     0006                     	;# 
   117     0008                     	;# 
   118     0009                     	;# 
   119     000A                     	;# 
   120     000B                     	;# 
   121     0081                     	;# 
   122     0085                     	;# 
   123     0086                     	;# 
   124     0088                     	;# 
   125     0089                     	;# 
   126                           
   127                           	psect	idataBANK0
   128     0133                     __pidataBANK0:
   129                           
   130                           ;initializer for _upperV
   131     0133  3405               	retlw	5
   132     0134  3400               	retlw	0
   133     0036                     _RB6	set	54
   134     002A                     _RA2	set	42
   135     0028                     _RA0	set	40
   136     0033                     _RB3	set	51
   137     0032                     _RB2	set	50
   138     0031                     _RB1	set	49
   139     0030                     _RB0	set	48
   140     0029                     _RA1	set	41
   141     0035                     _RB5	set	53
   142     0037                     _RB7	set	55
   143     0085                     _TRISA	set	133
   144     0086                     _TRISB	set	134
   145                           
   146                           	psect	cinit
   147     03F4                     start_initialization:	
   148                           ; #config settings
   149                           
   150     03F4                     __initialization:
   151                           
   152                           ; Initialize objects allocated to BANK0
   153     03F4  2133               	fcall	__pidataBANK0	;fetch initializer
   154     03F5  00C9               	movwf	__pdataBANK0& (0+127)
   155     03F6  2134               	fcall	__pidataBANK0+1	;fetch initializer
   156     03F7  00CA               	movwf	(__pdataBANK0+1)& (0+127)
   157                           
   158                           ; Clear objects allocated to BANK0
   159     03F8  01C3               	clrf	__pbssBANK0& (0+127)
   160     03F9  01C4               	clrf	(__pbssBANK0+1)& (0+127)
   161     03FA  01C5               	clrf	(__pbssBANK0+2)& (0+127)
   162     03FB  01C6               	clrf	(__pbssBANK0+3)& (0+127)
   163     03FC  01C7               	clrf	(__pbssBANK0+4)& (0+127)
   164     03FD  01C8               	clrf	(__pbssBANK0+5)& (0+127)
   165     03FE                     end_of_initialization:	
   166                           ;End of C runtime variable initialization code
   167                           
   168     03FE                     __end_of__initialization:
   169     03FE  0183               	clrf	3
   170     03FF  2B5C               	ljmp	_main	;jump to C main() function
   171                           
   172                           	psect	bssBANK0
   173     0043                     __pbssBANK0:
   174     0043                     _lowerV:
   175     0043                     	ds	2
   176     0045                     _voltage:
   177     0045                     	ds	2
   178     0047                     _adcVal:
   179     0047                     	ds	2
   180                           
   181                           	psect	dataBANK0
   182     0049                     __pdataBANK0:
   183     0049                     _upperV:
   184     0049                     	ds	2
   185                           
   186                           	psect	cstackCOMMON
   187     0000                     __pcstackCOMMON:
   188     0000                     ??_Lcd_Write_Int:
   189     0000                     ??_utoa:	
   190                           ; 1 bytes @ 0x0
   191                           
   192     0000                     ??_Lcd_Port:	
   193                           ; 1 bytes @ 0x0
   194                           
   195     0000                     ??___wmul:	
   196                           ; 1 bytes @ 0x0
   197                           
   198     0000                     ??___lwdiv:	
   199                           ; 1 bytes @ 0x0
   200                           
   201     0000                     ??___lwmod:	
   202                           ; 1 bytes @ 0x0
   203                           
   204                           
   205                           	psect	cstackBANK0
   206     000C                     __pcstackBANK0:	
   207                           ; 1 bytes @ 0x0
   208                           
   209     000C                     ?_Lcd_Clear:
   210     000C                     ?_Lcd_Init:	
   211                           ; 1 bytes @ 0x0
   212                           
   213     000C                     ?_Lcd_Write_Char:	
   214                           ; 1 bytes @ 0x0
   215                           
   216     000C                     ?_welcomeMessage:	
   217                           ; 1 bytes @ 0x0
   218                           
   219     000C                     ?_main:	
   220                           ; 1 bytes @ 0x0
   221                           
   222     000C                     ?_Lcd_Port:	
   223                           ; 1 bytes @ 0x0
   224                           
   225     000C                     ?_Lcd_Cmd:	
   226                           ; 1 bytes @ 0x0
   227                           
   228     000C                     ?_Lcd_Write_String:	
   229                           ; 1 bytes @ 0x0
   230                           
   231     000C                     ?_readADC:	
   232                           ; 1 bytes @ 0x0
   233                           
   234     000C                     ?___lwmod:	
   235                           ; 2 bytes @ 0x0
   236                           
   237     000C                     Lcd_Port@a:	
   238                           ; 2 bytes @ 0x0
   239                           
   240     000C                     ___lwmod@divisor:	
   241                           ; 1 bytes @ 0x0
   242                           
   243                           
   244                           ; 2 bytes @ 0x0
   245     000C                     	ds	1
   246     000D                     ??_Lcd_Write_Char:
   247     000D                     ??_Lcd_Cmd:	
   248                           ; 1 bytes @ 0x1
   249                           
   250                           
   251                           ; 1 bytes @ 0x1
   252     000D                     	ds	1
   253     000E                     ??_readADC:
   254     000E                     Lcd_Write_Char@temp:	
   255                           ; 1 bytes @ 0x2
   256                           
   257     000E                     ___lwmod@dividend:	
   258                           ; 1 bytes @ 0x2
   259                           
   260                           
   261                           ; 2 bytes @ 0x2
   262     000E                     	ds	1
   263     000F                     Lcd_Cmd@a:
   264     000F                     Lcd_Write_Char@y:	
   265                           ; 1 bytes @ 0x3
   266                           
   267                           
   268                           ; 1 bytes @ 0x3
   269     000F                     	ds	1
   270     0010                     ??_Lcd_Clear:
   271     0010                     ?_Lcd_Set_Cursor:	
   272                           ; 1 bytes @ 0x4
   273                           
   274     0010                     ??_Lcd_Init:	
   275                           ; 1 bytes @ 0x4
   276                           
   277     0010                     Lcd_Set_Cursor@b:	
   278                           ; 1 bytes @ 0x4
   279                           
   280     0010                     Lcd_Write_Char@a:	
   281                           ; 1 bytes @ 0x4
   282                           
   283     0010                     ___lwmod@counter:	
   284                           ; 1 bytes @ 0x4
   285                           
   286     0010                     readADC@volt:	
   287                           ; 1 bytes @ 0x4
   288                           
   289                           
   290                           ; 2 bytes @ 0x4
   291     0010                     	ds	1
   292     0011                     ??_Lcd_Set_Cursor:
   293     0011                     ??_Lcd_Write_String:	
   294                           ; 1 bytes @ 0x5
   295                           
   296     0011                     ?___wmul:	
   297                           ; 1 bytes @ 0x5
   298                           
   299     0011                     ___wmul@multiplier:	
   300                           ; 2 bytes @ 0x5
   301                           
   302                           
   303                           ; 2 bytes @ 0x5
   304     0011                     	ds	1
   305     0012                     Lcd_Set_Cursor@a:
   306     0012                     readADC@bits:	
   307                           ; 1 bytes @ 0x6
   308                           
   309     0012                     Lcd_Write_String@i:	
   310                           ; 1 bytes @ 0x6
   311                           
   312                           
   313                           ; 2 bytes @ 0x6
   314     0012                     	ds	1
   315     0013                     Lcd_Set_Cursor@z:
   316     0013                     readADC@rxData:	
   317                           ; 1 bytes @ 0x7
   318                           
   319     0013                     ___wmul@multiplicand:	
   320                           ; 1 bytes @ 0x7
   321                           
   322                           
   323                           ; 2 bytes @ 0x7
   324     0013                     	ds	1
   325     0014                     Lcd_Set_Cursor@y:
   326     0014                     Lcd_Write_String@a:	
   327                           ; 1 bytes @ 0x8
   328                           
   329                           
   330                           ; 1 bytes @ 0x8
   331     0014                     	ds	1
   332     0015                     Lcd_Set_Cursor@temp:
   333     0015                     ___wmul@product:	
   334                           ; 1 bytes @ 0x9
   335                           
   336                           
   337                           ; 2 bytes @ 0x9
   338     0015                     	ds	1
   339     0016                     ??_welcomeMessage:
   340                           
   341                           ; 1 bytes @ 0xA
   342     0016                     	ds	1
   343     0017                     ?___lwdiv:
   344     0017                     ___lwdiv@divisor:	
   345                           ; 2 bytes @ 0xB
   346                           
   347                           
   348                           ; 2 bytes @ 0xB
   349     0017                     	ds	2
   350     0019                     ___lwdiv@dividend:
   351                           
   352                           ; 2 bytes @ 0xD
   353     0019                     	ds	2
   354     001B                     ___lwdiv@quotient:
   355                           
   356                           ; 2 bytes @ 0xF
   357     001B                     	ds	2
   358     001D                     ___lwdiv@counter:
   359                           
   360                           ; 1 bytes @ 0x11
   361     001D                     	ds	1
   362     001E                     ?_utoa:
   363     001E                     utoa@val:	
   364                           ; 1 bytes @ 0x12
   365                           
   366                           
   367                           ; 2 bytes @ 0x12
   368     001E                     	ds	2
   369     0020                     utoa@base:
   370                           
   371                           ; 2 bytes @ 0x14
   372     0020                     	ds	2
   373     0022                     utoa@v:
   374                           
   375                           ; 2 bytes @ 0x16
   376     0022                     	ds	2
   377     0024                     utoa@c:
   378                           
   379                           ; 1 bytes @ 0x18
   380     0024                     	ds	1
   381     0025                     utoa@buf:
   382                           
   383                           ; 1 bytes @ 0x19
   384     0025                     	ds	1
   385     0026                     ?_Lcd_Write_Int:
   386     0026                     Lcd_Write_Int@a:	
   387                           ; 1 bytes @ 0x1A
   388                           
   389                           
   390                           ; 2 bytes @ 0x1A
   391     0026                     	ds	2
   392     0028                     Lcd_Write_Int@temp:
   393                           
   394                           ; 16 bytes @ 0x1C
   395     0028                     	ds	16
   396     0038                     ??_main:
   397                           
   398                           ; 1 bytes @ 0x2C
   399     0038                     	ds	3
   400     003B                     main@d1:
   401                           
   402                           ; 2 bytes @ 0x2F
   403     003B                     	ds	2
   404     003D                     main@d2:
   405                           
   406                           ; 2 bytes @ 0x31
   407     003D                     	ds	2
   408     003F                     main@d3:
   409                           
   410                           ; 2 bytes @ 0x33
   411     003F                     	ds	2
   412     0041                     _main$752:
   413                           
   414                           ; 2 bytes @ 0x35
   415     0041                     	ds	2
   416                           
   417                           	psect	maintext
   418     035C                     __pmaintext:	
   419 ;;
   420 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   421 ;;
   422 ;; *************** function _main *****************
   423 ;; Defined at:
   424 ;;		line 38 in file "main.c"
   425 ;; Parameters:    Size  Location     Type
   426 ;;		None
   427 ;; Auto vars:     Size  Location     Type
   428 ;;  d3              2   51[BANK0 ] unsigned short 
   429 ;;  d2              2   49[BANK0 ] unsigned short 
   430 ;;  d1              2   47[BANK0 ] unsigned short 
   431 ;; Return value:  Size  Location     Type
   432 ;;                  1    wreg      void 
   433 ;; Registers used:
   434 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   435 ;; Tracked objects:
   436 ;;		On entry : B00/0
   437 ;;		On exit  : 0/0
   438 ;;		Unchanged: 0/0
   439 ;; Data sizes:     COMMON   BANK0
   440 ;;      Params:         0       0
   441 ;;      Locals:         0       8
   442 ;;      Temps:          0       3
   443 ;;      Totals:         0      11
   444 ;;Total ram usage:       11 bytes
   445 ;; Hardware stack levels required when called: 4
   446 ;; This function calls:
   447 ;;		_Lcd_Clear
   448 ;;		_Lcd_Init
   449 ;;		_Lcd_Set_Cursor
   450 ;;		_Lcd_Write_Char
   451 ;;		_Lcd_Write_Int
   452 ;;		___lwdiv
   453 ;;		___lwmod
   454 ;;		___wmul
   455 ;;		_readADC
   456 ;;		_welcomeMessage
   457 ;; This function is called by:
   458 ;;		Startup code after reset
   459 ;; This function uses a non-reentrant model
   460 ;;
   461                           
   462     035C                     _main:	
   463                           ;psect for function _main
   464                           
   465                           
   466                           ;main.c: 39:     TRISB = 0b01000000;
   467                           
   468                           ;incstack = 0
   469                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   470     035C  3040               	movlw	64
   471     035D  1683               	bsf	3,5	;RP0=1, select bank1
   472     035E  0086               	movwf	6	;volatile
   473                           
   474                           ;main.c: 40:     TRISA = 0b00000;
   475     035F  0185               	clrf	5	;volatile
   476                           
   477                           ;main.c: 42:     RB7 = 1;
   478     0360  1283               	bcf	3,5	;RP0=0, select bank0
   479     0361  1786               	bsf	6,7	;volatile
   480                           
   481                           ;main.c: 43:     RB5 = 0;
   482     0362  1286               	bcf	6,5	;volatile
   483                           
   484                           ;main.c: 45:     RA1 = 0;
   485     0363  1085               	bcf	5,1	;volatile
   486                           
   487                           ;main.c: 47:     Lcd_Init();
   488     0364  21EB               	fcall	_Lcd_Init
   489                           
   490                           ;main.c: 48:     welcomeMessage();
   491     0365  2162               	fcall	_welcomeMessage
   492     0366                     l1252:
   493                           
   494                           ;main.c: 51:         adcVal = readADC();
   495     0366  22BC               	fcall	_readADC
   496     0367  080D               	movf	?_readADC+1,w
   497     0368  00C8               	movwf	_adcVal+1
   498     0369  080C               	movf	?_readADC,w
   499     036A  00C7               	movwf	_adcVal
   500                           
   501                           ;main.c: 53:         unsigned short int d1;;main.c: 54:         unsigned short int d2;;m
      +                          ain.c: 55:         unsigned short int d3;;main.c: 57:         d1 = adcVal / 204;
   502     036B  30CC               	movlw	204
   503     036C  0097               	movwf	___lwdiv@divisor
   504     036D  3000               	movlw	0
   505     036E  0098               	movwf	___lwdiv@divisor+1
   506     036F  0848               	movf	_adcVal+1,w
   507     0370  009A               	movwf	___lwdiv@dividend+1
   508     0371  0847               	movf	_adcVal,w
   509     0372  0099               	movwf	___lwdiv@dividend
   510     0373  2280               	fcall	___lwdiv
   511     0374  0818               	movf	?___lwdiv+1,w
   512     0375  00BC               	movwf	main@d1+1
   513     0376  0817               	movf	?___lwdiv,w
   514     0377  00BB               	movwf	main@d1
   515                           
   516                           ;main.c: 58:         d2 = (adcVal % 204)*10/204;
   517     0378  30CC               	movlw	204
   518     0379  0097               	movwf	___lwdiv@divisor
   519     037A  3000               	movlw	0
   520     037B  0098               	movwf	___lwdiv@divisor+1
   521     037C  0848               	movf	_adcVal+1,w
   522     037D  008F               	movwf	___lwmod@dividend+1
   523     037E  0847               	movf	_adcVal,w
   524     037F  008E               	movwf	___lwmod@dividend
   525     0380  30CC               	movlw	204
   526     0381  008C               	movwf	___lwmod@divisor
   527     0382  3000               	movlw	0
   528     0383  008D               	movwf	___lwmod@divisor+1
   529     0384  221C               	fcall	___lwmod
   530     0385  080D               	movf	?___lwmod+1,w
   531     0386  0092               	movwf	___wmul@multiplier+1
   532     0387  080C               	movf	?___lwmod,w
   533     0388  0091               	movwf	___wmul@multiplier
   534     0389  300A               	movlw	10
   535     038A  0093               	movwf	___wmul@multiplicand
   536     038B  3000               	movlw	0
   537     038C  0094               	movwf	___wmul@multiplicand+1
   538     038D  21A7               	fcall	___wmul
   539     038E  0812               	movf	?___wmul+1,w
   540     038F  009A               	movwf	___lwdiv@dividend+1
   541     0390  0811               	movf	?___wmul,w
   542     0391  0099               	movwf	___lwdiv@dividend
   543     0392  2280               	fcall	___lwdiv
   544     0393  0818               	movf	?___lwdiv+1,w
   545     0394  00BE               	movwf	main@d2+1
   546     0395  0817               	movf	?___lwdiv,w
   547     0396  00BD               	movwf	main@d2
   548                           
   549                           ;main.c: 59:         d3 = ((adcVal*10)%204)*10/204;
   550     0397  0848               	movf	_adcVal+1,w
   551     0398  0092               	movwf	___wmul@multiplier+1
   552     0399  0847               	movf	_adcVal,w
   553     039A  0091               	movwf	___wmul@multiplier
   554     039B  300A               	movlw	10
   555     039C  0093               	movwf	___wmul@multiplicand
   556     039D  3000               	movlw	0
   557     039E  0094               	movwf	___wmul@multiplicand+1
   558     039F  21A7               	fcall	___wmul
   559     03A0  0812               	movf	?___wmul+1,w
   560     03A1  008F               	movwf	___lwmod@dividend+1
   561     03A2  0811               	movf	?___wmul,w
   562     03A3  008E               	movwf	___lwmod@dividend
   563     03A4  30CC               	movlw	204
   564     03A5  008C               	movwf	___lwmod@divisor
   565     03A6  3000               	movlw	0
   566     03A7  008D               	movwf	___lwmod@divisor+1
   567     03A8  221C               	fcall	___lwmod
   568     03A9  080D               	movf	?___lwmod+1,w
   569     03AA  00C2               	movwf	_main$752+1
   570     03AB  080C               	movf	?___lwmod,w
   571     03AC  00C1               	movwf	_main$752
   572                           
   573                           ;main.c: 59:         d3 = ((adcVal*10)%204)*10/204;
   574     03AD  30CC               	movlw	204
   575     03AE  0097               	movwf	___lwdiv@divisor
   576     03AF  3000               	movlw	0
   577     03B0  0098               	movwf	___lwdiv@divisor+1
   578     03B1  0842               	movf	_main$752+1,w
   579     03B2  0092               	movwf	___wmul@multiplier+1
   580     03B3  0841               	movf	_main$752,w
   581     03B4  0091               	movwf	___wmul@multiplier
   582     03B5  300A               	movlw	10
   583     03B6  0093               	movwf	___wmul@multiplicand
   584     03B7  3000               	movlw	0
   585     03B8  0094               	movwf	___wmul@multiplicand+1
   586     03B9  21A7               	fcall	___wmul
   587     03BA  0812               	movf	?___wmul+1,w
   588     03BB  009A               	movwf	___lwdiv@dividend+1
   589     03BC  0811               	movf	?___wmul,w
   590     03BD  0099               	movwf	___lwdiv@dividend
   591     03BE  2280               	fcall	___lwdiv
   592     03BF  0818               	movf	?___lwdiv+1,w
   593     03C0  00C0               	movwf	main@d3+1
   594     03C1  0817               	movf	?___lwdiv,w
   595     03C2  00BF               	movwf	main@d3
   596                           
   597                           ;main.c: 67:         Lcd_Clear();
   598     03C3  2142               	fcall	_Lcd_Clear
   599                           
   600                           ;main.c: 68:         Lcd_Set_Cursor(1, 1);
   601     03C4  1283               	bcf	3,5	;RP0=0, select bank0
   602     03C5  0190               	clrf	Lcd_Set_Cursor@b
   603     03C6  0A90               	incf	Lcd_Set_Cursor@b,f
   604     03C7  3001               	movlw	1
   605     03C8  224E               	fcall	_Lcd_Set_Cursor
   606                           
   607                           ;main.c: 69:         Lcd_Write_Int(d1);
   608     03C9  083C               	movf	main@d1+1,w
   609     03CA  00A7               	movwf	Lcd_Write_Int@a+1
   610     03CB  083B               	movf	main@d1,w
   611     03CC  00A6               	movwf	Lcd_Write_Int@a
   612     03CD  2135               	fcall	_Lcd_Write_Int
   613                           
   614                           ;main.c: 70:         Lcd_Set_Cursor(1, 2);
   615     03CE  3002               	movlw	2
   616     03CF  0090               	movwf	Lcd_Set_Cursor@b
   617     03D0  3001               	movlw	1
   618     03D1  224E               	fcall	_Lcd_Set_Cursor
   619                           
   620                           ;main.c: 71:         Lcd_Write_Char('.');
   621     03D2  302E               	movlw	46
   622     03D3  21C8               	fcall	_Lcd_Write_Char
   623                           
   624                           ;main.c: 72:         Lcd_Set_Cursor(1, 3);
   625     03D4  3003               	movlw	3
   626     03D5  0090               	movwf	Lcd_Set_Cursor@b
   627     03D6  3001               	movlw	1
   628     03D7  224E               	fcall	_Lcd_Set_Cursor
   629                           
   630                           ;main.c: 73:         Lcd_Write_Int(d2);
   631     03D8  083E               	movf	main@d2+1,w
   632     03D9  00A7               	movwf	Lcd_Write_Int@a+1
   633     03DA  083D               	movf	main@d2,w
   634     03DB  00A6               	movwf	Lcd_Write_Int@a
   635     03DC  2135               	fcall	_Lcd_Write_Int
   636                           
   637                           ;main.c: 74:         Lcd_Set_Cursor(1, 4);
   638     03DD  3004               	movlw	4
   639     03DE  0090               	movwf	Lcd_Set_Cursor@b
   640     03DF  3001               	movlw	1
   641     03E0  224E               	fcall	_Lcd_Set_Cursor
   642                           
   643                           ;main.c: 75:         Lcd_Write_Int(d3);
   644     03E1  0840               	movf	main@d3+1,w
   645     03E2  00A7               	movwf	Lcd_Write_Int@a+1
   646     03E3  083F               	movf	main@d3,w
   647     03E4  00A6               	movwf	Lcd_Write_Int@a
   648     03E5  2135               	fcall	_Lcd_Write_Int
   649                           
   650                           ;main.c: 77:         _delay((unsigned long)((200)*(4000000/4000.0)));
   651     03E6  3002               	movlw	2
   652     03E7  00BA               	movwf	??_main+2
   653     03E8  3004               	movlw	4
   654     03E9  00B9               	movwf	??_main+1
   655     03EA  30BA               	movlw	186
   656     03EB  00B8               	movwf	??_main
   657     03EC                     u677:
   658     03EC  0BB8               	decfsz	??_main,f
   659     03ED  2BEC               	goto	u677
   660     03EE  0BB9               	decfsz	??_main+1,f
   661     03EF  2BEC               	goto	u677
   662     03F0  0BBA               	decfsz	??_main+2,f
   663     03F1  2BEC               	goto	u677
   664     03F2  0000               	nop
   665     03F3  2B66               	goto	l1252
   666     03F4                     __end_of_main:
   667                           
   668                           	psect	text1
   669     0162                     __ptext1:	
   670 ;; *************** function _welcomeMessage *****************
   671 ;; Defined at:
   672 ;;		line 25 in file "main.c"
   673 ;; Parameters:    Size  Location     Type
   674 ;;		None
   675 ;; Auto vars:     Size  Location     Type
   676 ;;		None
   677 ;; Return value:  Size  Location     Type
   678 ;;                  1    wreg      void 
   679 ;; Registers used:
   680 ;;		wreg, status,2, status,0, pclath, cstack
   681 ;; Tracked objects:
   682 ;;		On entry : 100/0
   683 ;;		On exit  : 0/0
   684 ;;		Unchanged: 0/0
   685 ;; Data sizes:     COMMON   BANK0
   686 ;;      Params:         0       0
   687 ;;      Locals:         0       0
   688 ;;      Temps:          0       3
   689 ;;      Totals:         0       3
   690 ;;Total ram usage:        3 bytes
   691 ;; Hardware stack levels used: 1
   692 ;; Hardware stack levels required when called: 3
   693 ;; This function calls:
   694 ;;		_Lcd_Clear
   695 ;;		_Lcd_Set_Cursor
   696 ;; This function is called by:
   697 ;;		_main
   698 ;; This function uses a non-reentrant model
   699 ;;
   700                           
   701     0162                     _welcomeMessage:	
   702                           ;psect for function _welcomeMessage
   703                           
   704                           
   705                           ;main.c: 27:     Lcd_Clear();
   706                           
   707                           ;incstack = 0
   708                           ; Regs used in _welcomeMessage: [wreg+status,2+status,0+pclath+cstack]
   709     0162  2142               	fcall	_Lcd_Clear
   710                           
   711                           ;main.c: 28:     Lcd_Set_Cursor(1, 1);
   712     0163  1283               	bcf	3,5	;RP0=0, select bank0
   713     0164  0190               	clrf	Lcd_Set_Cursor@b
   714     0165  0A90               	incf	Lcd_Set_Cursor@b,f
   715     0166  3001               	movlw	1
   716     0167  224E               	fcall	_Lcd_Set_Cursor
   717                           
   718                           ;main.c: 30:     _delay((unsigned long)((1000)*(4000000/4000.0)));
   719     0168  3006               	movlw	6
   720     0169  0098               	movwf	??_welcomeMessage+2
   721     016A  3013               	movlw	19
   722     016B  0097               	movwf	??_welcomeMessage+1
   723     016C  30AD               	movlw	173
   724     016D  0096               	movwf	??_welcomeMessage
   725     016E                     u687:
   726     016E  0B96               	decfsz	??_welcomeMessage,f
   727     016F  296E               	goto	u687
   728     0170  0B97               	decfsz	??_welcomeMessage+1,f
   729     0171  296E               	goto	u687
   730     0172  0B98               	decfsz	??_welcomeMessage+2,f
   731     0173  296E               	goto	u687
   732     0174  2975               	nop2
   733                           
   734                           ;main.c: 31:     Lcd_Clear();
   735     0175  2142               	fcall	_Lcd_Clear
   736     0176  0008               	return
   737     0177                     __end_of_welcomeMessage:
   738                           
   739                           	psect	text2
   740     024E                     __ptext2:	
   741 ;; *************** function _Lcd_Set_Cursor *****************
   742 ;; Defined at:
   743 ;;		line 52 in file "lcd.c"
   744 ;; Parameters:    Size  Location     Type
   745 ;;  a               1    wreg     unsigned char 
   746 ;;  b               1    4[BANK0 ] unsigned char 
   747 ;; Auto vars:     Size  Location     Type
   748 ;;  a               1    6[BANK0 ] unsigned char 
   749 ;;  temp            1    9[BANK0 ] unsigned char 
   750 ;;  y               1    8[BANK0 ] unsigned char 
   751 ;;  z               1    7[BANK0 ] unsigned char 
   752 ;; Return value:  Size  Location     Type
   753 ;;                  1    wreg      void 
   754 ;; Registers used:
   755 ;;		wreg, status,2, status,0, pclath, cstack
   756 ;; Tracked objects:
   757 ;;		On entry : 100/0
   758 ;;		On exit  : 100/0
   759 ;;		Unchanged: 0/0
   760 ;; Data sizes:     COMMON   BANK0
   761 ;;      Params:         0       1
   762 ;;      Locals:         0       4
   763 ;;      Temps:          0       1
   764 ;;      Totals:         0       6
   765 ;;Total ram usage:        6 bytes
   766 ;; Hardware stack levels used: 1
   767 ;; Hardware stack levels required when called: 2
   768 ;; This function calls:
   769 ;;		_Lcd_Cmd
   770 ;; This function is called by:
   771 ;;		_welcomeMessage
   772 ;;		_main
   773 ;; This function uses a non-reentrant model
   774 ;;
   775                           
   776     024E                     _Lcd_Set_Cursor:	
   777                           ;psect for function _Lcd_Set_Cursor
   778                           
   779                           
   780                           ;incstack = 0
   781                           ; Regs used in _Lcd_Set_Cursor: [wreg+status,2+status,0+pclath+cstack]
   782                           ;Lcd_Set_Cursor@a stored from wreg
   783     024E  0092               	movwf	Lcd_Set_Cursor@a
   784                           
   785                           ;lcd.c: 52: void Lcd_Set_Cursor(char a, char b);lcd.c: 53: {;lcd.c: 54:  char temp,z,y;;
      +                          lcd.c: 55:  if(a == 1)
   786     024F  0312               	decf	Lcd_Set_Cursor@a,w
   787     0250  1D03               	btfss	3,2
   788     0251  2A67               	goto	l1106
   789                           
   790                           ;lcd.c: 56:  {;lcd.c: 57:    temp = (char) (0x80 + b - 1);
   791     0252  0810               	movf	Lcd_Set_Cursor@b,w
   792     0253  3E7F               	addlw	127
   793     0254  0095               	movwf	Lcd_Set_Cursor@temp
   794                           
   795                           ;lcd.c: 58:   z = temp>>4;
   796     0255  0815               	movf	Lcd_Set_Cursor@temp,w
   797     0256  0091               	movwf	??_Lcd_Set_Cursor
   798     0257  3004               	movlw	4
   799     0258                     u535:
   800     0258  1003               	clrc
   801     0259  0C91               	rrf	??_Lcd_Set_Cursor,f
   802     025A  3EFF               	addlw	-1
   803     025B  1D03               	skipz
   804     025C  2A58               	goto	u535
   805     025D  0811               	movf	??_Lcd_Set_Cursor,w
   806     025E  0093               	movwf	Lcd_Set_Cursor@z
   807                           
   808                           ;lcd.c: 59:   y = temp & 0x0F;
   809     025F  0815               	movf	Lcd_Set_Cursor@temp,w
   810     0260  390F               	andlw	15
   811     0261  0094               	movwf	Lcd_Set_Cursor@y
   812                           
   813                           ;lcd.c: 60:   Lcd_Cmd(z);
   814     0262  0813               	movf	Lcd_Set_Cursor@z,w
   815     0263  2150               	fcall	_Lcd_Cmd
   816                           
   817                           ;lcd.c: 61:   Lcd_Cmd(y);
   818     0264  0814               	movf	Lcd_Set_Cursor@y,w
   819     0265  2150               	fcall	_Lcd_Cmd
   820                           
   821                           ;lcd.c: 62:  }
   822     0266  0008               	return
   823     0267                     l1106:
   824     0267  3002               	movlw	2
   825     0268  0612               	xorwf	Lcd_Set_Cursor@a,w
   826     0269  1D03               	btfss	3,2
   827     026A  0008               	return
   828                           
   829                           ;lcd.c: 64:  {;lcd.c: 65:   temp = 0xC0 + b - 1;
   830     026B  0810               	movf	Lcd_Set_Cursor@b,w
   831     026C  3EBF               	addlw	191
   832     026D  0095               	movwf	Lcd_Set_Cursor@temp
   833                           
   834                           ;lcd.c: 66:   z = temp>>4;
   835     026E  0815               	movf	Lcd_Set_Cursor@temp,w
   836     026F  0091               	movwf	??_Lcd_Set_Cursor
   837     0270  3004               	movlw	4
   838     0271                     u555:
   839     0271  1003               	clrc
   840     0272  0C91               	rrf	??_Lcd_Set_Cursor,f
   841     0273  3EFF               	addlw	-1
   842     0274  1D03               	skipz
   843     0275  2A71               	goto	u555
   844     0276  0811               	movf	??_Lcd_Set_Cursor,w
   845     0277  0093               	movwf	Lcd_Set_Cursor@z
   846                           
   847                           ;lcd.c: 67:   y = temp & 0x0F;
   848     0278  0815               	movf	Lcd_Set_Cursor@temp,w
   849     0279  390F               	andlw	15
   850     027A  0094               	movwf	Lcd_Set_Cursor@y
   851                           
   852                           ;lcd.c: 68:   Lcd_Cmd(z);
   853     027B  0813               	movf	Lcd_Set_Cursor@z,w
   854     027C  2150               	fcall	_Lcd_Cmd
   855                           
   856                           ;lcd.c: 69:   Lcd_Cmd(y);
   857     027D  0814               	movf	Lcd_Set_Cursor@y,w
   858     027E  2150               	fcall	_Lcd_Cmd
   859     027F  0008               	return
   860     0280                     __end_of_Lcd_Set_Cursor:
   861                           
   862                           	psect	text3
   863     0142                     __ptext3:	
   864 ;; *************** function _Lcd_Clear *****************
   865 ;; Defined at:
   866 ;;		line 44 in file "lcd.c"
   867 ;; Parameters:    Size  Location     Type
   868 ;;		None
   869 ;; Auto vars:     Size  Location     Type
   870 ;;		None
   871 ;; Return value:  Size  Location     Type
   872 ;;                  1    wreg      void 
   873 ;; Registers used:
   874 ;;		wreg, status,2, status,0, pclath, cstack
   875 ;; Tracked objects:
   876 ;;		On entry : 0/0
   877 ;;		On exit  : 0/0
   878 ;;		Unchanged: 0/0
   879 ;; Data sizes:     COMMON   BANK0
   880 ;;      Params:         0       0
   881 ;;      Locals:         0       0
   882 ;;      Temps:          0       2
   883 ;;      Totals:         0       2
   884 ;;Total ram usage:        2 bytes
   885 ;; Hardware stack levels used: 1
   886 ;; Hardware stack levels required when called: 2
   887 ;; This function calls:
   888 ;;		_Lcd_Cmd
   889 ;; This function is called by:
   890 ;;		_welcomeMessage
   891 ;;		_main
   892 ;; This function uses a non-reentrant model
   893 ;;
   894                           
   895     0142                     _Lcd_Clear:	
   896                           ;psect for function _Lcd_Clear
   897                           
   898                           
   899                           ;lcd.c: 46:  Lcd_Cmd(0x00);
   900                           
   901                           ;incstack = 0
   902                           ; Regs used in _Lcd_Clear: [wreg+status,2+status,0+pclath+cstack]
   903     0142  3000               	movlw	0
   904     0143  2150               	fcall	_Lcd_Cmd
   905                           
   906                           ;lcd.c: 47:  Lcd_Cmd(0x01);
   907     0144  3001               	movlw	1
   908     0145  2150               	fcall	_Lcd_Cmd
   909                           
   910                           ;lcd.c: 48:     _delay((unsigned long)((2)*(4000000/4000.0)));
   911     0146  3003               	movlw	3
   912     0147  0091               	movwf	??_Lcd_Clear+1
   913     0148  3097               	movlw	151
   914     0149  0090               	movwf	??_Lcd_Clear
   915     014A                     u697:
   916     014A  0B90               	decfsz	??_Lcd_Clear,f
   917     014B  294A               	goto	u697
   918     014C  0B91               	decfsz	??_Lcd_Clear+1,f
   919     014D  294A               	goto	u697
   920     014E  294F               	nop2
   921     014F  0008               	return
   922     0150                     __end_of_Lcd_Clear:
   923                           
   924                           	psect	text4
   925     02BC                     __ptext4:	
   926 ;; *************** function _readADC *****************
   927 ;; Defined at:
   928 ;;		line 6 in file "adc.c"
   929 ;; Parameters:    Size  Location     Type
   930 ;;		None
   931 ;; Auto vars:     Size  Location     Type
   932 ;;  volt            2    4[BANK0 ] unsigned int 
   933 ;;  rxData          1    7[BANK0 ] unsigned char 
   934 ;;  bits            1    6[BANK0 ] unsigned char 
   935 ;; Return value:  Size  Location     Type
   936 ;;                  2    0[BANK0 ] unsigned int 
   937 ;; Registers used:
   938 ;;		wreg, status,2, status,0, btemp+1
   939 ;; Tracked objects:
   940 ;;		On entry : 0/0
   941 ;;		On exit  : 100/0
   942 ;;		Unchanged: 0/0
   943 ;; Data sizes:     COMMON   BANK0
   944 ;;      Params:         0       2
   945 ;;      Locals:         0       4
   946 ;;      Temps:          0       2
   947 ;;      Totals:         0       8
   948 ;;Total ram usage:        8 bytes
   949 ;; Hardware stack levels used: 1
   950 ;; This function calls:
   951 ;;		Nothing
   952 ;; This function is called by:
   953 ;;		_main
   954 ;; This function uses a non-reentrant model
   955 ;;
   956                           
   957     02BC                     _readADC:	
   958                           ;psect for function _readADC
   959                           
   960                           
   961                           ;adc.c: 8:   unsigned char bits;;adc.c: 9:   unsigned char rxData = 0;
   962                           
   963                           ;incstack = 0
   964                           ; Regs used in _readADC: [wreg+status,2+status,0+btemp+1]
   965     02BC  1283               	bcf	3,5	;RP0=0, select bank0
   966     02BD  0193               	clrf	readADC@rxData
   967                           
   968                           ;adc.c: 12:   RB7 = 0;
   969     02BE  1386               	bcf	6,7	;volatile
   970                           
   971                           ;adc.c: 15:   for (bits = 0; bits < 3; bits++)
   972     02BF  0192               	clrf	readADC@bits
   973     02C0                     l1178:
   974                           
   975                           ;adc.c: 16:   {;adc.c: 17:       _delay((unsigned long)((100)*(4000000/4000000.0)));
   976     02C0  3021               	movlw	33
   977     02C1  008E               	movwf	??_readADC
   978     02C2                     u707:
   979     02C2  0B8E               	decfsz	??_readADC,f
   980     02C3  2AC2               	goto	u707
   981                           
   982                           ;adc.c: 18:       RB5 = 1;
   983     02C4  1283               	bcf	3,5	;RP0=0, select bank0
   984     02C5  1686               	bsf	6,5	;volatile
   985                           
   986                           ;adc.c: 19:       _delay((unsigned long)((100)*(4000000/4000000.0)));
   987     02C6  3021               	movlw	33
   988     02C7  008E               	movwf	??_readADC
   989     02C8                     u717:
   990     02C8  0B8E               	decfsz	??_readADC,f
   991     02C9  2AC8               	goto	u717
   992                           
   993                           ;adc.c: 20:       RB5 = 0;
   994     02CA  1283               	bcf	3,5	;RP0=0, select bank0
   995     02CB  1286               	bcf	6,5	;volatile
   996                           
   997                           ;adc.c: 21:   }
   998     02CC  3001               	movlw	1
   999     02CD  00CF               	movwf	79
  1000     02CE  084F               	movf	79,w
  1001     02CF  0792               	addwf	readADC@bits,f
  1002     02D0  3003               	movlw	3
  1003     02D1  0212               	subwf	readADC@bits,w
  1004     02D2  1C03               	skipc
  1005     02D3  2AC0               	goto	l1178
  1006                           
  1007                           ;adc.c: 24:   for (bits = 0; bits < 8; bits++)
  1008     02D4  0192               	clrf	readADC@bits
  1009     02D5                     l1194:
  1010                           
  1011                           ;adc.c: 25:   {;adc.c: 27:     _delay((unsigned long)((100)*(4000000/4000000.0)));
  1012     02D5  3021               	movlw	33
  1013     02D6  008E               	movwf	??_readADC
  1014     02D7                     u727:
  1015     02D7  0B8E               	decfsz	??_readADC,f
  1016     02D8  2AD7               	goto	u727
  1017                           
  1018                           ;adc.c: 28:     RB5 = 1;
  1019     02D9  1283               	bcf	3,5	;RP0=0, select bank0
  1020     02DA  1686               	bsf	6,5	;volatile
  1021                           
  1022                           ;adc.c: 31:     rxData = rxData << 1;
  1023     02DB  0813               	movf	readADC@rxData,w
  1024     02DC  008E               	movwf	??_readADC
  1025     02DD  070E               	addwf	??_readADC,w
  1026     02DE  0093               	movwf	readADC@rxData
  1027                           
  1028                           ;adc.c: 34:     if(RB6 == 1)
  1029     02DF  1F06               	btfss	6,6	;volatile
  1030     02E0  2AE4               	goto	l1204
  1031                           
  1032                           ;adc.c: 35:       rxData = rxData | 0x01;
  1033     02E1  0813               	movf	readADC@rxData,w
  1034     02E2  3801               	iorlw	1
  1035     02E3  2AE6               	goto	L1
  1036     02E4                     l1204:
  1037                           
  1038                           ;adc.c: 37:       rxData = rxData & 0xfe;
  1039     02E4  0813               	movf	readADC@rxData,w
  1040     02E5  39FE               	andlw	254
  1041     02E6                     L1:
  1042     02E6  0093               	movwf	readADC@rxData
  1043                           
  1044                           ;adc.c: 39:     _delay((unsigned long)((100)*(4000000/4000000.0)));
  1045     02E7  3021               	movlw	33
  1046     02E8  008E               	movwf	??_readADC
  1047     02E9                     u737:
  1048     02E9  0B8E               	decfsz	??_readADC,f
  1049     02EA  2AE9               	goto	u737
  1050                           
  1051                           ;adc.c: 40:     RB5 = 0;
  1052     02EB  1283               	bcf	3,5	;RP0=0, select bank0
  1053     02EC  1286               	bcf	6,5	;volatile
  1054                           
  1055                           ;adc.c: 41:     }
  1056     02ED  3001               	movlw	1
  1057     02EE  00CF               	movwf	79
  1058     02EF  084F               	movf	79,w
  1059     02F0  0792               	addwf	readADC@bits,f
  1060     02F1  3008               	movlw	8
  1061     02F2  0212               	subwf	readADC@bits,w
  1062     02F3  1C03               	skipc
  1063     02F4  2AD5               	goto	l1194
  1064                           
  1065                           ;adc.c: 44:   RB7 = 1;
  1066     02F5  1786               	bsf	6,7	;volatile
  1067                           
  1068                           ;adc.c: 47:   volt = (rxData << 2);
  1069     02F6  0813               	movf	readADC@rxData,w
  1070     02F7  008E               	movwf	??_readADC
  1071     02F8  018F               	clrf	??_readADC+1
  1072     02F9  1003               	clrc
  1073     02FA  0D8E               	rlf	??_readADC,f
  1074     02FB  0D8F               	rlf	??_readADC+1,f
  1075     02FC  1003               	clrc
  1076     02FD  0D8E               	rlf	??_readADC,f
  1077     02FE  0D8F               	rlf	??_readADC+1,f
  1078     02FF  080E               	movf	??_readADC,w
  1079     0300  0090               	movwf	readADC@volt
  1080     0301  080F               	movf	??_readADC+1,w
  1081     0302  0091               	movwf	readADC@volt+1
  1082                           
  1083                           ;adc.c: 48:   return volt;
  1084     0303  0811               	movf	readADC@volt+1,w
  1085     0304  008D               	movwf	?_readADC+1
  1086     0305  0810               	movf	readADC@volt,w
  1087     0306  008C               	movwf	?_readADC
  1088     0307  0008               	return
  1089     0308                     __end_of_readADC:
  1090                           
  1091                           	psect	text5
  1092     01A7                     __ptext5:	
  1093 ;; *************** function ___wmul *****************
  1094 ;; Defined at:
  1095 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\Umul16.c"
  1096 ;; Parameters:    Size  Location     Type
  1097 ;;  multiplier      2    5[BANK0 ] unsigned int 
  1098 ;;  multiplicand    2    7[BANK0 ] unsigned int 
  1099 ;; Auto vars:     Size  Location     Type
  1100 ;;  product         2    9[BANK0 ] unsigned int 
  1101 ;; Return value:  Size  Location     Type
  1102 ;;                  2    5[BANK0 ] unsigned int 
  1103 ;; Registers used:
  1104 ;;		wreg, status,2, status,0
  1105 ;; Tracked objects:
  1106 ;;		On entry : 100/0
  1107 ;;		On exit  : 100/0
  1108 ;;		Unchanged: 0/0
  1109 ;; Data sizes:     COMMON   BANK0
  1110 ;;      Params:         0       4
  1111 ;;      Locals:         0       2
  1112 ;;      Temps:          0       0
  1113 ;;      Totals:         0       6
  1114 ;;Total ram usage:        6 bytes
  1115 ;; Hardware stack levels used: 1
  1116 ;; This function calls:
  1117 ;;		Nothing
  1118 ;; This function is called by:
  1119 ;;		_main
  1120 ;; This function uses a non-reentrant model
  1121 ;;
  1122                           
  1123     01A7                     ___wmul:	
  1124                           ;psect for function ___wmul
  1125                           
  1126                           
  1127                           ;incstack = 0
  1128                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  1129     01A7  0195               	clrf	___wmul@product
  1130     01A8  0196               	clrf	___wmul@product+1
  1131     01A9                     l1226:
  1132     01A9  1C11               	btfss	___wmul@multiplier,0
  1133     01AA  29B1               	goto	l206
  1134     01AB  0813               	movf	___wmul@multiplicand,w
  1135     01AC  0795               	addwf	___wmul@product,f
  1136     01AD  1803               	skipnc
  1137     01AE  0A96               	incf	___wmul@product+1,f
  1138     01AF  0814               	movf	___wmul@multiplicand+1,w
  1139     01B0  0796               	addwf	___wmul@product+1,f
  1140     01B1                     l206:
  1141     01B1  3001               	movlw	1
  1142     01B2                     u645:
  1143     01B2  1003               	clrc
  1144     01B3  0D93               	rlf	___wmul@multiplicand,f
  1145     01B4  0D94               	rlf	___wmul@multiplicand+1,f
  1146     01B5  3EFF               	addlw	-1
  1147     01B6  1D03               	skipz
  1148     01B7  29B2               	goto	u645
  1149     01B8  3001               	movlw	1
  1150     01B9                     u655:
  1151     01B9  1003               	clrc
  1152     01BA  0C92               	rrf	___wmul@multiplier+1,f
  1153     01BB  0C91               	rrf	___wmul@multiplier,f
  1154     01BC  3EFF               	addlw	-1
  1155     01BD  1D03               	skipz
  1156     01BE  29B9               	goto	u655
  1157     01BF  0811               	movf	___wmul@multiplier,w
  1158     01C0  0412               	iorwf	___wmul@multiplier+1,w
  1159     01C1  1D03               	btfss	3,2
  1160     01C2  29A9               	goto	l1226
  1161     01C3  0816               	movf	___wmul@product+1,w
  1162     01C4  0092               	movwf	?___wmul+1
  1163     01C5  0815               	movf	___wmul@product,w
  1164     01C6  0091               	movwf	?___wmul
  1165     01C7  0008               	return
  1166     01C8                     __end_of___wmul:
  1167                           
  1168                           	psect	text6
  1169     0135                     __ptext6:	
  1170 ;; *************** function _Lcd_Write_Int *****************
  1171 ;; Defined at:
  1172 ;;		line 121 in file "lcd.c"
  1173 ;; Parameters:    Size  Location     Type
  1174 ;;  a               2   26[BANK0 ] unsigned int 
  1175 ;; Auto vars:     Size  Location     Type
  1176 ;;  temp           16   28[BANK0 ] unsigned char [16]
  1177 ;; Return value:  Size  Location     Type
  1178 ;;                  1    wreg      void 
  1179 ;; Registers used:
  1180 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1181 ;; Tracked objects:
  1182 ;;		On entry : 100/0
  1183 ;;		On exit  : 900/0
  1184 ;;		Unchanged: 0/0
  1185 ;; Data sizes:     COMMON   BANK0
  1186 ;;      Params:         0       2
  1187 ;;      Locals:         0      16
  1188 ;;      Temps:          0       0
  1189 ;;      Totals:         0      18
  1190 ;;Total ram usage:       18 bytes
  1191 ;; Hardware stack levels used: 1
  1192 ;; Hardware stack levels required when called: 3
  1193 ;; This function calls:
  1194 ;;		_Lcd_Write_String
  1195 ;;		_utoa
  1196 ;; This function is called by:
  1197 ;;		_main
  1198 ;; This function uses a non-reentrant model
  1199 ;;
  1200                           
  1201     0135                     _Lcd_Write_Int:	
  1202                           ;psect for function _Lcd_Write_Int
  1203                           
  1204                           
  1205                           ;lcd.c: 121: void Lcd_Write_Int(unsigned int a);lcd.c: 122: {;lcd.c: 123:     char temp[
      +                          16];;lcd.c: 124:     utoa((char*)temp, a, 10);
  1206                           
  1207                           ;incstack = 0
  1208                           ; Regs used in _Lcd_Write_Int: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1209     0135  0827               	movf	Lcd_Write_Int@a+1,w
  1210     0136  009F               	movwf	utoa@val+1
  1211     0137  0826               	movf	Lcd_Write_Int@a,w
  1212     0138  009E               	movwf	utoa@val
  1213     0139  300A               	movlw	10
  1214     013A  00A0               	movwf	utoa@base
  1215     013B  3000               	movlw	0
  1216     013C  00A1               	movwf	utoa@base+1
  1217     013D  3028               	movlw	(low (Lcd_Write_Int@temp| 0))& (0+255)
  1218     013E  2308               	fcall	_utoa
  1219                           
  1220                           ;lcd.c: 125:     Lcd_Write_String(temp);
  1221     013F  3028               	movlw	(low (Lcd_Write_Int@temp| 0))& (0+255)
  1222     0140  218D               	fcall	_Lcd_Write_String
  1223     0141  0008               	return
  1224     0142                     __end_of_Lcd_Write_Int:
  1225                           
  1226                           	psect	text7
  1227     0308                     __ptext7:	
  1228 ;; *************** function _utoa *****************
  1229 ;; Defined at:
  1230 ;;		line 17 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\itoa.c"
  1231 ;; Parameters:    Size  Location     Type
  1232 ;;  buf             1    wreg     PTR unsigned char 
  1233 ;;		 -> Lcd_Write_Int@temp(16), 
  1234 ;;  val             2   18[BANK0 ] unsigned int 
  1235 ;;  base            2   20[BANK0 ] int 
  1236 ;; Auto vars:     Size  Location     Type
  1237 ;;  buf             1   25[BANK0 ] PTR unsigned char 
  1238 ;;		 -> Lcd_Write_Int@temp(16), 
  1239 ;;  v               2   22[BANK0 ] unsigned int 
  1240 ;;  c               1   24[BANK0 ] unsigned char 
  1241 ;; Return value:  Size  Location     Type
  1242 ;;                  1    wreg      PTR unsigned char 
  1243 ;; Registers used:
  1244 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1245 ;; Tracked objects:
  1246 ;;		On entry : 100/0
  1247 ;;		On exit  : 900/0
  1248 ;;		Unchanged: 0/0
  1249 ;; Data sizes:     COMMON   BANK0
  1250 ;;      Params:         0       4
  1251 ;;      Locals:         0       4
  1252 ;;      Temps:          0       0
  1253 ;;      Totals:         0       8
  1254 ;;Total ram usage:        8 bytes
  1255 ;; Hardware stack levels used: 1
  1256 ;; Hardware stack levels required when called: 1
  1257 ;; This function calls:
  1258 ;;		___lwdiv
  1259 ;;		___lwmod
  1260 ;; This function is called by:
  1261 ;;		_Lcd_Write_Int
  1262 ;; This function uses a non-reentrant model
  1263 ;;
  1264                           
  1265     0308                     _utoa:	
  1266                           ;psect for function _utoa
  1267                           
  1268                           
  1269                           ;incstack = 0
  1270                           ; Regs used in _utoa: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1271                           ;utoa@buf stored from wreg
  1272     0308  00A5               	movwf	utoa@buf
  1273     0309  081F               	movf	utoa@val+1,w
  1274     030A  00A3               	movwf	utoa@v+1
  1275     030B  081E               	movf	utoa@val,w
  1276     030C  00A2               	movwf	utoa@v
  1277     030D                     l1126:
  1278     030D  0821               	movf	utoa@base+1,w
  1279     030E  0098               	movwf	___lwdiv@divisor+1
  1280     030F  0820               	movf	utoa@base,w
  1281     0310  0097               	movwf	___lwdiv@divisor
  1282     0311  0823               	movf	utoa@v+1,w
  1283     0312  009A               	movwf	___lwdiv@dividend+1
  1284     0313  0822               	movf	utoa@v,w
  1285     0314  0099               	movwf	___lwdiv@dividend
  1286     0315  2280               	fcall	___lwdiv
  1287     0316  0818               	movf	?___lwdiv+1,w
  1288     0317  00A3               	movwf	utoa@v+1
  1289     0318  0817               	movf	?___lwdiv,w
  1290     0319  00A2               	movwf	utoa@v
  1291     031A  3001               	movlw	1
  1292     031B  00CF               	movwf	79
  1293     031C  084F               	movf	79,w
  1294     031D  07A5               	addwf	utoa@buf,f
  1295     031E  0822               	movf	utoa@v,w
  1296     031F  0423               	iorwf	utoa@v+1,w
  1297     0320  1D03               	btfss	3,2
  1298     0321  2B0D               	goto	l1126
  1299     0322  0825               	movf	utoa@buf,w
  1300     0323  0084               	movwf	4
  1301     0324  1383               	bcf	3,7	;select IRP bank0
  1302     0325  0180               	clrf	0
  1303     0326  3001               	movlw	1
  1304     0327  02A5               	subwf	utoa@buf,f
  1305     0328                     l1136:
  1306     0328  0821               	movf	utoa@base+1,w
  1307     0329  008D               	movwf	___lwmod@divisor+1
  1308     032A  0820               	movf	utoa@base,w
  1309     032B  008C               	movwf	___lwmod@divisor
  1310     032C  081F               	movf	utoa@val+1,w
  1311     032D  008F               	movwf	___lwmod@dividend+1
  1312     032E  081E               	movf	utoa@val,w
  1313     032F  008E               	movwf	___lwmod@dividend
  1314     0330  221C               	fcall	___lwmod
  1315     0331  080C               	movf	?___lwmod,w
  1316     0332  00A4               	movwf	utoa@c
  1317     0333  0821               	movf	utoa@base+1,w
  1318     0334  0098               	movwf	___lwdiv@divisor+1
  1319     0335  0820               	movf	utoa@base,w
  1320     0336  0097               	movwf	___lwdiv@divisor
  1321     0337  081F               	movf	utoa@val+1,w
  1322     0338  009A               	movwf	___lwdiv@dividend+1
  1323     0339  081E               	movf	utoa@val,w
  1324     033A  0099               	movwf	___lwdiv@dividend
  1325     033B  2280               	fcall	___lwdiv
  1326     033C  0818               	movf	?___lwdiv+1,w
  1327     033D  009F               	movwf	utoa@val+1
  1328     033E  0817               	movf	?___lwdiv,w
  1329     033F  009E               	movwf	utoa@val
  1330     0340  300A               	movlw	10
  1331     0341  0224               	subwf	utoa@c,w
  1332     0342  1C03               	skipc
  1333     0343  2B48               	goto	l666
  1334     0344  3007               	movlw	7
  1335     0345  00CF               	movwf	79
  1336     0346  084F               	movf	79,w
  1337     0347  07A4               	addwf	utoa@c,f
  1338     0348                     l666:
  1339     0348  3030               	movlw	48
  1340     0349  00CF               	movwf	79
  1341     034A  084F               	movf	79,w
  1342     034B  07A4               	addwf	utoa@c,f
  1343     034C  0825               	movf	utoa@buf,w
  1344     034D  0084               	movwf	4
  1345     034E  0824               	movf	utoa@c,w
  1346     034F  1383               	bcf	3,7	;select IRP bank0
  1347     0350  0080               	movwf	0
  1348     0351  3001               	movlw	1
  1349     0352  02A5               	subwf	utoa@buf,f
  1350     0353  081E               	movf	utoa@val,w
  1351     0354  041F               	iorwf	utoa@val+1,w
  1352     0355  1D03               	btfss	3,2
  1353     0356  2B28               	goto	l1136
  1354                           
  1355                           ;	Return value of _utoa is never used
  1356     0357  3001               	movlw	1
  1357     0358  00CF               	movwf	79
  1358     0359  084F               	movf	79,w
  1359     035A  07A5               	addwf	utoa@buf,f
  1360     035B  0008               	return
  1361     035C                     __end_of_utoa:
  1362                           
  1363                           	psect	text8
  1364     021C                     __ptext8:	
  1365 ;; *************** function ___lwmod *****************
  1366 ;; Defined at:
  1367 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\lwmod.c"
  1368 ;; Parameters:    Size  Location     Type
  1369 ;;  divisor         2    0[BANK0 ] unsigned int 
  1370 ;;  dividend        2    2[BANK0 ] unsigned int 
  1371 ;; Auto vars:     Size  Location     Type
  1372 ;;  counter         1    4[BANK0 ] unsigned char 
  1373 ;; Return value:  Size  Location     Type
  1374 ;;                  2    0[BANK0 ] unsigned int 
  1375 ;; Registers used:
  1376 ;;		wreg, status,2, status,0, btemp+1
  1377 ;; Tracked objects:
  1378 ;;		On entry : 100/0
  1379 ;;		On exit  : 100/0
  1380 ;;		Unchanged: 0/0
  1381 ;; Data sizes:     COMMON   BANK0
  1382 ;;      Params:         0       4
  1383 ;;      Locals:         0       1
  1384 ;;      Temps:          0       0
  1385 ;;      Totals:         0       5
  1386 ;;Total ram usage:        5 bytes
  1387 ;; Hardware stack levels used: 1
  1388 ;; This function calls:
  1389 ;;		Nothing
  1390 ;; This function is called by:
  1391 ;;		_main
  1392 ;;		_utoa
  1393 ;; This function uses a non-reentrant model
  1394 ;;
  1395                           
  1396     021C                     ___lwmod:	
  1397                           ;psect for function ___lwmod
  1398                           
  1399                           
  1400                           ;incstack = 0
  1401                           ; Regs used in ___lwmod: [wreg+status,2+status,0+btemp+1]
  1402     021C  080C               	movf	___lwmod@divisor,w
  1403     021D  040D               	iorwf	___lwmod@divisor+1,w
  1404     021E  1903               	btfsc	3,2
  1405     021F  2A49               	goto	l1088
  1406     0220  0190               	clrf	___lwmod@counter
  1407     0221  0A90               	incf	___lwmod@counter,f
  1408     0222                     l1078:
  1409     0222  1B8D               	btfsc	___lwmod@divisor+1,7
  1410     0223  2A30               	goto	l1080
  1411     0224  3001               	movlw	1
  1412     0225                     u475:
  1413     0225  1003               	clrc
  1414     0226  0D8C               	rlf	___lwmod@divisor,f
  1415     0227  0D8D               	rlf	___lwmod@divisor+1,f
  1416     0228  3EFF               	addlw	-1
  1417     0229  1D03               	skipz
  1418     022A  2A25               	goto	u475
  1419     022B  3001               	movlw	1
  1420     022C  00CF               	movwf	79
  1421     022D  084F               	movf	79,w
  1422     022E  0790               	addwf	___lwmod@counter,f
  1423     022F  2A22               	goto	l1078
  1424     0230                     l1080:
  1425     0230  080D               	movf	___lwmod@divisor+1,w
  1426     0231  020F               	subwf	___lwmod@dividend+1,w
  1427     0232  1D03               	skipz
  1428     0233  2A36               	goto	u495
  1429     0234  080C               	movf	___lwmod@divisor,w
  1430     0235  020E               	subwf	___lwmod@dividend,w
  1431     0236                     u495:
  1432     0236  1C03               	skipc
  1433     0237  2A3E               	goto	l1084
  1434     0238  080C               	movf	___lwmod@divisor,w
  1435     0239  028E               	subwf	___lwmod@dividend,f
  1436     023A  080D               	movf	___lwmod@divisor+1,w
  1437     023B  1C03               	skipc
  1438     023C  038F               	decf	___lwmod@dividend+1,f
  1439     023D  028F               	subwf	___lwmod@dividend+1,f
  1440     023E                     l1084:
  1441     023E  3001               	movlw	1
  1442     023F                     u505:
  1443     023F  1003               	clrc
  1444     0240  0C8D               	rrf	___lwmod@divisor+1,f
  1445     0241  0C8C               	rrf	___lwmod@divisor,f
  1446     0242  3EFF               	addlw	-1
  1447     0243  1D03               	skipz
  1448     0244  2A3F               	goto	u505
  1449     0245  3001               	movlw	1
  1450     0246  0290               	subwf	___lwmod@counter,f
  1451     0247  1D03               	btfss	3,2
  1452     0248  2A30               	goto	l1080
  1453     0249                     l1088:
  1454     0249  080F               	movf	___lwmod@dividend+1,w
  1455     024A  008D               	movwf	?___lwmod+1
  1456     024B  080E               	movf	___lwmod@dividend,w
  1457     024C  008C               	movwf	?___lwmod
  1458     024D  0008               	return
  1459     024E                     __end_of___lwmod:
  1460                           
  1461                           	psect	text9
  1462     0280                     __ptext9:	
  1463 ;; *************** function ___lwdiv *****************
  1464 ;; Defined at:
  1465 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\lwdiv.c"
  1466 ;; Parameters:    Size  Location     Type
  1467 ;;  divisor         2   11[BANK0 ] unsigned int 
  1468 ;;  dividend        2   13[BANK0 ] unsigned int 
  1469 ;; Auto vars:     Size  Location     Type
  1470 ;;  quotient        2   15[BANK0 ] unsigned int 
  1471 ;;  counter         1   17[BANK0 ] unsigned char 
  1472 ;; Return value:  Size  Location     Type
  1473 ;;                  2   11[BANK0 ] unsigned int 
  1474 ;; Registers used:
  1475 ;;		wreg, status,2, status,0, btemp+1
  1476 ;; Tracked objects:
  1477 ;;		On entry : 100/0
  1478 ;;		On exit  : 100/0
  1479 ;;		Unchanged: 0/0
  1480 ;; Data sizes:     COMMON   BANK0
  1481 ;;      Params:         0       4
  1482 ;;      Locals:         0       3
  1483 ;;      Temps:          0       0
  1484 ;;      Totals:         0       7
  1485 ;;Total ram usage:        7 bytes
  1486 ;; Hardware stack levels used: 1
  1487 ;; This function calls:
  1488 ;;		Nothing
  1489 ;; This function is called by:
  1490 ;;		_main
  1491 ;;		_utoa
  1492 ;; This function uses a non-reentrant model
  1493 ;;
  1494                           
  1495     0280                     ___lwdiv:	
  1496                           ;psect for function ___lwdiv
  1497                           
  1498                           
  1499                           ;incstack = 0
  1500                           ; Regs used in ___lwdiv: [wreg+status,2+status,0+btemp+1]
  1501     0280  019B               	clrf	___lwdiv@quotient
  1502     0281  019C               	clrf	___lwdiv@quotient+1
  1503     0282  0817               	movf	___lwdiv@divisor,w
  1504     0283  0418               	iorwf	___lwdiv@divisor+1,w
  1505     0284  1903               	btfsc	3,2
  1506     0285  2AB7               	goto	l1066
  1507     0286  019D               	clrf	___lwdiv@counter
  1508     0287  0A9D               	incf	___lwdiv@counter,f
  1509     0288                     l1054:
  1510     0288  1B98               	btfsc	___lwdiv@divisor+1,7
  1511     0289  2A96               	goto	l1056
  1512     028A  3001               	movlw	1
  1513     028B                     u405:
  1514     028B  1003               	clrc
  1515     028C  0D97               	rlf	___lwdiv@divisor,f
  1516     028D  0D98               	rlf	___lwdiv@divisor+1,f
  1517     028E  3EFF               	addlw	-1
  1518     028F  1D03               	skipz
  1519     0290  2A8B               	goto	u405
  1520     0291  3001               	movlw	1
  1521     0292  00CF               	movwf	79
  1522     0293  084F               	movf	79,w
  1523     0294  079D               	addwf	___lwdiv@counter,f
  1524     0295  2A88               	goto	l1054
  1525     0296                     l1056:
  1526     0296  3001               	movlw	1
  1527     0297                     u425:
  1528     0297  1003               	clrc
  1529     0298  0D9B               	rlf	___lwdiv@quotient,f
  1530     0299  0D9C               	rlf	___lwdiv@quotient+1,f
  1531     029A  3EFF               	addlw	-1
  1532     029B  1D03               	skipz
  1533     029C  2A97               	goto	u425
  1534     029D  0818               	movf	___lwdiv@divisor+1,w
  1535     029E  021A               	subwf	___lwdiv@dividend+1,w
  1536     029F  1D03               	skipz
  1537     02A0  2AA3               	goto	u435
  1538     02A1  0817               	movf	___lwdiv@divisor,w
  1539     02A2  0219               	subwf	___lwdiv@dividend,w
  1540     02A3                     u435:
  1541     02A3  1C03               	skipc
  1542     02A4  2AAC               	goto	l1062
  1543     02A5  0817               	movf	___lwdiv@divisor,w
  1544     02A6  0299               	subwf	___lwdiv@dividend,f
  1545     02A7  0818               	movf	___lwdiv@divisor+1,w
  1546     02A8  1C03               	skipc
  1547     02A9  039A               	decf	___lwdiv@dividend+1,f
  1548     02AA  029A               	subwf	___lwdiv@dividend+1,f
  1549     02AB  141B               	bsf	___lwdiv@quotient,0
  1550     02AC                     l1062:
  1551     02AC  3001               	movlw	1
  1552     02AD                     u445:
  1553     02AD  1003               	clrc
  1554     02AE  0C98               	rrf	___lwdiv@divisor+1,f
  1555     02AF  0C97               	rrf	___lwdiv@divisor,f
  1556     02B0  3EFF               	addlw	-1
  1557     02B1  1D03               	skipz
  1558     02B2  2AAD               	goto	u445
  1559     02B3  3001               	movlw	1
  1560     02B4  029D               	subwf	___lwdiv@counter,f
  1561     02B5  1D03               	btfss	3,2
  1562     02B6  2A96               	goto	l1056
  1563     02B7                     l1066:
  1564     02B7  081C               	movf	___lwdiv@quotient+1,w
  1565     02B8  0098               	movwf	?___lwdiv+1
  1566     02B9  081B               	movf	___lwdiv@quotient,w
  1567     02BA  0097               	movwf	?___lwdiv
  1568     02BB  0008               	return
  1569     02BC                     __end_of___lwdiv:
  1570                           
  1571                           	psect	text10
  1572     018D                     __ptext10:	
  1573 ;; *************** function _Lcd_Write_String *****************
  1574 ;; Defined at:
  1575 ;;		line 111 in file "lcd.c"
  1576 ;; Parameters:    Size  Location     Type
  1577 ;;  a               1    wreg     PTR unsigned char 
  1578 ;;		 -> Lcd_Write_Int@temp(16), 
  1579 ;; Auto vars:     Size  Location     Type
  1580 ;;  a               1    8[BANK0 ] PTR unsigned char 
  1581 ;;		 -> Lcd_Write_Int@temp(16), 
  1582 ;;  i               2    6[BANK0 ] int 
  1583 ;; Return value:  Size  Location     Type
  1584 ;;                  1    wreg      void 
  1585 ;; Registers used:
  1586 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1587 ;; Tracked objects:
  1588 ;;		On entry : 900/0
  1589 ;;		On exit  : 900/0
  1590 ;;		Unchanged: 0/0
  1591 ;; Data sizes:     COMMON   BANK0
  1592 ;;      Params:         0       0
  1593 ;;      Locals:         0       3
  1594 ;;      Temps:          0       1
  1595 ;;      Totals:         0       4
  1596 ;;Total ram usage:        4 bytes
  1597 ;; Hardware stack levels used: 1
  1598 ;; Hardware stack levels required when called: 2
  1599 ;; This function calls:
  1600 ;;		_Lcd_Write_Char
  1601 ;; This function is called by:
  1602 ;;		_Lcd_Write_Int
  1603 ;; This function uses a non-reentrant model
  1604 ;;
  1605                           
  1606     018D                     _Lcd_Write_String:	
  1607                           ;psect for function _Lcd_Write_String
  1608                           
  1609                           
  1610                           ;incstack = 0
  1611                           ; Regs used in _Lcd_Write_String: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1612                           ;Lcd_Write_String@a stored from wreg
  1613     018D  0094               	movwf	Lcd_Write_String@a
  1614                           
  1615                           ;lcd.c: 111: void Lcd_Write_String(char *a);lcd.c: 112: {;lcd.c: 113:  int i;;lcd.c: 114
      +                          :  for(i=0;a[i]!='\0';i++)
  1616     018E  0192               	clrf	Lcd_Write_String@i
  1617     018F  0193               	clrf	Lcd_Write_String@i+1
  1618     0190                     l1122:
  1619     0190  0812               	movf	Lcd_Write_String@i,w
  1620     0191  0714               	addwf	Lcd_Write_String@a,w
  1621     0192  0091               	movwf	??_Lcd_Write_String
  1622     0193  0811               	movf	??_Lcd_Write_String,w
  1623     0194  0084               	movwf	4
  1624     0195  1383               	bcf	3,7	;select IRP bank0
  1625     0196  0800               	movf	0,w
  1626     0197  1903               	btfsc	3,2
  1627     0198  0008               	return
  1628                           
  1629                           ;lcd.c: 115:     {;lcd.c: 116:         Lcd_Write_Char(a[i]);
  1630     0199  0812               	movf	Lcd_Write_String@i,w
  1631     019A  0714               	addwf	Lcd_Write_String@a,w
  1632     019B  0091               	movwf	??_Lcd_Write_String
  1633     019C  0811               	movf	??_Lcd_Write_String,w
  1634     019D  0084               	movwf	4
  1635     019E  0800               	movf	0,w
  1636     019F  21C8               	fcall	_Lcd_Write_Char
  1637                           
  1638                           ;lcd.c: 117:     }
  1639     01A0  3001               	movlw	1
  1640     01A1  0792               	addwf	Lcd_Write_String@i,f
  1641     01A2  1803               	skipnc
  1642     01A3  0A93               	incf	Lcd_Write_String@i+1,f
  1643     01A4  3000               	movlw	0
  1644     01A5  0793               	addwf	Lcd_Write_String@i+1,f
  1645     01A6  2990               	goto	l1122
  1646     01A7                     __end_of_Lcd_Write_String:
  1647                           
  1648                           	psect	text11
  1649     01C8                     __ptext11:	
  1650 ;; *************** function _Lcd_Write_Char *****************
  1651 ;; Defined at:
  1652 ;;		line 94 in file "lcd.c"
  1653 ;; Parameters:    Size  Location     Type
  1654 ;;  a               1    wreg     unsigned char 
  1655 ;; Auto vars:     Size  Location     Type
  1656 ;;  a               1    4[BANK0 ] unsigned char 
  1657 ;;  y               1    3[BANK0 ] unsigned char 
  1658 ;;  temp            1    2[BANK0 ] unsigned char 
  1659 ;; Return value:  Size  Location     Type
  1660 ;;                  1    wreg      void 
  1661 ;; Registers used:
  1662 ;;		wreg, status,2, status,0, pclath, cstack
  1663 ;; Tracked objects:
  1664 ;;		On entry : 100/0
  1665 ;;		On exit  : 100/0
  1666 ;;		Unchanged: 0/0
  1667 ;; Data sizes:     COMMON   BANK0
  1668 ;;      Params:         0       0
  1669 ;;      Locals:         0       3
  1670 ;;      Temps:          0       1
  1671 ;;      Totals:         0       4
  1672 ;;Total ram usage:        4 bytes
  1673 ;; Hardware stack levels used: 1
  1674 ;; Hardware stack levels required when called: 1
  1675 ;; This function calls:
  1676 ;;		_Lcd_Port
  1677 ;; This function is called by:
  1678 ;;		_main
  1679 ;;		_Lcd_Write_String
  1680 ;; This function uses a non-reentrant model
  1681 ;;
  1682                           
  1683     01C8                     _Lcd_Write_Char:	
  1684                           ;psect for function _Lcd_Write_Char
  1685                           
  1686                           
  1687                           ;incstack = 0
  1688                           ; Regs used in _Lcd_Write_Char: [wreg+status,2+status,0+pclath+cstack]
  1689                           ;Lcd_Write_Char@a stored from wreg
  1690     01C8  0090               	movwf	Lcd_Write_Char@a
  1691                           
  1692                           ;lcd.c: 94: void Lcd_Write_Char(char a);lcd.c: 95: {;lcd.c: 96:    char temp,y;;lcd.c: 9
      +                          7:    temp = a&0x0F;
  1693     01C9  0810               	movf	Lcd_Write_Char@a,w
  1694     01CA  390F               	andlw	15
  1695     01CB  008E               	movwf	Lcd_Write_Char@temp
  1696                           
  1697                           ;lcd.c: 98:    y = a&0xF0;
  1698     01CC  0810               	movf	Lcd_Write_Char@a,w
  1699     01CD  39F0               	andlw	240
  1700     01CE  008F               	movwf	Lcd_Write_Char@y
  1701                           
  1702                           ;lcd.c: 99:    RA0 = 1;
  1703     01CF  1405               	bsf	5,0	;volatile
  1704                           
  1705                           ;lcd.c: 100:    Lcd_Port(y>>4);
  1706     01D0  080F               	movf	Lcd_Write_Char@y,w
  1707     01D1  008D               	movwf	??_Lcd_Write_Char
  1708     01D2  3004               	movlw	4
  1709     01D3                     u385:
  1710     01D3  1003               	clrc
  1711     01D4  0C8D               	rrf	??_Lcd_Write_Char,f
  1712     01D5  3EFF               	addlw	-1
  1713     01D6  1D03               	skipz
  1714     01D7  29D3               	goto	u385
  1715     01D8  080D               	movf	??_Lcd_Write_Char,w
  1716     01D9  2177               	fcall	_Lcd_Port
  1717                           
  1718                           ;lcd.c: 101:    RA2 = 1;
  1719     01DA  1505               	bsf	5,2	;volatile
  1720                           
  1721                           ;lcd.c: 102:    _delay((unsigned long)((40)*(4000000/4000000.0)));
  1722     01DB  300D               	movlw	13
  1723     01DC  008D               	movwf	??_Lcd_Write_Char
  1724     01DD                     u747:
  1725     01DD  0B8D               	decfsz	??_Lcd_Write_Char,f
  1726     01DE  29DD               	goto	u747
  1727                           
  1728                           ;lcd.c: 103:    RA2 = 0;
  1729     01DF  1283               	bcf	3,5	;RP0=0, select bank0
  1730     01E0  1105               	bcf	5,2	;volatile
  1731                           
  1732                           ;lcd.c: 104:    Lcd_Port(temp);
  1733     01E1  080E               	movf	Lcd_Write_Char@temp,w
  1734     01E2  2177               	fcall	_Lcd_Port
  1735                           
  1736                           ;lcd.c: 105:    RA2 = 1;
  1737     01E3  1505               	bsf	5,2	;volatile
  1738                           
  1739                           ;lcd.c: 106:    _delay((unsigned long)((40)*(4000000/4000000.0)));
  1740     01E4  300D               	movlw	13
  1741     01E5  008D               	movwf	??_Lcd_Write_Char
  1742     01E6                     u757:
  1743     01E6  0B8D               	decfsz	??_Lcd_Write_Char,f
  1744     01E7  29E6               	goto	u757
  1745                           
  1746                           ;lcd.c: 107:    RA2 = 0;
  1747     01E8  1283               	bcf	3,5	;RP0=0, select bank0
  1748     01E9  1105               	bcf	5,2	;volatile
  1749     01EA  0008               	return
  1750     01EB                     __end_of_Lcd_Write_Char:
  1751                           
  1752                           	psect	text12
  1753     01EB                     __ptext12:	
  1754 ;; *************** function _Lcd_Init *****************
  1755 ;; Defined at:
  1756 ;;		line 74 in file "lcd.c"
  1757 ;; Parameters:    Size  Location     Type
  1758 ;;		None
  1759 ;; Auto vars:     Size  Location     Type
  1760 ;;		None
  1761 ;; Return value:  Size  Location     Type
  1762 ;;                  1    wreg      void 
  1763 ;; Registers used:
  1764 ;;		wreg, status,2, status,0, pclath, cstack
  1765 ;; Tracked objects:
  1766 ;;		On entry : B00/0
  1767 ;;		On exit  : 100/0
  1768 ;;		Unchanged: 0/0
  1769 ;; Data sizes:     COMMON   BANK0
  1770 ;;      Params:         0       0
  1771 ;;      Locals:         0       0
  1772 ;;      Temps:          0       2
  1773 ;;      Totals:         0       2
  1774 ;;Total ram usage:        2 bytes
  1775 ;; Hardware stack levels used: 1
  1776 ;; Hardware stack levels required when called: 2
  1777 ;; This function calls:
  1778 ;;		_Lcd_Cmd
  1779 ;;		_Lcd_Port
  1780 ;; This function is called by:
  1781 ;;		_main
  1782 ;; This function uses a non-reentrant model
  1783 ;;
  1784                           
  1785     01EB                     _Lcd_Init:	
  1786                           ;psect for function _Lcd_Init
  1787                           
  1788                           
  1789                           ;lcd.c: 76:   Lcd_Port(0x00);
  1790                           
  1791                           ;incstack = 0
  1792                           ; Regs used in _Lcd_Init: [wreg+status,2+status,0+pclath+cstack]
  1793     01EB  3000               	movlw	0
  1794     01EC  2177               	fcall	_Lcd_Port
  1795                           
  1796                           ;lcd.c: 77:    _delay((unsigned long)((20)*(4000000/4000.0)));
  1797     01ED  301A               	movlw	26
  1798     01EE  0091               	movwf	??_Lcd_Init+1
  1799     01EF  30F8               	movlw	248
  1800     01F0  0090               	movwf	??_Lcd_Init
  1801     01F1                     u767:
  1802     01F1  0B90               	decfsz	??_Lcd_Init,f
  1803     01F2  29F1               	goto	u767
  1804     01F3  0B91               	decfsz	??_Lcd_Init+1,f
  1805     01F4  29F1               	goto	u767
  1806     01F5  0000               	nop
  1807                           
  1808                           ;lcd.c: 78:   Lcd_Cmd(0x03);
  1809     01F6  3003               	movlw	3
  1810     01F7  2150               	fcall	_Lcd_Cmd
  1811                           
  1812                           ;lcd.c: 79:  _delay((unsigned long)((5)*(4000000/4000.0)));
  1813     01F8  3007               	movlw	7
  1814     01F9  0091               	movwf	??_Lcd_Init+1
  1815     01FA  307D               	movlw	125
  1816     01FB  0090               	movwf	??_Lcd_Init
  1817     01FC                     u777:
  1818     01FC  0B90               	decfsz	??_Lcd_Init,f
  1819     01FD  29FC               	goto	u777
  1820     01FE  0B91               	decfsz	??_Lcd_Init+1,f
  1821     01FF  29FC               	goto	u777
  1822                           
  1823                           ;lcd.c: 80:   Lcd_Cmd(0x03);
  1824     0200  3003               	movlw	3
  1825     0201  2150               	fcall	_Lcd_Cmd
  1826                           
  1827                           ;lcd.c: 81:  _delay((unsigned long)((11)*(4000000/4000.0)));
  1828     0202  300F               	movlw	15
  1829     0203  0091               	movwf	??_Lcd_Init+1
  1830     0204  3047               	movlw	71
  1831     0205  0090               	movwf	??_Lcd_Init
  1832     0206                     u787:
  1833     0206  0B90               	decfsz	??_Lcd_Init,f
  1834     0207  2A06               	goto	u787
  1835     0208  0B91               	decfsz	??_Lcd_Init+1,f
  1836     0209  2A06               	goto	u787
  1837     020A  2A0B               	nop2
  1838                           
  1839                           ;lcd.c: 82:   Lcd_Cmd(0x03);
  1840     020B  3003               	movlw	3
  1841     020C  2150               	fcall	_Lcd_Cmd
  1842                           
  1843                           ;lcd.c: 84:   Lcd_Cmd(0x02);
  1844     020D  3002               	movlw	2
  1845     020E  2150               	fcall	_Lcd_Cmd
  1846                           
  1847                           ;lcd.c: 85:   Lcd_Cmd(0x02);
  1848     020F  3002               	movlw	2
  1849     0210  2150               	fcall	_Lcd_Cmd
  1850                           
  1851                           ;lcd.c: 86:   Lcd_Cmd(0x08);
  1852     0211  3008               	movlw	8
  1853     0212  2150               	fcall	_Lcd_Cmd
  1854                           
  1855                           ;lcd.c: 87:   Lcd_Cmd(0x00);
  1856     0213  3000               	movlw	0
  1857     0214  2150               	fcall	_Lcd_Cmd
  1858                           
  1859                           ;lcd.c: 88:   Lcd_Cmd(0x0C);
  1860     0215  300C               	movlw	12
  1861     0216  2150               	fcall	_Lcd_Cmd
  1862                           
  1863                           ;lcd.c: 89:   Lcd_Cmd(0x00);
  1864     0217  3000               	movlw	0
  1865     0218  2150               	fcall	_Lcd_Cmd
  1866                           
  1867                           ;lcd.c: 90:   Lcd_Cmd(0x06);
  1868     0219  3006               	movlw	6
  1869     021A  2150               	fcall	_Lcd_Cmd
  1870     021B  0008               	return
  1871     021C                     __end_of_Lcd_Init:
  1872                           
  1873                           	psect	text13
  1874     0150                     __ptext13:	
  1875 ;; *************** function _Lcd_Cmd *****************
  1876 ;; Defined at:
  1877 ;;		line 31 in file "lcd.c"
  1878 ;; Parameters:    Size  Location     Type
  1879 ;;  a               1    wreg     unsigned char 
  1880 ;; Auto vars:     Size  Location     Type
  1881 ;;  a               1    3[BANK0 ] unsigned char 
  1882 ;; Return value:  Size  Location     Type
  1883 ;;                  1    wreg      void 
  1884 ;; Registers used:
  1885 ;;		wreg, status,2, status,0, pclath, cstack
  1886 ;; Tracked objects:
  1887 ;;		On entry : 0/0
  1888 ;;		On exit  : 100/0
  1889 ;;		Unchanged: 0/0
  1890 ;; Data sizes:     COMMON   BANK0
  1891 ;;      Params:         0       0
  1892 ;;      Locals:         0       1
  1893 ;;      Temps:          0       2
  1894 ;;      Totals:         0       3
  1895 ;;Total ram usage:        3 bytes
  1896 ;; Hardware stack levels used: 1
  1897 ;; Hardware stack levels required when called: 1
  1898 ;; This function calls:
  1899 ;;		_Lcd_Port
  1900 ;; This function is called by:
  1901 ;;		_Lcd_Clear
  1902 ;;		_Lcd_Set_Cursor
  1903 ;;		_Lcd_Init
  1904 ;; This function uses a non-reentrant model
  1905 ;;
  1906                           
  1907     0150                     _Lcd_Cmd:	
  1908                           ;psect for function _Lcd_Cmd
  1909                           
  1910                           
  1911                           ;incstack = 0
  1912                           ; Regs used in _Lcd_Cmd: [wreg+status,2+status,0+pclath+cstack]
  1913                           ;Lcd_Cmd@a stored from wreg
  1914     0150  1283               	bcf	3,5	;RP0=0, select bank0
  1915     0151  008F               	movwf	Lcd_Cmd@a
  1916                           
  1917                           ;lcd.c: 31: void Lcd_Cmd(char a);lcd.c: 32: {;lcd.c: 34:     RA0 = 0;
  1918     0152  1005               	bcf	5,0	;volatile
  1919                           
  1920                           ;lcd.c: 35:  Lcd_Port(a);
  1921     0153  080F               	movf	Lcd_Cmd@a,w
  1922     0154  2177               	fcall	_Lcd_Port
  1923                           
  1924                           ;lcd.c: 38:  RA2 = 1;
  1925     0155  1505               	bsf	5,2	;volatile
  1926                           
  1927                           ;lcd.c: 39:     _delay((unsigned long)((4)*(4000000/4000.0)));
  1928     0156  3006               	movlw	6
  1929     0157  008E               	movwf	??_Lcd_Cmd+1
  1930     0158  3030               	movlw	48
  1931     0159  008D               	movwf	??_Lcd_Cmd
  1932     015A                     u797:
  1933     015A  0B8D               	decfsz	??_Lcd_Cmd,f
  1934     015B  295A               	goto	u797
  1935     015C  0B8E               	decfsz	??_Lcd_Cmd+1,f
  1936     015D  295A               	goto	u797
  1937     015E  0000               	nop
  1938                           
  1939                           ;lcd.c: 40:     RA2 = 0;
  1940     015F  1283               	bcf	3,5	;RP0=0, select bank0
  1941     0160  1105               	bcf	5,2	;volatile
  1942     0161  0008               	return
  1943     0162                     __end_of_Lcd_Cmd:
  1944                           
  1945                           	psect	text14
  1946     0177                     __ptext14:	
  1947 ;; *************** function _Lcd_Port *****************
  1948 ;; Defined at:
  1949 ;;		line 7 in file "lcd.c"
  1950 ;; Parameters:    Size  Location     Type
  1951 ;;  a               1    wreg     unsigned char 
  1952 ;; Auto vars:     Size  Location     Type
  1953 ;;  a               1    0[BANK0 ] unsigned char 
  1954 ;; Return value:  Size  Location     Type
  1955 ;;                  1    wreg      void 
  1956 ;; Registers used:
  1957 ;;		wreg
  1958 ;; Tracked objects:
  1959 ;;		On entry : 100/0
  1960 ;;		On exit  : 100/0
  1961 ;;		Unchanged: 0/0
  1962 ;; Data sizes:     COMMON   BANK0
  1963 ;;      Params:         0       0
  1964 ;;      Locals:         0       1
  1965 ;;      Temps:          0       0
  1966 ;;      Totals:         0       1
  1967 ;;Total ram usage:        1 bytes
  1968 ;; Hardware stack levels used: 1
  1969 ;; This function calls:
  1970 ;;		Nothing
  1971 ;; This function is called by:
  1972 ;;		_Lcd_Cmd
  1973 ;;		_Lcd_Init
  1974 ;;		_Lcd_Write_Char
  1975 ;; This function uses a non-reentrant model
  1976 ;;
  1977                           
  1978     0177                     _Lcd_Port:	
  1979                           ;psect for function _Lcd_Port
  1980                           
  1981                           
  1982                           ;incstack = 0
  1983                           ; Regs used in _Lcd_Port: [wreg]
  1984                           ;Lcd_Port@a stored from wreg
  1985     0177  008C               	movwf	Lcd_Port@a
  1986                           
  1987                           ;lcd.c: 7: void Lcd_Port(char a);lcd.c: 8: {;lcd.c: 9:  if(a & 1)
  1988     0178  1C0C               	btfss	Lcd_Port@a,0
  1989     0179  297C               	goto	l62
  1990                           
  1991                           ;lcd.c: 10:   RB0 = 1;
  1992     017A  1406               	bsf	6,0	;volatile
  1993     017B  297D               	goto	l63
  1994     017C                     l62:	
  1995                           ;lcd.c: 11:  else
  1996                           
  1997                           
  1998                           ;lcd.c: 12:   RB0 = 0;
  1999     017C  1006               	bcf	6,0	;volatile
  2000     017D                     l63:
  2001                           
  2002                           ;lcd.c: 14:  if(a & 2)
  2003     017D  1C8C               	btfss	Lcd_Port@a,1
  2004     017E  2981               	goto	l64
  2005                           
  2006                           ;lcd.c: 15:   RB1 = 1;
  2007     017F  1486               	bsf	6,1	;volatile
  2008     0180  2982               	goto	l65
  2009     0181                     l64:	
  2010                           ;lcd.c: 16:  else
  2011                           
  2012                           
  2013                           ;lcd.c: 17:   RB1 = 0;
  2014     0181  1086               	bcf	6,1	;volatile
  2015     0182                     l65:
  2016                           
  2017                           ;lcd.c: 19:  if(a & 4)
  2018     0182  1D0C               	btfss	Lcd_Port@a,2
  2019     0183  2986               	goto	l66
  2020                           
  2021                           ;lcd.c: 20:   RB2 = 1;
  2022     0184  1506               	bsf	6,2	;volatile
  2023     0185  2987               	goto	l67
  2024     0186                     l66:	
  2025                           ;lcd.c: 21:  else
  2026                           
  2027                           
  2028                           ;lcd.c: 22:   RB2 = 0;
  2029     0186  1106               	bcf	6,2	;volatile
  2030     0187                     l67:
  2031                           
  2032                           ;lcd.c: 24:  if(a & 8)
  2033     0187  1D8C               	btfss	Lcd_Port@a,3
  2034     0188  298B               	goto	l68
  2035                           
  2036                           ;lcd.c: 25:   RB3 = 1;
  2037     0189  1586               	bsf	6,3	;volatile
  2038     018A  0008               	return
  2039     018B                     l68:	
  2040                           ;lcd.c: 26:  else
  2041                           
  2042                           
  2043                           ;lcd.c: 27:   RB3 = 0;
  2044     018B  1186               	bcf	6,3	;volatile
  2045     018C  0008               	return
  2046     018D                     __end_of_Lcd_Port:
  2047     004E                     btemp	set	78	;btemp
  2048     004E                     wtemp0	set	78
  2049                           
  2050                           	psect	config
  2051                           
  2052                           ;Config register CONFIG @ 0x2007
  2053                           ;	Oscillator Selection bits
  2054                           ;	FOSC = XT, XT oscillator
  2055                           ;	Watchdog Timer
  2056                           ;	WDTE = OFF, WDT disabled
  2057                           ;	Power-up Timer Enable bit
  2058                           ;	PWRTE = ON, Power-up Timer is enabled
  2059                           ;	Code Protection bit
  2060                           ;	CP = OFF, Code protection disabled
  2061     2007                     	org	8199
  2062     2007  3FF1               	dw	16369

Data Sizes:
    Strings     0
    Constant    0
    Data        2
    BSS         6
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON            0      0       0
    BANK0            66     55      63

Pointer List with Targets:

    utoa@buf	PTR unsigned char  size(1) Largest target is 16
		 -> Lcd_Write_Int@temp(BANK0[16]), 

    sp__itoa	PTR unsigned char  size(1) Largest target is 0

    sp__utoa	PTR unsigned char  size(1) Largest target is 16
		 -> Lcd_Write_Int@temp(BANK0[16]), 

    Lcd_Write_String@a	PTR unsigned char  size(1) Largest target is 16
		 -> Lcd_Write_Int@temp(BANK0[16]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_Lcd_Write_Int
    _welcomeMessage->_Lcd_Set_Cursor
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Clear->_Lcd_Cmd
    ___wmul->___lwmod
    _Lcd_Write_Int->_utoa
    _utoa->___lwdiv
    ___lwdiv->___wmul
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Init->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                11    11      0    7285
                                             44 BANK0     11    11      0
                          _Lcd_Clear
                           _Lcd_Init
                     _Lcd_Set_Cursor
                     _Lcd_Write_Char
                      _Lcd_Write_Int
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _readADC
                     _welcomeMessage
 ---------------------------------------------------------------------------------
 (1) _welcomeMessage                                       3     3      0     870
                                             10 BANK0      3     3      0
                          _Lcd_Clear
                     _Lcd_Set_Cursor
 ---------------------------------------------------------------------------------
 (2) _Lcd_Set_Cursor                                       6     5      1     760
                                              4 BANK0      6     5      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Clear                                            2     2      0     110
                                              4 BANK0      2     2      0
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _readADC                                              8     6      2     208
                                              0 BANK0      8     6      2
 ---------------------------------------------------------------------------------
 (1) ___wmul                                               6     2      4     548
                                              5 BANK0      6     2      4
                            ___lwmod (ARG)
 ---------------------------------------------------------------------------------
 (1) _Lcd_Write_Int                                       18    16      2    2784
                                             26 BANK0     18    16      2
                   _Lcd_Write_String
                               _utoa
 ---------------------------------------------------------------------------------
 (2) _utoa                                                 8     4      4    2183
                                             18 BANK0      8     4      4
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (1) ___lwmod                                              5     1      4     615
                                              0 BANK0      5     1      4
 ---------------------------------------------------------------------------------
 (1) ___lwdiv                                              7     3      4     922
                                             11 BANK0      7     3      4
                            ___lwmod (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_String                                     4     4      0     301
                                              5 BANK0      4     4      0
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (3) _Lcd_Write_Char                                       4     4      0     178
                                              1 BANK0      4     4      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             2     2      0     198
                                              4 BANK0      2     2      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (3) _Lcd_Cmd                                              3     3      0     110
                                              1 BANK0      3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (4) _Lcd_Port                                             1     1      0      88
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Lcd_Clear
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Init
     _Lcd_Cmd
     _Lcd_Port
   _Lcd_Set_Cursor
     _Lcd_Cmd
   _Lcd_Write_Char
     _Lcd_Port
   _Lcd_Write_Int
     _Lcd_Write_String
       _Lcd_Write_Char
     _utoa
       ___lwdiv
         ___lwmod (ARG)
         ___wmul (ARG)
           ___lwmod (ARG)
       ___lwmod
   ___lwdiv
   ___lwmod
   ___wmul
   _readADC
   _welcomeMessage
     _Lcd_Clear
     _Lcd_Set_Cursor

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               42     37      3F       3       95.5%
BITBANK0            42      0       0       5        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               0      0       0       1        0.0%
BITCOMMON            0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      3F       6        0.0%
ABS                  0      0      3F       4        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA              40      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.41 build 20230208172133 
Symbol Table                                                                                   Tue Apr 25 14:44:14 2023

                      l62 017C                        l63 017D                        l64 0181  
                      l65 0182                        l66 0186                        l67 0187  
                      l68 018B       ___wmul@multiplicand 0013                       l206 01B1  
                     l666 0348                       _RA0 0028                       _RA1 0029  
                     _RB0 0030                       _RA2 002A                       _RB1 0031  
                     _RB2 0032                       _RB3 0033                       _RB5 0035  
                     _RB6 0036                       _RB7 0037                       u405 028B  
                     u425 0297                       u505 023F                       u435 02A3  
                     u445 02AD                       u535 0258                       u385 01D3  
                     u475 0225                       u707 02C2                       u555 0271  
                     u645 01B2                       u717 02C8                       u495 0236  
                     u655 01B9                       u727 02D7                       u737 02E9  
                     u747 01DD                       u757 01E6                       u677 03EC  
                     u767 01F1                       u687 016E                       u777 01FC  
                     u697 014A                       u787 0206                       u797 015A  
                     fsr0 0004                       indf 0000                      l1122 0190  
                    l1106 0267                      l1204 02E4                      l1062 02AC  
                    l1054 0288                      l1126 030D                      l1056 0296  
                    l1080 0230                      l1136 0328                      l1066 02B7  
                    l1226 01A9                      l1084 023E                      l1252 0366  
                    l1078 0222                      l1088 0249                      l1194 02D5  
                    l1178 02C0         ?_Lcd_Write_String 000C                      _main 035C  
                    btemp 004E                      _utoa 0308                      start 0000  
      ??_Lcd_Write_String 0011           __end_of_Lcd_Cmd 0162                     ?_main 000C  
                   ?_utoa 001E           __end_of___lwdiv 02BC           __end_of___lwmod 024E  
                   _TRISA 0085                     _TRISB 0086               readADC@bits 0012  
         __end_of_readADC 0308               readADC@volt 0010                     utoa@c 0024  
                   utoa@v 0022                     status 0003                     wtemp0 004E  
        __end_of_Lcd_Init 021C          __end_of_Lcd_Port 018D           __initialization 03F4  
            __end_of_main 03F4              __end_of_utoa 035C                    ??_main 0038  
                  ??_utoa 0000                 ??_Lcd_Cmd 000D          ??_welcomeMessage 0016  
                  _adcVal 0047                    ___wmul 01A7                 ??___lwdiv 0000  
               ??___lwmod 0000                    _lowerV 0043                    main@d1 003B  
                  main@d2 003D                    main@d3 003F                    _upperV 0049  
   __end_of_Lcd_Write_Int 0142                 ??_readADC 000E           Lcd_Set_Cursor@a 0012  
         Lcd_Set_Cursor@b 0010           Lcd_Set_Cursor@y 0014           Lcd_Set_Cursor@z 0013  
 __end_of__initialization 03FE         __end_of_Lcd_Clear 0150            __pcstackCOMMON 0000  
            __pidataBANK0 0133            _Lcd_Set_Cursor 024E                 ?_Lcd_Init 000C  
               ?_Lcd_Port 000C            Lcd_Write_Int@a 0026                __pbssBANK0 0043  
              __pmaintext 035C                   ?___wmul 0011    __end_of_Lcd_Set_Cursor 0280  
              ??_Lcd_Init 0010                ??_Lcd_Port 0000            _Lcd_Write_Char 01C8  
                 _Lcd_Cmd 0150                   ___lwdiv 0280                   ___lwmod 021C  
           readADC@rxData 0013           ?_Lcd_Set_Cursor 0010                   __ptext1 0162  
                 __ptext2 024E                   __ptext3 0142                   __ptext4 02BC  
                 __ptext5 01A7                   __ptext6 0135                   __ptext7 0308  
                 __ptext8 021C                   __ptext9 0280                   _readADC 02BC  
                 _voltage 0045    __end_of_Lcd_Write_Char 01EB      end_of_initialization 03FE  
               Lcd_Port@a 000C                   utoa@buf 0025         Lcd_Write_Int@temp 0028  
                 utoa@val 001E           ?_Lcd_Write_Char 000C         Lcd_Write_String@a 0014  
       Lcd_Write_String@i 0012                 _Lcd_Clear 0142            __end_of___wmul 01C8  
        _Lcd_Write_String 018D       start_initialization 03F4                ?_Lcd_Clear 000C  
                ??___wmul 0000               __pdataBANK0 0049           Lcd_Write_Char@a 0010  
         Lcd_Write_Char@y 000F                 ___latbits 0000             __pcstackBANK0 000C  
                ?_Lcd_Cmd 000C          ___lwdiv@dividend 0019          ??_Lcd_Set_Cursor 0011  
                ?___lwdiv 0017                  ?___lwmod 000C                  ?_readADC 000C  
           _Lcd_Write_Int 0135          ___lwdiv@quotient 001B            ___wmul@product 0015  
                Lcd_Cmd@a 000F               ??_Lcd_Clear 0010         ___wmul@multiplier 0011  
          ?_Lcd_Write_Int 0026          ??_Lcd_Write_Char 000D                  _Lcd_Init 01EB  
                _Lcd_Port 0177  __end_of_Lcd_Write_String 01A7            _welcomeMessage 0162  
                _main$752 0041           ___lwdiv@divisor 0017           ___lwdiv@counter 001D  
                __ptext10 018D                  __ptext11 01C8                  __ptext12 01EB  
                __ptext13 0150                  __ptext14 0177           ??_Lcd_Write_Int 0000  
  __end_of_welcomeMessage 0177        Lcd_Write_Char@temp 000E          ___lwmod@dividend 000E  
      Lcd_Set_Cursor@temp 0015           ?_welcomeMessage 000C                  utoa@base 0020  
         ___lwmod@divisor 000C           ___lwmod@counter 0010  

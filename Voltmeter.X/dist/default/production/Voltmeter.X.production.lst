

Microchip MPLAB XC8 Assembler V2.41 build 20230208172133 
                                                                                               Tue May 02 16:09:36 2023

Microchip MPLAB XC8 C Compiler v2.41 (Free license) build 20230208172133 Og9 
     1                           	processor	16F84A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2,noexec
     5                           	psect	strings,global,class=STRING,delta=2,noexec
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    11                           	psect	maintext,global,class=CODE,split=1,delta=2
    12                           	psect	text1,local,class=CODE,merge=1,delta=2
    13                           	psect	text2,local,class=CODE,merge=1,delta=2,group=2
    14                           	psect	text3,local,class=CODE,merge=1,delta=2
    15                           	psect	text4,local,class=CODE,merge=1,delta=2
    16                           	psect	text5,local,class=CODE,merge=1,delta=2
    17                           	psect	text6,local,class=CODE,merge=1,delta=2
    18                           	psect	text7,local,class=CODE,merge=1,delta=2
    19                           	psect	text8,local,class=CODE,merge=1,delta=2
    20                           	psect	text9,local,class=CODE,merge=1,delta=2,group=1
    21                           	psect	text10,local,class=CODE,merge=1,delta=2
    22                           	psect	text11,local,class=CODE,merge=1,delta=2,group=2
    23                           	psect	text12,local,class=CODE,merge=1,delta=2,group=1
    24                           	psect	text13,local,class=CODE,merge=1,delta=2,group=1
    25                           	psect	text14,local,class=CODE,merge=1,delta=2
    26                           	psect	text15,local,class=CODE,merge=1,delta=2
    27                           	psect	text16,local,class=CODE,merge=1,delta=2
    28                           	psect	text17,local,class=CODE,merge=1,delta=2
    29                           	psect	text18,local,class=CODE,merge=1,delta=2
    30                           	psect	text19,local,class=CODE,merge=1,delta=2
    31                           	psect	intentry,global,class=CODE,delta=2
    32                           	psect	text20,local,class=CODE,merge=1,delta=2
    33                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    34                           	dabs	1,0x4E,2
    35     0000                     
    36                           ; Version 2.20
    37                           ; Generated 12/02/2020 GMT
    38                           ; 
    39                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    40                           ; All rights reserved.
    41                           ; 
    42                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    43                           ; 
    44                           ; Redistribution and use in source and binary forms, with or without modification, are
    45                           ; permitted provided that the following conditions are met:
    46                           ; 
    47                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    48                           ;        conditions and the following disclaimer.
    49                           ; 
    50                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    51                           ;        of conditions and the following disclaimer in the documentation and/or other
    52                           ;        materials provided with the distribution.
    53                           ; 
    54                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    55                           ;        software without specific prior written permission.
    56                           ; 
    57                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    58                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    59                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    60                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    61                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    62                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    63                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    64                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    65                           ; 
    66                           ; 
    67                           ; Code-generator required, PIC16F84A Definitions
    68                           ; 
    69                           ; SFR Addresses
    70     0000                     	;# 
    71     0001                     	;# 
    72     0002                     	;# 
    73     0003                     	;# 
    74     0004                     	;# 
    75     0005                     	;# 
    76     0006                     	;# 
    77     0008                     	;# 
    78     0009                     	;# 
    79     000A                     	;# 
    80     000B                     	;# 
    81     0081                     	;# 
    82     0085                     	;# 
    83     0086                     	;# 
    84     0088                     	;# 
    85     0089                     	;# 
    86     0000                     	;# 
    87     0001                     	;# 
    88     0002                     	;# 
    89     0003                     	;# 
    90     0004                     	;# 
    91     0005                     	;# 
    92     0006                     	;# 
    93     0008                     	;# 
    94     0009                     	;# 
    95     000A                     	;# 
    96     000B                     	;# 
    97     0081                     	;# 
    98     0085                     	;# 
    99     0086                     	;# 
   100     0088                     	;# 
   101     0089                     	;# 
   102     0000                     	;# 
   103     0001                     	;# 
   104     0002                     	;# 
   105     0003                     	;# 
   106     0004                     	;# 
   107     0005                     	;# 
   108     0006                     	;# 
   109     0008                     	;# 
   110     0009                     	;# 
   111     000A                     	;# 
   112     000B                     	;# 
   113     0081                     	;# 
   114     0085                     	;# 
   115     0086                     	;# 
   116     0088                     	;# 
   117     0089                     	;# 
   118     0000                     	;# 
   119     0001                     	;# 
   120     0002                     	;# 
   121     0003                     	;# 
   122     0004                     	;# 
   123     0005                     	;# 
   124     0006                     	;# 
   125     0008                     	;# 
   126     0009                     	;# 
   127     000A                     	;# 
   128     000B                     	;# 
   129     0081                     	;# 
   130     0085                     	;# 
   131     0086                     	;# 
   132     0088                     	;# 
   133     0089                     	;# 
   134                           
   135                           	psect	idataBANK0
   136     03E6                     __pidataBANK0:
   137                           
   138                           ;initializer for welcomeMessage@F331
   139     03E6  3457               	retlw	87
   140     03E7  3465               	retlw	101
   141     03E8  346C               	retlw	108
   142     03E9  3463               	retlw	99
   143     03EA  346F               	retlw	111
   144     03EB  346D               	retlw	109
   145     03EC  3465               	retlw	101
   146     03ED  3400               	retlw	0
   147     000B                     _INTCONbits	set	11
   148     002B                     _RA3	set	43
   149     0036                     _RB6	set	54
   150     002A                     _RA2	set	42
   151     0028                     _RA0	set	40
   152     0034                     _RB4	set	52
   153     0033                     _RB3	set	51
   154     0032                     _RB2	set	50
   155     0031                     _RB1	set	49
   156     0029                     _RA1	set	41
   157     0035                     _RB5	set	53
   158     0037                     _RB7	set	55
   159     0081                     _OPTION_REGbits	set	129
   160     0085                     _TRISA	set	133
   161     0086                     _TRISB	set	134
   162                           
   163                           	psect	strings
   164     03C6                     __pstrings:
   165     03C6                     stringtab:
   166     03C6                     __stringtab:
   167     03C6                     stringcode:	
   168                           ;	String table - string pointers are 1 byte each
   169                           
   170     03C6                     stringdir:
   171     03C6  3003               	movlw	high stringdir
   172     03C7  008A               	movwf	10
   173     03C8  0804               	movf	4,w
   174     03C9  0A84               	incf	4,f
   175     03CA  0782               	addwf	2,f
   176     03CB                     __stringbase:
   177     03CB  3400               	retlw	0
   178     03CC                     __end_of__stringtab:
   179     03CC                     STR_1:
   180     03CC  3430               	retlw	48	;'0'
   181     03CD  342D               	retlw	45	;'-'
   182     03CE  3435               	retlw	53	;'5'
   183     03CF  3456               	retlw	86	;'V'
   184     03D0  3400               	retlw	0
   185                           
   186                           	psect	cinit
   187     000C                     start_initialization:	
   188                           ; #config settings
   189                           
   190     000C                     __initialization:
   191                           
   192                           ; Initialize objects allocated to BANK0
   193     000C  23E6               	fcall	__pidataBANK0	;fetch initializer
   194     000D  00BE               	movwf	__pdataBANK0& (0+127)
   195     000E  23E7               	fcall	__pidataBANK0+1	;fetch initializer
   196     000F  00BF               	movwf	(__pdataBANK0+1)& (0+127)
   197     0010  23E8               	fcall	__pidataBANK0+2	;fetch initializer
   198     0011  00C0               	movwf	(__pdataBANK0+2)& (0+127)
   199     0012  23E9               	fcall	__pidataBANK0+3	;fetch initializer
   200     0013  00C1               	movwf	(__pdataBANK0+3)& (0+127)
   201     0014  23EA               	fcall	__pidataBANK0+4	;fetch initializer
   202     0015  00C2               	movwf	(__pdataBANK0+4)& (0+127)
   203     0016  23EB               	fcall	__pidataBANK0+5	;fetch initializer
   204     0017  00C3               	movwf	(__pdataBANK0+5)& (0+127)
   205     0018  23EC               	fcall	__pidataBANK0+6	;fetch initializer
   206     0019  00C4               	movwf	(__pdataBANK0+6)& (0+127)
   207     001A  23ED               	fcall	__pidataBANK0+7	;fetch initializer
   208     001B  00C5               	movwf	(__pdataBANK0+7)& (0+127)
   209                           
   210                           ; Clear objects allocated to BANK0
   211     001C  01C6               	clrf	__pbssBANK0& (0+127)
   212     001D  01C7               	clrf	(__pbssBANK0+1)& (0+127)
   213     001E  01C8               	clrf	(__pbssBANK0+2)& (0+127)
   214     001F  01C9               	clrf	(__pbssBANK0+3)& (0+127)
   215     0020                     end_of_initialization:	
   216                           ;End of C runtime variable initialization code
   217                           
   218     0020                     __end_of__initialization:
   219     0020  0183               	clrf	3
   220     0021  2822               	ljmp	_main	;jump to C main() function
   221                           
   222                           	psect	bssBANK0
   223     0046                     __pbssBANK0:
   224     0046                     _toggleHold:
   225     0046                     	ds	2
   226     0048                     _adcVal:
   227     0048                     	ds	2
   228                           
   229                           	psect	dataBANK0
   230     003E                     __pdataBANK0:
   231     003E                     welcomeMessage@F331:
   232     003E                     	ds	8
   233                           
   234                           	psect	cstackCOMMON
   235     0000                     __pcstackCOMMON:
   236     0000                     ??_strcpy:
   237     0000                     ??_Lcd_Write_Int:	
   238                           ; 1 bytes @ 0x0
   239                           
   240     0000                     ??_utoa:	
   241                           ; 1 bytes @ 0x0
   242                           
   243     0000                     ??_delay_1000ms:	
   244                           ; 1 bytes @ 0x0
   245                           
   246     0000                     ??_main:	
   247                           ; 1 bytes @ 0x0
   248                           
   249     0000                     ??_Lcd_Port:	
   250                           ; 1 bytes @ 0x0
   251                           
   252     0000                     ??___wmul:	
   253                           ; 1 bytes @ 0x0
   254                           
   255     0000                     ??___lwdiv:	
   256                           ; 1 bytes @ 0x0
   257                           
   258     0000                     ??___lwmod:	
   259                           ; 1 bytes @ 0x0
   260                           
   261                           
   262                           	psect	cstackBANK0
   263     000C                     __pcstackBANK0:	
   264                           ; 1 bytes @ 0x0
   265                           
   266     000C                     ?_Lcd_Clear:
   267     000C                     ?_Lcd_Write_String:	
   268                           ; 1 bytes @ 0x0
   269                           
   270     000C                     ?_Lcd_Init:	
   271                           ; 1 bytes @ 0x0
   272                           
   273     000C                     ?_Lcd_Write_Char:	
   274                           ; 1 bytes @ 0x0
   275                           
   276     000C                     ?_delay_100ms:	
   277                           ; 1 bytes @ 0x0
   278                           
   279     000C                     ?_delay_1000ms:	
   280                           ; 1 bytes @ 0x0
   281                           
   282     000C                     ?_isr:	
   283                           ; 1 bytes @ 0x0
   284                           
   285     000C                     ?_welcomeMessage:	
   286                           ; 1 bytes @ 0x0
   287                           
   288     000C                     ?_main:	
   289                           ; 1 bytes @ 0x0
   290                           
   291     000C                     ?_Lcd_Port:	
   292                           ; 1 bytes @ 0x0
   293                           
   294     000C                     ?_Lcd_Cmd:	
   295                           ; 1 bytes @ 0x0
   296                           
   297     000C                     ?i1_delay_100ms:	
   298                           ; 1 bytes @ 0x0
   299                           
   300     000C                     ??i1_delay_100ms:	
   301                           ; 1 bytes @ 0x0
   302                           
   303                           
   304                           ; 1 bytes @ 0x0
   305     000C                     	ds	2
   306     000E                     ??_isr:
   307                           
   308                           ; 1 bytes @ 0x2
   309     000E                     	ds	2
   310     0010                     ?_strcpy:
   311     0010                     ??_delay_100ms:	
   312                           ; 1 bytes @ 0x4
   313                           
   314     0010                     ?_readADC1:	
   315                           ; 1 bytes @ 0x4
   316                           
   317     0010                     ?_readADC2:	
   318                           ; 2 bytes @ 0x4
   319                           
   320     0010                     ?___lwmod:	
   321                           ; 2 bytes @ 0x4
   322                           
   323     0010                     Lcd_Port@a:	
   324                           ; 2 bytes @ 0x4
   325                           
   326     0010                     strcpy@from:	
   327                           ; 1 bytes @ 0x4
   328                           
   329     0010                     ___lwmod@divisor:	
   330                           ; 1 bytes @ 0x4
   331                           
   332                           
   333                           ; 2 bytes @ 0x4
   334     0010                     	ds	1
   335     0011                     ??_Lcd_Write_Char:
   336     0011                     ??_Lcd_Cmd:	
   337                           ; 1 bytes @ 0x5
   338                           
   339     0011                     strcpy@to:	
   340                           ; 1 bytes @ 0x5
   341                           
   342                           
   343                           ; 1 bytes @ 0x5
   344     0011                     	ds	1
   345     0012                     ??_readADC1:
   346     0012                     ??_readADC2:	
   347                           ; 1 bytes @ 0x6
   348                           
   349     0012                     Lcd_Write_Char@temp:	
   350                           ; 1 bytes @ 0x6
   351                           
   352     0012                     strcpy@cp:	
   353                           ; 1 bytes @ 0x6
   354                           
   355     0012                     delay_1000ms@i:	
   356                           ; 1 bytes @ 0x6
   357                           
   358     0012                     ___lwmod@dividend:	
   359                           ; 2 bytes @ 0x6
   360                           
   361                           
   362                           ; 2 bytes @ 0x6
   363     0012                     	ds	1
   364     0013                     Lcd_Cmd@a:
   365     0013                     Lcd_Write_Char@y:	
   366                           ; 1 bytes @ 0x7
   367                           
   368                           
   369                           ; 1 bytes @ 0x7
   370     0013                     	ds	1
   371     0014                     ??_Lcd_Clear:
   372     0014                     ?_Lcd_Set_Cursor:	
   373                           ; 1 bytes @ 0x8
   374                           
   375     0014                     ??_Lcd_Init:	
   376                           ; 1 bytes @ 0x8
   377                           
   378     0014                     Lcd_Set_Cursor@b:	
   379                           ; 1 bytes @ 0x8
   380                           
   381     0014                     Lcd_Write_Char@a:	
   382                           ; 1 bytes @ 0x8
   383                           
   384     0014                     ___lwmod@counter:	
   385                           ; 1 bytes @ 0x8
   386                           
   387     0014                     readADC1@volt:	
   388                           ; 1 bytes @ 0x8
   389                           
   390     0014                     readADC2@volt:	
   391                           ; 2 bytes @ 0x8
   392                           
   393                           
   394                           ; 2 bytes @ 0x8
   395     0014                     	ds	1
   396     0015                     ??_Lcd_Set_Cursor:
   397     0015                     ??_Lcd_Write_String:	
   398                           ; 1 bytes @ 0x9
   399                           
   400     0015                     ?___lwdiv:	
   401                           ; 1 bytes @ 0x9
   402                           
   403     0015                     ___lwdiv@divisor:	
   404                           ; 2 bytes @ 0x9
   405                           
   406                           
   407                           ; 2 bytes @ 0x9
   408     0015                     	ds	1
   409     0016                     Lcd_Set_Cursor@a:
   410     0016                     readADC1@bits:	
   411                           ; 1 bytes @ 0xA
   412                           
   413     0016                     readADC2@bits:	
   414                           ; 1 bytes @ 0xA
   415                           
   416     0016                     Lcd_Write_String@i:	
   417                           ; 1 bytes @ 0xA
   418                           
   419                           
   420                           ; 2 bytes @ 0xA
   421     0016                     	ds	1
   422     0017                     Lcd_Set_Cursor@z:
   423     0017                     readADC1@rxData:	
   424                           ; 1 bytes @ 0xB
   425                           
   426     0017                     readADC2@rxData:	
   427                           ; 1 bytes @ 0xB
   428                           
   429     0017                     ___lwdiv@dividend:	
   430                           ; 1 bytes @ 0xB
   431                           
   432                           
   433                           ; 2 bytes @ 0xB
   434     0017                     	ds	1
   435     0018                     Lcd_Set_Cursor@y:
   436     0018                     Lcd_Write_String@a:	
   437                           ; 1 bytes @ 0xC
   438                           
   439                           
   440                           ; 1 bytes @ 0xC
   441     0018                     	ds	1
   442     0019                     Lcd_Set_Cursor@temp:
   443     0019                     ___lwdiv@quotient:	
   444                           ; 1 bytes @ 0xD
   445                           
   446                           
   447                           ; 2 bytes @ 0xD
   448     0019                     	ds	1
   449     001A                     ??_welcomeMessage:
   450                           
   451                           ; 1 bytes @ 0xE
   452     001A                     	ds	1
   453     001B                     ___lwdiv@counter:
   454                           
   455                           ; 1 bytes @ 0xF
   456     001B                     	ds	1
   457     001C                     ?_utoa:
   458     001C                     ?___wmul:	
   459                           ; 1 bytes @ 0x10
   460                           
   461     001C                     ___wmul@multiplier:	
   462                           ; 2 bytes @ 0x10
   463                           
   464     001C                     utoa@val:	
   465                           ; 2 bytes @ 0x10
   466                           
   467                           
   468                           ; 2 bytes @ 0x10
   469     001C                     	ds	2
   470     001E                     ___wmul@multiplicand:
   471     001E                     utoa@base:	
   472                           ; 2 bytes @ 0x12
   473                           
   474     001E                     welcomeMessage@msg:	
   475                           ; 2 bytes @ 0x12
   476                           
   477                           
   478                           ; 8 bytes @ 0x12
   479     001E                     	ds	2
   480     0020                     ___wmul@product:
   481     0020                     utoa@v:	
   482                           ; 2 bytes @ 0x14
   483                           
   484                           
   485                           ; 2 bytes @ 0x14
   486     0020                     	ds	2
   487     0022                     utoa@c:
   488                           
   489                           ; 1 bytes @ 0x16
   490     0022                     	ds	1
   491     0023                     utoa@buf:
   492                           
   493                           ; 1 bytes @ 0x17
   494     0023                     	ds	1
   495     0024                     ?_Lcd_Write_Int:
   496     0024                     Lcd_Write_Int@a:	
   497                           ; 1 bytes @ 0x18
   498                           
   499                           
   500                           ; 2 bytes @ 0x18
   501     0024                     	ds	2
   502     0026                     Lcd_Write_Int@temp:
   503                           
   504                           ; 16 bytes @ 0x1A
   505     0026                     	ds	16
   506     0036                     main@d1:
   507                           
   508                           ; 2 bytes @ 0x2A
   509     0036                     	ds	2
   510     0038                     main@d2:
   511                           
   512                           ; 2 bytes @ 0x2C
   513     0038                     	ds	2
   514     003A                     main@d3:
   515                           
   516                           ; 2 bytes @ 0x2E
   517     003A                     	ds	2
   518     003C                     main@d4:
   519                           
   520                           ; 2 bytes @ 0x30
   521     003C                     	ds	2
   522                           
   523                           	psect	maintext
   524     0022                     __pmaintext:	
   525 ;;
   526 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   527 ;;
   528 ;; *************** function _main *****************
   529 ;; Defined at:
   530 ;;		line 74 in file "main.c"
   531 ;; Parameters:    Size  Location     Type
   532 ;;		None
   533 ;; Auto vars:     Size  Location     Type
   534 ;;  d4              2   48[BANK0 ] unsigned short 
   535 ;;  d3              2   46[BANK0 ] unsigned short 
   536 ;;  d2              2   44[BANK0 ] unsigned short 
   537 ;;  d1              2   42[BANK0 ] unsigned short 
   538 ;; Return value:  Size  Location     Type
   539 ;;                  1    wreg      void 
   540 ;; Registers used:
   541 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   542 ;; Tracked objects:
   543 ;;		On entry : B00/0
   544 ;;		On exit  : 0/0
   545 ;;		Unchanged: 0/0
   546 ;; Data sizes:     COMMON   BANK0
   547 ;;      Params:         0       0
   548 ;;      Locals:         0       8
   549 ;;      Temps:          0       0
   550 ;;      Totals:         0       8
   551 ;;Total ram usage:        8 bytes
   552 ;; Hardware stack levels required when called: 6
   553 ;; This function calls:
   554 ;;		_Lcd_Clear
   555 ;;		_Lcd_Init
   556 ;;		_Lcd_Set_Cursor
   557 ;;		_Lcd_Write_Char
   558 ;;		_Lcd_Write_Int
   559 ;;		___lwdiv
   560 ;;		___lwmod
   561 ;;		___wmul
   562 ;;		_delay_100ms
   563 ;;		_readADC1
   564 ;;		_readADC2
   565 ;;		_welcomeMessage
   566 ;; This function is called by:
   567 ;;		Startup code after reset
   568 ;; This function uses a non-reentrant model
   569 ;;
   570                           
   571     0022                     _main:	
   572                           ;psect for function _main
   573                           
   574                           
   575                           ;main.c: 76:     TRISB = 0b01000001;
   576                           
   577                           ;incstack = 0
   578                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   579     0022  3041               	movlw	65
   580     0023  1683               	bsf	3,5	;RP0=1, select bank1
   581     0024  0086               	movwf	6	;volatile
   582                           
   583                           ;main.c: 77:     TRISA = 0b01000;
   584     0025  3008               	movlw	8
   585     0026  0085               	movwf	5	;volatile
   586                           
   587                           ;main.c: 79:     RB7 = 1;
   588     0027  1283               	bcf	3,5	;RP0=0, select bank0
   589     0028  1786               	bsf	6,7	;volatile
   590                           
   591                           ;main.c: 80:     RB5 = 0;
   592     0029  1286               	bcf	6,5	;volatile
   593                           
   594                           ;main.c: 82:     RA1 = 0;
   595     002A  1085               	bcf	5,1	;volatile
   596                           
   597                           ;main.c: 86:     OPTION_REGbits.INTEDG = 1;
   598     002B  1683               	bsf	3,5	;RP0=1, select bank1
   599     002C  1701               	bsf	1,6	;volatile
   600                           
   601                           ;main.c: 88:     INTCONbits.INTE = 1;
   602     002D  160B               	bsf	11,4	;volatile
   603                           
   604                           ;main.c: 90:     INTCONbits.GIE = 1;
   605     002E  178B               	bsf	11,7	;volatile
   606                           
   607                           ;main.c: 92:     Lcd_Init();
   608     002F  228C               	fcall	_Lcd_Init
   609                           
   610                           ;main.c: 93:     welcomeMessage();
   611     0030  22BD               	fcall	_welcomeMessage
   612     0031                     l1535:
   613                           
   614                           ;main.c: 99:         while (toggleHold) {
   615     0031  1283               	bcf	3,5	;RP0=0, select bank0
   616     0032  0846               	movf	_toggleHold,w
   617     0033  0447               	iorwf	_toggleHold+1,w
   618     0034  1903               	btfsc	3,2
   619     0035  286C               	goto	l1537
   620                           
   621                           ;main.c: 100:             Lcd_Set_Cursor(1, 1);
   622     0036  0194               	clrf	Lcd_Set_Cursor@b
   623     0037  0A94               	incf	Lcd_Set_Cursor@b,f
   624     0038  3001               	movlw	1
   625     0039  2228               	fcall	_Lcd_Set_Cursor
   626                           
   627                           ;main.c: 101:             Lcd_Write_Int(d1);
   628     003A  0837               	movf	main@d1+1,w
   629     003B  00A5               	movwf	Lcd_Write_Int@a+1
   630     003C  0836               	movf	main@d1,w
   631     003D  00A4               	movwf	Lcd_Write_Int@a
   632     003E  23AD               	fcall	_Lcd_Write_Int
   633                           
   634                           ;main.c: 102:             Lcd_Set_Cursor(1, 2);
   635     003F  3002               	movlw	2
   636     0040  0094               	movwf	Lcd_Set_Cursor@b
   637     0041  3001               	movlw	1
   638     0042  2228               	fcall	_Lcd_Set_Cursor
   639                           
   640                           ;main.c: 103:             Lcd_Write_Char('.');
   641     0043  302E               	movlw	46
   642     0044  22EA               	fcall	_Lcd_Write_Char
   643                           
   644                           ;main.c: 104:             Lcd_Set_Cursor(1, 3);
   645     0045  3003               	movlw	3
   646     0046  0094               	movwf	Lcd_Set_Cursor@b
   647     0047  3001               	movlw	1
   648     0048  2228               	fcall	_Lcd_Set_Cursor
   649                           
   650                           ;main.c: 105:             Lcd_Write_Int(d2);
   651     0049  0839               	movf	main@d2+1,w
   652     004A  00A5               	movwf	Lcd_Write_Int@a+1
   653     004B  0838               	movf	main@d2,w
   654     004C  00A4               	movwf	Lcd_Write_Int@a
   655     004D  23AD               	fcall	_Lcd_Write_Int
   656                           
   657                           ;main.c: 106:             Lcd_Set_Cursor(1, 6);
   658     004E  3006               	movlw	6
   659     004F  0094               	movwf	Lcd_Set_Cursor@b
   660     0050  3001               	movlw	1
   661     0051  2228               	fcall	_Lcd_Set_Cursor
   662                           
   663                           ;main.c: 107:             Lcd_Write_Int(d3);
   664     0052  083B               	movf	main@d3+1,w
   665     0053  00A5               	movwf	Lcd_Write_Int@a+1
   666     0054  083A               	movf	main@d3,w
   667     0055  00A4               	movwf	Lcd_Write_Int@a
   668     0056  23AD               	fcall	_Lcd_Write_Int
   669                           
   670                           ;main.c: 108:             Lcd_Set_Cursor(1, 7);
   671     0057  3007               	movlw	7
   672     0058  0094               	movwf	Lcd_Set_Cursor@b
   673     0059  3001               	movlw	1
   674     005A  2228               	fcall	_Lcd_Set_Cursor
   675                           
   676                           ;main.c: 109:             Lcd_Write_Char('.');
   677     005B  302E               	movlw	46
   678     005C  22EA               	fcall	_Lcd_Write_Char
   679                           
   680                           ;main.c: 110:             Lcd_Set_Cursor(1, 8);
   681     005D  3008               	movlw	8
   682     005E  0094               	movwf	Lcd_Set_Cursor@b
   683     005F  3001               	movlw	1
   684     0060  2228               	fcall	_Lcd_Set_Cursor
   685                           
   686                           ;main.c: 111:             Lcd_Write_Int(d4);
   687     0061  083D               	movf	main@d4+1,w
   688     0062  00A5               	movwf	Lcd_Write_Int@a+1
   689     0063  083C               	movf	main@d4,w
   690     0064  00A4               	movwf	Lcd_Write_Int@a
   691     0065  23AD               	fcall	_Lcd_Write_Int
   692                           
   693                           ;main.c: 112:             Lcd_Write_Int(d4);
   694     0066  083D               	movf	main@d4+1,w
   695     0067  00A5               	movwf	Lcd_Write_Int@a+1
   696     0068  083C               	movf	main@d4,w
   697     0069  00A4               	movwf	Lcd_Write_Int@a
   698     006A  23AD               	fcall	_Lcd_Write_Int
   699     006B  2831               	goto	l1535
   700     006C                     l1537:
   701                           
   702                           ;main.c: 118:         adcVal = readADC1();
   703     006C  21A1               	fcall	_readADC1
   704     006D  0811               	movf	?_readADC1+1,w
   705     006E  00C9               	movwf	_adcVal+1
   706     006F  0810               	movf	?_readADC1,w
   707     0070  00C8               	movwf	_adcVal
   708                           
   709                           ;main.c: 119:         d1 = adcVal / 204;
   710     0071  30CC               	movlw	204
   711     0072  0095               	movwf	___lwdiv@divisor
   712     0073  3000               	movlw	0
   713     0074  0096               	movwf	___lwdiv@divisor+1
   714     0075  0849               	movf	_adcVal+1,w
   715     0076  0098               	movwf	___lwdiv@dividend+1
   716     0077  0848               	movf	_adcVal,w
   717     0078  0097               	movwf	___lwdiv@dividend
   718     0079  21EC               	fcall	___lwdiv
   719     007A  0816               	movf	?___lwdiv+1,w
   720     007B  00B7               	movwf	main@d1+1
   721     007C  0815               	movf	?___lwdiv,w
   722     007D  00B6               	movwf	main@d1
   723                           
   724                           ;main.c: 120:         d2 = ((adcVal % 204) / 204) *10;
   725     007E  30CC               	movlw	204
   726     007F  0095               	movwf	___lwdiv@divisor
   727     0080  3000               	movlw	0
   728     0081  0096               	movwf	___lwdiv@divisor+1
   729     0082  0849               	movf	_adcVal+1,w
   730     0083  0093               	movwf	___lwmod@dividend+1
   731     0084  0848               	movf	_adcVal,w
   732     0085  0092               	movwf	___lwmod@dividend
   733     0086  30CC               	movlw	204
   734     0087  0090               	movwf	___lwmod@divisor
   735     0088  3000               	movlw	0
   736     0089  0091               	movwf	___lwmod@divisor+1
   737     008A  225A               	fcall	___lwmod
   738     008B  0811               	movf	?___lwmod+1,w
   739     008C  0098               	movwf	___lwdiv@dividend+1
   740     008D  0810               	movf	?___lwmod,w
   741     008E  0097               	movwf	___lwdiv@dividend
   742     008F  21EC               	fcall	___lwdiv
   743     0090  0816               	movf	?___lwdiv+1,w
   744     0091  009D               	movwf	___wmul@multiplier+1
   745     0092  0815               	movf	?___lwdiv,w
   746     0093  009C               	movwf	___wmul@multiplier
   747     0094  300A               	movlw	10
   748     0095  009E               	movwf	___wmul@multiplicand
   749     0096  3000               	movlw	0
   750     0097  009F               	movwf	___wmul@multiplicand+1
   751     0098  230D               	fcall	___wmul
   752     0099  081D               	movf	?___wmul+1,w
   753     009A  00B9               	movwf	main@d2+1
   754     009B  081C               	movf	?___wmul,w
   755     009C  00B8               	movwf	main@d2
   756                           
   757                           ;main.c: 121:         adcVal = readADC2();
   758     009D  2156               	fcall	_readADC2
   759     009E  0811               	movf	?_readADC2+1,w
   760     009F  00C9               	movwf	_adcVal+1
   761     00A0  0810               	movf	?_readADC2,w
   762     00A1  00C8               	movwf	_adcVal
   763                           
   764                           ;main.c: 122:         d3 = adcVal / 204;
   765     00A2  30CC               	movlw	204
   766     00A3  0095               	movwf	___lwdiv@divisor
   767     00A4  3000               	movlw	0
   768     00A5  0096               	movwf	___lwdiv@divisor+1
   769     00A6  0849               	movf	_adcVal+1,w
   770     00A7  0098               	movwf	___lwdiv@dividend+1
   771     00A8  0848               	movf	_adcVal,w
   772     00A9  0097               	movwf	___lwdiv@dividend
   773     00AA  21EC               	fcall	___lwdiv
   774     00AB  0816               	movf	?___lwdiv+1,w
   775     00AC  00BB               	movwf	main@d3+1
   776     00AD  0815               	movf	?___lwdiv,w
   777     00AE  00BA               	movwf	main@d3
   778                           
   779                           ;main.c: 123:         d4 = ((adcVal % 204) / 204) *10;
   780     00AF  30CC               	movlw	204
   781     00B0  0095               	movwf	___lwdiv@divisor
   782     00B1  3000               	movlw	0
   783     00B2  0096               	movwf	___lwdiv@divisor+1
   784     00B3  0849               	movf	_adcVal+1,w
   785     00B4  0093               	movwf	___lwmod@dividend+1
   786     00B5  0848               	movf	_adcVal,w
   787     00B6  0092               	movwf	___lwmod@dividend
   788     00B7  30CC               	movlw	204
   789     00B8  0090               	movwf	___lwmod@divisor
   790     00B9  3000               	movlw	0
   791     00BA  0091               	movwf	___lwmod@divisor+1
   792     00BB  225A               	fcall	___lwmod
   793     00BC  0811               	movf	?___lwmod+1,w
   794     00BD  0098               	movwf	___lwdiv@dividend+1
   795     00BE  0810               	movf	?___lwmod,w
   796     00BF  0097               	movwf	___lwdiv@dividend
   797     00C0  21EC               	fcall	___lwdiv
   798     00C1  0816               	movf	?___lwdiv+1,w
   799     00C2  009D               	movwf	___wmul@multiplier+1
   800     00C3  0815               	movf	?___lwdiv,w
   801     00C4  009C               	movwf	___wmul@multiplier
   802     00C5  300A               	movlw	10
   803     00C6  009E               	movwf	___wmul@multiplicand
   804     00C7  3000               	movlw	0
   805     00C8  009F               	movwf	___wmul@multiplicand+1
   806     00C9  230D               	fcall	___wmul
   807     00CA  081D               	movf	?___wmul+1,w
   808     00CB  00BD               	movwf	main@d4+1
   809     00CC  081C               	movf	?___wmul,w
   810     00CD  00BC               	movwf	main@d4
   811                           
   812                           ;main.c: 126:         Lcd_Clear();
   813     00CE  239F               	fcall	_Lcd_Clear
   814                           
   815                           ;main.c: 127:         Lcd_Set_Cursor(1, 1);
   816     00CF  1283               	bcf	3,5	;RP0=0, select bank0
   817     00D0  0194               	clrf	Lcd_Set_Cursor@b
   818     00D1  0A94               	incf	Lcd_Set_Cursor@b,f
   819     00D2  3001               	movlw	1
   820     00D3  2228               	fcall	_Lcd_Set_Cursor
   821                           
   822                           ;main.c: 128:         Lcd_Write_Int(d1);
   823     00D4  0837               	movf	main@d1+1,w
   824     00D5  00A5               	movwf	Lcd_Write_Int@a+1
   825     00D6  0836               	movf	main@d1,w
   826     00D7  00A4               	movwf	Lcd_Write_Int@a
   827     00D8  23AD               	fcall	_Lcd_Write_Int
   828                           
   829                           ;main.c: 129:         Lcd_Set_Cursor(1, 2);
   830     00D9  3002               	movlw	2
   831     00DA  0094               	movwf	Lcd_Set_Cursor@b
   832     00DB  3001               	movlw	1
   833     00DC  2228               	fcall	_Lcd_Set_Cursor
   834                           
   835                           ;main.c: 130:         Lcd_Write_Char('.');
   836     00DD  302E               	movlw	46
   837     00DE  22EA               	fcall	_Lcd_Write_Char
   838                           
   839                           ;main.c: 131:         Lcd_Set_Cursor(1, 3);
   840     00DF  3003               	movlw	3
   841     00E0  0094               	movwf	Lcd_Set_Cursor@b
   842     00E1  3001               	movlw	1
   843     00E2  2228               	fcall	_Lcd_Set_Cursor
   844                           
   845                           ;main.c: 132:         Lcd_Write_Int(d2);
   846     00E3  0839               	movf	main@d2+1,w
   847     00E4  00A5               	movwf	Lcd_Write_Int@a+1
   848     00E5  0838               	movf	main@d2,w
   849     00E6  00A4               	movwf	Lcd_Write_Int@a
   850     00E7  23AD               	fcall	_Lcd_Write_Int
   851                           
   852                           ;main.c: 133:         Lcd_Set_Cursor(1, 6);
   853     00E8  3006               	movlw	6
   854     00E9  0094               	movwf	Lcd_Set_Cursor@b
   855     00EA  3001               	movlw	1
   856     00EB  2228               	fcall	_Lcd_Set_Cursor
   857                           
   858                           ;main.c: 134:         Lcd_Write_Int(d3);
   859     00EC  083B               	movf	main@d3+1,w
   860     00ED  00A5               	movwf	Lcd_Write_Int@a+1
   861     00EE  083A               	movf	main@d3,w
   862     00EF  00A4               	movwf	Lcd_Write_Int@a
   863     00F0  23AD               	fcall	_Lcd_Write_Int
   864                           
   865                           ;main.c: 135:         Lcd_Set_Cursor(1, 7);
   866     00F1  3007               	movlw	7
   867     00F2  0094               	movwf	Lcd_Set_Cursor@b
   868     00F3  3001               	movlw	1
   869     00F4  2228               	fcall	_Lcd_Set_Cursor
   870                           
   871                           ;main.c: 136:         Lcd_Write_Char('.');
   872     00F5  302E               	movlw	46
   873     00F6  22EA               	fcall	_Lcd_Write_Char
   874                           
   875                           ;main.c: 137:         Lcd_Set_Cursor(1, 8);
   876     00F7  3008               	movlw	8
   877     00F8  0094               	movwf	Lcd_Set_Cursor@b
   878     00F9  3001               	movlw	1
   879     00FA  2228               	fcall	_Lcd_Set_Cursor
   880                           
   881                           ;main.c: 138:         Lcd_Write_Int(d4);
   882     00FB  083D               	movf	main@d4+1,w
   883     00FC  00A5               	movwf	Lcd_Write_Int@a+1
   884     00FD  083C               	movf	main@d4,w
   885     00FE  00A4               	movwf	Lcd_Write_Int@a
   886     00FF  23AD               	fcall	_Lcd_Write_Int
   887                           
   888                           ;main.c: 139:         delay_100ms();
   889     0100  23D1               	fcall	_delay_100ms
   890     0101  2831               	goto	l1535
   891     0102                     __end_of_main:
   892                           
   893                           	psect	text1
   894     02BD                     __ptext1:	
   895 ;; *************** function _welcomeMessage *****************
   896 ;; Defined at:
   897 ;;		line 52 in file "main.c"
   898 ;; Parameters:    Size  Location     Type
   899 ;;		None
   900 ;; Auto vars:     Size  Location     Type
   901 ;;  msg             8   18[BANK0 ] unsigned char [8]
   902 ;; Return value:  Size  Location     Type
   903 ;;                  1    wreg      void 
   904 ;; Registers used:
   905 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   906 ;; Tracked objects:
   907 ;;		On entry : 100/0
   908 ;;		On exit  : 0/0
   909 ;;		Unchanged: 0/0
   910 ;; Data sizes:     COMMON   BANK0
   911 ;;      Params:         0       0
   912 ;;      Locals:         0       8
   913 ;;      Temps:          0       4
   914 ;;      Totals:         0      12
   915 ;;Total ram usage:       12 bytes
   916 ;; Hardware stack levels used: 1
   917 ;; Hardware stack levels required when called: 5
   918 ;; This function calls:
   919 ;;		_Lcd_Clear
   920 ;;		_Lcd_Set_Cursor
   921 ;;		_Lcd_Write_String
   922 ;;		_delay_1000ms
   923 ;;		_strcpy
   924 ;; This function is called by:
   925 ;;		_main
   926 ;; This function uses a non-reentrant model
   927 ;;
   928                           
   929     02BD                     _welcomeMessage:	
   930                           ;psect for function _welcomeMessage
   931                           
   932                           
   933                           ;main.c: 54:     char msg[] = "Welcome";
   934                           
   935                           ;incstack = 0
   936                           ; Regs used in _welcomeMessage: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   937     02BD  301E               	movlw	welcomeMessage@msg& (0+255)
   938     02BE  0084               	movwf	4
   939     02BF  303E               	movlw	low welcomeMessage@F331
   940     02C0  009A               	movwf	??_welcomeMessage
   941     02C1  0804               	movf	4,w
   942     02C2  009B               	movwf	??_welcomeMessage+1
   943     02C3  3008               	movlw	8
   944     02C4  009C               	movwf	??_welcomeMessage+2
   945     02C5                     u690:
   946     02C5  081A               	movf	??_welcomeMessage,w
   947     02C6  0084               	movwf	4
   948     02C7  1383               	bcf	3,7	;select IRP bank0
   949     02C8  0800               	movf	0,w
   950     02C9  009D               	movwf	??_welcomeMessage+3
   951     02CA  0A9A               	incf	??_welcomeMessage,f
   952     02CB  081B               	movf	??_welcomeMessage+1,w
   953     02CC  0084               	movwf	4
   954     02CD  081D               	movf	??_welcomeMessage+3,w
   955     02CE  0080               	movwf	0
   956     02CF  0A9B               	incf	??_welcomeMessage+1,f
   957     02D0  0B9C               	decfsz	??_welcomeMessage+2,f
   958     02D1  2AC5               	goto	u690
   959                           
   960                           ;main.c: 55:     Lcd_Clear();
   961     02D2  239F               	fcall	_Lcd_Clear
   962                           
   963                           ;main.c: 56:     Lcd_Set_Cursor(1, 1);
   964     02D3  1283               	bcf	3,5	;RP0=0, select bank0
   965     02D4  0194               	clrf	Lcd_Set_Cursor@b
   966     02D5  0A94               	incf	Lcd_Set_Cursor@b,f
   967     02D6  3001               	movlw	1
   968     02D7  2228               	fcall	_Lcd_Set_Cursor
   969                           
   970                           ;main.c: 57:     Lcd_Write_String(msg);
   971     02D8  301E               	movlw	(low (welcomeMessage@msg| 0))& (0+255)
   972     02D9  232E               	fcall	_Lcd_Write_String
   973                           
   974                           ;main.c: 58:     delay_1000ms();
   975     02DA  2377               	fcall	_delay_1000ms
   976                           
   977                           ;main.c: 59:     Lcd_Clear();
   978     02DB  239F               	fcall	_Lcd_Clear
   979                           
   980                           ;main.c: 60:     Lcd_Set_Cursor(1, 1);
   981     02DC  1283               	bcf	3,5	;RP0=0, select bank0
   982     02DD  0194               	clrf	Lcd_Set_Cursor@b
   983     02DE  0A94               	incf	Lcd_Set_Cursor@b,f
   984     02DF  3001               	movlw	1
   985     02E0  2228               	fcall	_Lcd_Set_Cursor
   986                           
   987                           ;main.c: 61:     strcpy(msg, "0-5V");
   988     02E1  3001               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   989     02E2  0090               	movwf	strcpy@from
   990     02E3  301E               	movlw	(low (welcomeMessage@msg| 0))& (0+255)
   991     02E4  2348               	fcall	_strcpy
   992                           
   993                           ;main.c: 63:     Lcd_Write_String(msg);
   994     02E5  301E               	movlw	(low (welcomeMessage@msg| 0))& (0+255)
   995     02E6  232E               	fcall	_Lcd_Write_String
   996                           
   997                           ;main.c: 64:     delay_1000ms();
   998     02E7  2377               	fcall	_delay_1000ms
   999                           
  1000                           ;main.c: 67:     Lcd_Clear();
  1001     02E8  239F               	fcall	_Lcd_Clear
  1002     02E9  0008               	return
  1003     02EA                     __end_of_welcomeMessage:
  1004                           
  1005                           	psect	text2
  1006     0348                     __ptext2:	
  1007 ;; *************** function _strcpy *****************
  1008 ;; Defined at:
  1009 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\strcpy.c"
  1010 ;; Parameters:    Size  Location     Type
  1011 ;;  to              1    wreg     PTR unsigned char 
  1012 ;;		 -> welcomeMessage@msg(8), 
  1013 ;;  from            1    4[BANK0 ] PTR const unsigned char 
  1014 ;;		 -> STR_1(5), 
  1015 ;; Auto vars:     Size  Location     Type
  1016 ;;  to              1    5[BANK0 ] PTR unsigned char 
  1017 ;;		 -> welcomeMessage@msg(8), 
  1018 ;;  cp              1    6[BANK0 ] PTR unsigned char 
  1019 ;;		 -> welcomeMessage@msg(8), 
  1020 ;; Return value:  Size  Location     Type
  1021 ;;                  1    wreg      PTR unsigned char 
  1022 ;; Registers used:
  1023 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath
  1024 ;; Tracked objects:
  1025 ;;		On entry : 100/0
  1026 ;;		On exit  : 900/0
  1027 ;;		Unchanged: 0/0
  1028 ;; Data sizes:     COMMON   BANK0
  1029 ;;      Params:         0       1
  1030 ;;      Locals:         0       2
  1031 ;;      Temps:          0       0
  1032 ;;      Totals:         0       3
  1033 ;;Total ram usage:        3 bytes
  1034 ;; Hardware stack levels used: 1
  1035 ;; Hardware stack levels required when called: 2
  1036 ;; This function calls:
  1037 ;;		Nothing
  1038 ;; This function is called by:
  1039 ;;		_welcomeMessage
  1040 ;; This function uses a non-reentrant model
  1041 ;;
  1042                           
  1043     0348                     _strcpy:	
  1044                           ;psect for function _strcpy
  1045                           
  1046                           
  1047                           ;incstack = 0
  1048                           ; Regs used in _strcpy: [wreg-fsr0h+status,2+status,0+btemp+1+pclath]
  1049                           ;strcpy@to stored from wreg
  1050     0348  0091               	movwf	strcpy@to
  1051     0349  0811               	movf	strcpy@to,w
  1052     034A  0092               	movwf	strcpy@cp
  1053     034B                     l1307:
  1054     034B  0810               	movf	strcpy@from,w
  1055     034C  0084               	movwf	4
  1056     034D  23C6               	fcall	stringdir
  1057     034E  00CF               	movwf	79
  1058     034F  0812               	movf	strcpy@cp,w
  1059     0350  0084               	movwf	4
  1060     0351  084F               	movf	79,w
  1061     0352  1383               	bcf	3,7	;select IRP bank0
  1062     0353  0080               	movwf	0
  1063     0354  0800               	movf	0,w
  1064     0355  1903               	btfsc	3,2
  1065     0356  0008               	return
  1066     0357  3001               	movlw	1
  1067     0358  00CF               	movwf	79
  1068     0359  084F               	movf	79,w
  1069     035A  0792               	addwf	strcpy@cp,f
  1070     035B  3001               	movlw	1
  1071     035C  00CF               	movwf	79
  1072     035D  084F               	movf	79,w
  1073     035E  0790               	addwf	strcpy@from,f
  1074     035F  2B4B               	goto	l1307
  1075     0360                     __end_of_strcpy:
  1076                           
  1077                           	psect	text3
  1078     0377                     __ptext3:	
  1079 ;; *************** function _delay_1000ms *****************
  1080 ;; Defined at:
  1081 ;;		line 31 in file "main.c"
  1082 ;; Parameters:    Size  Location     Type
  1083 ;;		None
  1084 ;; Auto vars:     Size  Location     Type
  1085 ;;  i               2    6[BANK0 ] int 
  1086 ;; Return value:  Size  Location     Type
  1087 ;;                  1    wreg      void 
  1088 ;; Registers used:
  1089 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  1090 ;; Tracked objects:
  1091 ;;		On entry : 900/0
  1092 ;;		On exit  : 0/0
  1093 ;;		Unchanged: 0/0
  1094 ;; Data sizes:     COMMON   BANK0
  1095 ;;      Params:         0       0
  1096 ;;      Locals:         0       2
  1097 ;;      Temps:          0       0
  1098 ;;      Totals:         0       2
  1099 ;;Total ram usage:        2 bytes
  1100 ;; Hardware stack levels used: 1
  1101 ;; Hardware stack levels required when called: 3
  1102 ;; This function calls:
  1103 ;;		_delay_100ms
  1104 ;; This function is called by:
  1105 ;;		_welcomeMessage
  1106 ;; This function uses a non-reentrant model
  1107 ;;
  1108                           
  1109     0377                     _delay_1000ms:	
  1110                           ;psect for function _delay_1000ms
  1111                           
  1112                           
  1113                           ;main.c: 32:     for (int i = 0; i < 20; i++) {
  1114                           
  1115                           ;incstack = 0
  1116                           ; Regs used in _delay_1000ms: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  1117     0377  0192               	clrf	delay_1000ms@i
  1118     0378  0193               	clrf	delay_1000ms@i+1
  1119     0379                     l1265:
  1120                           
  1121                           ;main.c: 33:         delay_100ms();
  1122     0379  23D1               	fcall	_delay_100ms
  1123                           
  1124                           ;main.c: 34:     }
  1125     037A  3001               	movlw	1
  1126     037B  1283               	bcf	3,5	;RP0=0, select bank0
  1127     037C  0792               	addwf	delay_1000ms@i,f
  1128     037D  1803               	skipnc
  1129     037E  0A93               	incf	delay_1000ms@i+1,f
  1130     037F  3000               	movlw	0
  1131     0380  0793               	addwf	delay_1000ms@i+1,f
  1132     0381  0813               	movf	delay_1000ms@i+1,w
  1133     0382  3A80               	xorlw	128
  1134     0383  00CF               	movwf	79
  1135     0384  3080               	movlw	128
  1136     0385  024F               	subwf	79,w
  1137     0386  1D03               	skipz
  1138     0387  2B8A               	goto	u595
  1139     0388  3014               	movlw	20
  1140     0389  0212               	subwf	delay_1000ms@i,w
  1141     038A                     u595:
  1142     038A  1803               	btfsc	3,0
  1143     038B  0008               	return
  1144     038C  2B79               	goto	l1265
  1145     038D                     __end_of_delay_1000ms:
  1146                           
  1147                           	psect	text4
  1148     03D1                     __ptext4:	
  1149 ;; *************** function _delay_100ms *****************
  1150 ;; Defined at:
  1151 ;;		line 26 in file "main.c"
  1152 ;; Parameters:    Size  Location     Type
  1153 ;;		None
  1154 ;; Auto vars:     Size  Location     Type
  1155 ;;		None
  1156 ;; Return value:  Size  Location     Type
  1157 ;;                  1    wreg      void 
  1158 ;; Registers used:
  1159 ;;		wreg
  1160 ;; Tracked objects:
  1161 ;;		On entry : 0/0
  1162 ;;		On exit  : 0/0
  1163 ;;		Unchanged: 0/0
  1164 ;; Data sizes:     COMMON   BANK0
  1165 ;;      Params:         0       0
  1166 ;;      Locals:         0       0
  1167 ;;      Temps:          0       2
  1168 ;;      Totals:         0       2
  1169 ;;Total ram usage:        2 bytes
  1170 ;; Hardware stack levels used: 1
  1171 ;; Hardware stack levels required when called: 2
  1172 ;; This function calls:
  1173 ;;		Nothing
  1174 ;; This function is called by:
  1175 ;;		_delay_1000ms
  1176 ;;		_main
  1177 ;; This function uses a non-reentrant model
  1178 ;;
  1179                           
  1180     03D1                     _delay_100ms:	
  1181                           ;psect for function _delay_100ms
  1182                           
  1183                           
  1184                           ;main.c: 27:     _delay((unsigned long)((100)*(4000000/4000.0)));
  1185                           
  1186                           ;incstack = 0
  1187                           ; Regs used in _delay_100ms: [wreg]
  1188     03D1  3082               	movlw	130
  1189     03D2  1283               	bcf	3,5	;RP0=0, select bank0
  1190     03D3  0091               	movwf	??_delay_100ms+1
  1191     03D4  30DD               	movlw	221
  1192     03D5  0090               	movwf	??_delay_100ms
  1193     03D6                     u817:
  1194     03D6  0B90               	decfsz	??_delay_100ms,f
  1195     03D7  2BD6               	goto	u817
  1196     03D8  0B91               	decfsz	??_delay_100ms+1,f
  1197     03D9  2BD6               	goto	u817
  1198     03DA  2BDB               	nop2
  1199     03DB  0008               	return
  1200     03DC                     __end_of_delay_100ms:
  1201                           
  1202                           	psect	text5
  1203     0228                     __ptext5:	
  1204 ;; *************** function _Lcd_Set_Cursor *****************
  1205 ;; Defined at:
  1206 ;;		line 52 in file "lcd.c"
  1207 ;; Parameters:    Size  Location     Type
  1208 ;;  a               1    wreg     unsigned char 
  1209 ;;  b               1    8[BANK0 ] unsigned char 
  1210 ;; Auto vars:     Size  Location     Type
  1211 ;;  a               1   10[BANK0 ] unsigned char 
  1212 ;;  temp            1   13[BANK0 ] unsigned char 
  1213 ;;  y               1   12[BANK0 ] unsigned char 
  1214 ;;  z               1   11[BANK0 ] unsigned char 
  1215 ;; Return value:  Size  Location     Type
  1216 ;;                  1    wreg      void 
  1217 ;; Registers used:
  1218 ;;		wreg, status,2, status,0, pclath, cstack
  1219 ;; Tracked objects:
  1220 ;;		On entry : 100/0
  1221 ;;		On exit  : 100/0
  1222 ;;		Unchanged: 0/0
  1223 ;; Data sizes:     COMMON   BANK0
  1224 ;;      Params:         0       1
  1225 ;;      Locals:         0       4
  1226 ;;      Temps:          0       1
  1227 ;;      Totals:         0       6
  1228 ;;Total ram usage:        6 bytes
  1229 ;; Hardware stack levels used: 1
  1230 ;; Hardware stack levels required when called: 4
  1231 ;; This function calls:
  1232 ;;		_Lcd_Cmd
  1233 ;; This function is called by:
  1234 ;;		_welcomeMessage
  1235 ;;		_main
  1236 ;; This function uses a non-reentrant model
  1237 ;;
  1238                           
  1239     0228                     _Lcd_Set_Cursor:	
  1240                           ;psect for function _Lcd_Set_Cursor
  1241                           
  1242                           
  1243                           ;incstack = 0
  1244                           ; Regs used in _Lcd_Set_Cursor: [wreg+status,2+status,0+pclath+cstack]
  1245                           ;Lcd_Set_Cursor@a stored from wreg
  1246     0228  0096               	movwf	Lcd_Set_Cursor@a
  1247                           
  1248                           ;lcd.c: 52: void Lcd_Set_Cursor(char a, char b);lcd.c: 53: {;lcd.c: 54:  char temp,z,y;;
      +                          lcd.c: 55:  if(a == 1)
  1249     0229  0316               	decf	Lcd_Set_Cursor@a,w
  1250     022A  1D03               	btfss	3,2
  1251     022B  2A41               	goto	l1285
  1252                           
  1253                           ;lcd.c: 56:  {;lcd.c: 57:    temp = (char) (0x80 + b - 1);
  1254     022C  0814               	movf	Lcd_Set_Cursor@b,w
  1255     022D  3E7F               	addlw	127
  1256     022E  0099               	movwf	Lcd_Set_Cursor@temp
  1257                           
  1258                           ;lcd.c: 58:   z = temp>>4;
  1259     022F  0819               	movf	Lcd_Set_Cursor@temp,w
  1260     0230  0095               	movwf	??_Lcd_Set_Cursor
  1261     0231  3004               	movlw	4
  1262     0232                     u615:
  1263     0232  1003               	clrc
  1264     0233  0C95               	rrf	??_Lcd_Set_Cursor,f
  1265     0234  3EFF               	addlw	-1
  1266     0235  1D03               	skipz
  1267     0236  2A32               	goto	u615
  1268     0237  0815               	movf	??_Lcd_Set_Cursor,w
  1269     0238  0097               	movwf	Lcd_Set_Cursor@z
  1270                           
  1271                           ;lcd.c: 59:   y = temp & 0x0F;
  1272     0239  0819               	movf	Lcd_Set_Cursor@temp,w
  1273     023A  390F               	andlw	15
  1274     023B  0098               	movwf	Lcd_Set_Cursor@y
  1275                           
  1276                           ;lcd.c: 60:   Lcd_Cmd(z);
  1277     023C  0817               	movf	Lcd_Set_Cursor@z,w
  1278     023D  238D               	fcall	_Lcd_Cmd
  1279                           
  1280                           ;lcd.c: 61:   Lcd_Cmd(y);
  1281     023E  0818               	movf	Lcd_Set_Cursor@y,w
  1282     023F  238D               	fcall	_Lcd_Cmd
  1283                           
  1284                           ;lcd.c: 62:  }
  1285     0240  0008               	return
  1286     0241                     l1285:
  1287     0241  3002               	movlw	2
  1288     0242  0616               	xorwf	Lcd_Set_Cursor@a,w
  1289     0243  1D03               	btfss	3,2
  1290     0244  0008               	return
  1291                           
  1292                           ;lcd.c: 64:  {;lcd.c: 65:   temp = 0xC0 + b - 1;
  1293     0245  0814               	movf	Lcd_Set_Cursor@b,w
  1294     0246  3EBF               	addlw	191
  1295     0247  0099               	movwf	Lcd_Set_Cursor@temp
  1296                           
  1297                           ;lcd.c: 66:   z = temp>>4;
  1298     0248  0819               	movf	Lcd_Set_Cursor@temp,w
  1299     0249  0095               	movwf	??_Lcd_Set_Cursor
  1300     024A  3004               	movlw	4
  1301     024B                     u635:
  1302     024B  1003               	clrc
  1303     024C  0C95               	rrf	??_Lcd_Set_Cursor,f
  1304     024D  3EFF               	addlw	-1
  1305     024E  1D03               	skipz
  1306     024F  2A4B               	goto	u635
  1307     0250  0815               	movf	??_Lcd_Set_Cursor,w
  1308     0251  0097               	movwf	Lcd_Set_Cursor@z
  1309                           
  1310                           ;lcd.c: 67:   y = temp & 0x0F;
  1311     0252  0819               	movf	Lcd_Set_Cursor@temp,w
  1312     0253  390F               	andlw	15
  1313     0254  0098               	movwf	Lcd_Set_Cursor@y
  1314                           
  1315                           ;lcd.c: 68:   Lcd_Cmd(z);
  1316     0255  0817               	movf	Lcd_Set_Cursor@z,w
  1317     0256  238D               	fcall	_Lcd_Cmd
  1318                           
  1319                           ;lcd.c: 69:   Lcd_Cmd(y);
  1320     0257  0818               	movf	Lcd_Set_Cursor@y,w
  1321     0258  238D               	fcall	_Lcd_Cmd
  1322     0259  0008               	return
  1323     025A                     __end_of_Lcd_Set_Cursor:
  1324                           
  1325                           	psect	text6
  1326     039F                     __ptext6:	
  1327 ;; *************** function _Lcd_Clear *****************
  1328 ;; Defined at:
  1329 ;;		line 44 in file "lcd.c"
  1330 ;; Parameters:    Size  Location     Type
  1331 ;;		None
  1332 ;; Auto vars:     Size  Location     Type
  1333 ;;		None
  1334 ;; Return value:  Size  Location     Type
  1335 ;;                  1    wreg      void 
  1336 ;; Registers used:
  1337 ;;		wreg, status,2, status,0, pclath, cstack
  1338 ;; Tracked objects:
  1339 ;;		On entry : 0/0
  1340 ;;		On exit  : 0/0
  1341 ;;		Unchanged: 0/0
  1342 ;; Data sizes:     COMMON   BANK0
  1343 ;;      Params:         0       0
  1344 ;;      Locals:         0       0
  1345 ;;      Temps:          0       2
  1346 ;;      Totals:         0       2
  1347 ;;Total ram usage:        2 bytes
  1348 ;; Hardware stack levels used: 1
  1349 ;; Hardware stack levels required when called: 4
  1350 ;; This function calls:
  1351 ;;		_Lcd_Cmd
  1352 ;; This function is called by:
  1353 ;;		_welcomeMessage
  1354 ;;		_main
  1355 ;; This function uses a non-reentrant model
  1356 ;;
  1357                           
  1358     039F                     _Lcd_Clear:	
  1359                           ;psect for function _Lcd_Clear
  1360                           
  1361                           
  1362                           ;lcd.c: 46:  Lcd_Cmd(0x00);
  1363                           
  1364                           ;incstack = 0
  1365                           ; Regs used in _Lcd_Clear: [wreg+status,2+status,0+pclath+cstack]
  1366     039F  3000               	movlw	0
  1367     03A0  238D               	fcall	_Lcd_Cmd
  1368                           
  1369                           ;lcd.c: 47:  Lcd_Cmd(0x01);
  1370     03A1  3001               	movlw	1
  1371     03A2  238D               	fcall	_Lcd_Cmd
  1372                           
  1373                           ;lcd.c: 48:     _delay((unsigned long)((2)*(4000000/4000.0)));
  1374     03A3  3003               	movlw	3
  1375     03A4  0095               	movwf	??_Lcd_Clear+1
  1376     03A5  3097               	movlw	151
  1377     03A6  0094               	movwf	??_Lcd_Clear
  1378     03A7                     u827:
  1379     03A7  0B94               	decfsz	??_Lcd_Clear,f
  1380     03A8  2BA7               	goto	u827
  1381     03A9  0B95               	decfsz	??_Lcd_Clear+1,f
  1382     03AA  2BA7               	goto	u827
  1383     03AB  2BAC               	nop2
  1384     03AC  0008               	return
  1385     03AD                     __end_of_Lcd_Clear:
  1386                           
  1387                           	psect	text7
  1388     0156                     __ptext7:	
  1389 ;; *************** function _readADC2 *****************
  1390 ;; Defined at:
  1391 ;;		line 50 in file "adc.c"
  1392 ;; Parameters:    Size  Location     Type
  1393 ;;		None
  1394 ;; Auto vars:     Size  Location     Type
  1395 ;;  volt            2    8[BANK0 ] unsigned int 
  1396 ;;  rxData          1   11[BANK0 ] unsigned char 
  1397 ;;  bits            1   10[BANK0 ] unsigned char 
  1398 ;; Return value:  Size  Location     Type
  1399 ;;                  2    4[BANK0 ] unsigned int 
  1400 ;; Registers used:
  1401 ;;		wreg, status,2, status,0, btemp+1
  1402 ;; Tracked objects:
  1403 ;;		On entry : 100/0
  1404 ;;		On exit  : 100/0
  1405 ;;		Unchanged: 0/0
  1406 ;; Data sizes:     COMMON   BANK0
  1407 ;;      Params:         0       2
  1408 ;;      Locals:         0       4
  1409 ;;      Temps:          0       2
  1410 ;;      Totals:         0       8
  1411 ;;Total ram usage:        8 bytes
  1412 ;; Hardware stack levels used: 1
  1413 ;; Hardware stack levels required when called: 2
  1414 ;; This function calls:
  1415 ;;		Nothing
  1416 ;; This function is called by:
  1417 ;;		_main
  1418 ;; This function uses a non-reentrant model
  1419 ;;
  1420                           
  1421     0156                     _readADC2:	
  1422                           ;psect for function _readADC2
  1423                           
  1424                           
  1425                           ;adc.c: 51:   unsigned char bits;;adc.c: 52:   unsigned char rxData = 0;
  1426                           
  1427                           ;incstack = 0
  1428                           ; Regs used in _readADC2: [wreg+status,2+status,0+btemp+1]
  1429     0156  0197               	clrf	readADC2@rxData
  1430                           
  1431                           ;adc.c: 55:   RB7 = 0;
  1432     0157  1386               	bcf	6,7	;volatile
  1433                           
  1434                           ;adc.c: 58:   for (bits = 0; bits < 3; bits++)
  1435     0158  0196               	clrf	readADC2@bits
  1436     0159                     l1433:
  1437                           
  1438                           ;adc.c: 59:   {;adc.c: 60:       _delay((unsigned long)((100)*(4000000/4000000.0)));
  1439     0159  3021               	movlw	33
  1440     015A  0092               	movwf	??_readADC2
  1441     015B                     u837:
  1442     015B  0B92               	decfsz	??_readADC2,f
  1443     015C  295B               	goto	u837
  1444                           
  1445                           ;adc.c: 61:       RB5 = 1;
  1446     015D  1283               	bcf	3,5	;RP0=0, select bank0
  1447     015E  1686               	bsf	6,5	;volatile
  1448                           
  1449                           ;adc.c: 62:       _delay((unsigned long)((100)*(4000000/4000000.0)));
  1450     015F  3021               	movlw	33
  1451     0160  0092               	movwf	??_readADC2
  1452     0161                     u847:
  1453     0161  0B92               	decfsz	??_readADC2,f
  1454     0162  2961               	goto	u847
  1455                           
  1456                           ;adc.c: 63:       RB5 = 0;
  1457     0163  1283               	bcf	3,5	;RP0=0, select bank0
  1458     0164  1286               	bcf	6,5	;volatile
  1459                           
  1460                           ;adc.c: 64:   }
  1461     0165  3001               	movlw	1
  1462     0166  00CF               	movwf	79
  1463     0167  084F               	movf	79,w
  1464     0168  0796               	addwf	readADC2@bits,f
  1465     0169  3003               	movlw	3
  1466     016A  0216               	subwf	readADC2@bits,w
  1467     016B  1C03               	skipc
  1468     016C  2959               	goto	l1433
  1469                           
  1470                           ;adc.c: 67:   for (bits = 0; bits < 8; bits++)
  1471     016D  0196               	clrf	readADC2@bits
  1472     016E                     l1449:
  1473                           
  1474                           ;adc.c: 68:   {;adc.c: 70:     _delay((unsigned long)((100)*(4000000/4000000.0)));
  1475     016E  3021               	movlw	33
  1476     016F  0092               	movwf	??_readADC2
  1477     0170                     u857:
  1478     0170  0B92               	decfsz	??_readADC2,f
  1479     0171  2970               	goto	u857
  1480                           
  1481                           ;adc.c: 71:     RB5 = 1;
  1482     0172  1283               	bcf	3,5	;RP0=0, select bank0
  1483     0173  1686               	bsf	6,5	;volatile
  1484                           
  1485                           ;adc.c: 74:     rxData = rxData << 1;
  1486     0174  0817               	movf	readADC2@rxData,w
  1487     0175  0092               	movwf	??_readADC2
  1488     0176  0712               	addwf	??_readADC2,w
  1489     0177  0097               	movwf	readADC2@rxData
  1490                           
  1491                           ;adc.c: 77:     if(RA3 == 1)
  1492     0178  1D85               	btfss	5,3	;volatile
  1493     0179  297D               	goto	l1459
  1494                           
  1495                           ;adc.c: 78:       rxData = rxData | 0x01;
  1496     017A  0817               	movf	readADC2@rxData,w
  1497     017B  3801               	iorlw	1
  1498     017C  297F               	goto	L1
  1499     017D                     l1459:
  1500                           
  1501                           ;adc.c: 80:       rxData = rxData & 0xfe;
  1502     017D  0817               	movf	readADC2@rxData,w
  1503     017E  39FE               	andlw	254
  1504     017F                     L1:
  1505     017F  0097               	movwf	readADC2@rxData
  1506                           
  1507                           ;adc.c: 82:     _delay((unsigned long)((100)*(4000000/4000000.0)));
  1508     0180  3021               	movlw	33
  1509     0181  0092               	movwf	??_readADC2
  1510     0182                     u867:
  1511     0182  0B92               	decfsz	??_readADC2,f
  1512     0183  2982               	goto	u867
  1513                           
  1514                           ;adc.c: 83:     RB5 = 0;
  1515     0184  1283               	bcf	3,5	;RP0=0, select bank0
  1516     0185  1286               	bcf	6,5	;volatile
  1517                           
  1518                           ;adc.c: 84:     }
  1519     0186  3001               	movlw	1
  1520     0187  00CF               	movwf	79
  1521     0188  084F               	movf	79,w
  1522     0189  0796               	addwf	readADC2@bits,f
  1523     018A  3008               	movlw	8
  1524     018B  0216               	subwf	readADC2@bits,w
  1525     018C  1C03               	skipc
  1526     018D  296E               	goto	l1449
  1527                           
  1528                           ;adc.c: 87:   RB7 = 1;
  1529     018E  1786               	bsf	6,7	;volatile
  1530                           
  1531                           ;adc.c: 90:   volt = (rxData << 2);
  1532     018F  0817               	movf	readADC2@rxData,w
  1533     0190  0092               	movwf	??_readADC2
  1534     0191  0193               	clrf	??_readADC2+1
  1535     0192  1003               	clrc
  1536     0193  0D92               	rlf	??_readADC2,f
  1537     0194  0D93               	rlf	??_readADC2+1,f
  1538     0195  1003               	clrc
  1539     0196  0D92               	rlf	??_readADC2,f
  1540     0197  0D93               	rlf	??_readADC2+1,f
  1541     0198  0812               	movf	??_readADC2,w
  1542     0199  0094               	movwf	readADC2@volt
  1543     019A  0813               	movf	??_readADC2+1,w
  1544     019B  0095               	movwf	readADC2@volt+1
  1545                           
  1546                           ;adc.c: 91:   return volt;
  1547     019C  0815               	movf	readADC2@volt+1,w
  1548     019D  0091               	movwf	?_readADC2+1
  1549     019E  0814               	movf	readADC2@volt,w
  1550     019F  0090               	movwf	?_readADC2
  1551     01A0  0008               	return
  1552     01A1                     __end_of_readADC2:
  1553                           
  1554                           	psect	text8
  1555     01A1                     __ptext8:	
  1556 ;; *************** function _readADC1 *****************
  1557 ;; Defined at:
  1558 ;;		line 6 in file "adc.c"
  1559 ;; Parameters:    Size  Location     Type
  1560 ;;		None
  1561 ;; Auto vars:     Size  Location     Type
  1562 ;;  volt            2    8[BANK0 ] unsigned int 
  1563 ;;  rxData          1   11[BANK0 ] unsigned char 
  1564 ;;  bits            1   10[BANK0 ] unsigned char 
  1565 ;; Return value:  Size  Location     Type
  1566 ;;                  2    4[BANK0 ] unsigned int 
  1567 ;; Registers used:
  1568 ;;		wreg, status,2, status,0, btemp+1
  1569 ;; Tracked objects:
  1570 ;;		On entry : 100/0
  1571 ;;		On exit  : 100/0
  1572 ;;		Unchanged: 0/0
  1573 ;; Data sizes:     COMMON   BANK0
  1574 ;;      Params:         0       2
  1575 ;;      Locals:         0       4
  1576 ;;      Temps:          0       2
  1577 ;;      Totals:         0       8
  1578 ;;Total ram usage:        8 bytes
  1579 ;; Hardware stack levels used: 1
  1580 ;; Hardware stack levels required when called: 2
  1581 ;; This function calls:
  1582 ;;		Nothing
  1583 ;; This function is called by:
  1584 ;;		_main
  1585 ;; This function uses a non-reentrant model
  1586 ;;
  1587                           
  1588     01A1                     _readADC1:	
  1589                           ;psect for function _readADC1
  1590                           
  1591                           
  1592                           ;adc.c: 7:   unsigned char bits;;adc.c: 8:   unsigned char rxData = 0;
  1593                           
  1594                           ;incstack = 0
  1595                           ; Regs used in _readADC1: [wreg+status,2+status,0+btemp+1]
  1596     01A1  0197               	clrf	readADC1@rxData
  1597                           
  1598                           ;adc.c: 11:   RB7 = 0;
  1599     01A2  1386               	bcf	6,7	;volatile
  1600                           
  1601                           ;adc.c: 14:   for (bits = 0; bits < 3; bits++)
  1602     01A3  0196               	clrf	readADC1@bits
  1603     01A4                     l1383:
  1604                           
  1605                           ;adc.c: 15:   {;adc.c: 16:       _delay((unsigned long)((100)*(4000000/4000000.0)));
  1606     01A4  3021               	movlw	33
  1607     01A5  0092               	movwf	??_readADC1
  1608     01A6                     u877:
  1609     01A6  0B92               	decfsz	??_readADC1,f
  1610     01A7  29A6               	goto	u877
  1611                           
  1612                           ;adc.c: 17:       RB5 = 1;
  1613     01A8  1283               	bcf	3,5	;RP0=0, select bank0
  1614     01A9  1686               	bsf	6,5	;volatile
  1615                           
  1616                           ;adc.c: 18:       _delay((unsigned long)((100)*(4000000/4000000.0)));
  1617     01AA  3021               	movlw	33
  1618     01AB  0092               	movwf	??_readADC1
  1619     01AC                     u887:
  1620     01AC  0B92               	decfsz	??_readADC1,f
  1621     01AD  29AC               	goto	u887
  1622                           
  1623                           ;adc.c: 19:       RB5 = 0;
  1624     01AE  1283               	bcf	3,5	;RP0=0, select bank0
  1625     01AF  1286               	bcf	6,5	;volatile
  1626                           
  1627                           ;adc.c: 20:   }
  1628     01B0  3001               	movlw	1
  1629     01B1  00CF               	movwf	79
  1630     01B2  084F               	movf	79,w
  1631     01B3  0796               	addwf	readADC1@bits,f
  1632     01B4  3003               	movlw	3
  1633     01B5  0216               	subwf	readADC1@bits,w
  1634     01B6  1C03               	skipc
  1635     01B7  29A4               	goto	l1383
  1636                           
  1637                           ;adc.c: 23:   for (bits = 0; bits < 8; bits++)
  1638     01B8  0196               	clrf	readADC1@bits
  1639     01B9                     l1399:
  1640                           
  1641                           ;adc.c: 24:   {;adc.c: 26:     _delay((unsigned long)((100)*(4000000/4000000.0)));
  1642     01B9  3021               	movlw	33
  1643     01BA  0092               	movwf	??_readADC1
  1644     01BB                     u897:
  1645     01BB  0B92               	decfsz	??_readADC1,f
  1646     01BC  29BB               	goto	u897
  1647                           
  1648                           ;adc.c: 27:     RB5 = 1;
  1649     01BD  1283               	bcf	3,5	;RP0=0, select bank0
  1650     01BE  1686               	bsf	6,5	;volatile
  1651                           
  1652                           ;adc.c: 30:     rxData = rxData << 1;
  1653     01BF  0817               	movf	readADC1@rxData,w
  1654     01C0  0092               	movwf	??_readADC1
  1655     01C1  0712               	addwf	??_readADC1,w
  1656     01C2  0097               	movwf	readADC1@rxData
  1657                           
  1658                           ;adc.c: 33:     if(RB6 == 1)
  1659     01C3  1F06               	btfss	6,6	;volatile
  1660     01C4  29C8               	goto	l1409
  1661                           
  1662                           ;adc.c: 34:       rxData = rxData | 0x01;
  1663     01C5  0817               	movf	readADC1@rxData,w
  1664     01C6  3801               	iorlw	1
  1665     01C7  29CA               	goto	L2
  1666     01C8                     l1409:
  1667                           
  1668                           ;adc.c: 36:       rxData = rxData & 0xfe;
  1669     01C8  0817               	movf	readADC1@rxData,w
  1670     01C9  39FE               	andlw	254
  1671     01CA                     L2:
  1672     01CA  0097               	movwf	readADC1@rxData
  1673                           
  1674                           ;adc.c: 38:     _delay((unsigned long)((100)*(4000000/4000000.0)));
  1675     01CB  3021               	movlw	33
  1676     01CC  0092               	movwf	??_readADC1
  1677     01CD                     u907:
  1678     01CD  0B92               	decfsz	??_readADC1,f
  1679     01CE  29CD               	goto	u907
  1680                           
  1681                           ;adc.c: 39:     RB5 = 0;
  1682     01CF  1283               	bcf	3,5	;RP0=0, select bank0
  1683     01D0  1286               	bcf	6,5	;volatile
  1684                           
  1685                           ;adc.c: 40:     }
  1686     01D1  3001               	movlw	1
  1687     01D2  00CF               	movwf	79
  1688     01D3  084F               	movf	79,w
  1689     01D4  0796               	addwf	readADC1@bits,f
  1690     01D5  3008               	movlw	8
  1691     01D6  0216               	subwf	readADC1@bits,w
  1692     01D7  1C03               	skipc
  1693     01D8  29B9               	goto	l1399
  1694                           
  1695                           ;adc.c: 43:   RB7 = 1;
  1696     01D9  1786               	bsf	6,7	;volatile
  1697                           
  1698                           ;adc.c: 46:   volt = (rxData << 2);
  1699     01DA  0817               	movf	readADC1@rxData,w
  1700     01DB  0092               	movwf	??_readADC1
  1701     01DC  0193               	clrf	??_readADC1+1
  1702     01DD  1003               	clrc
  1703     01DE  0D92               	rlf	??_readADC1,f
  1704     01DF  0D93               	rlf	??_readADC1+1,f
  1705     01E0  1003               	clrc
  1706     01E1  0D92               	rlf	??_readADC1,f
  1707     01E2  0D93               	rlf	??_readADC1+1,f
  1708     01E3  0812               	movf	??_readADC1,w
  1709     01E4  0094               	movwf	readADC1@volt
  1710     01E5  0813               	movf	??_readADC1+1,w
  1711     01E6  0095               	movwf	readADC1@volt+1
  1712                           
  1713                           ;adc.c: 47:   return volt;
  1714     01E7  0815               	movf	readADC1@volt+1,w
  1715     01E8  0091               	movwf	?_readADC1+1
  1716     01E9  0814               	movf	readADC1@volt,w
  1717     01EA  0090               	movwf	?_readADC1
  1718     01EB  0008               	return
  1719     01EC                     __end_of_readADC1:
  1720                           
  1721                           	psect	text9
  1722     030D                     __ptext9:	
  1723 ;; *************** function ___wmul *****************
  1724 ;; Defined at:
  1725 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\Umul16.c"
  1726 ;; Parameters:    Size  Location     Type
  1727 ;;  multiplier      2   16[BANK0 ] unsigned int 
  1728 ;;  multiplicand    2   18[BANK0 ] unsigned int 
  1729 ;; Auto vars:     Size  Location     Type
  1730 ;;  product         2   20[BANK0 ] unsigned int 
  1731 ;; Return value:  Size  Location     Type
  1732 ;;                  2   16[BANK0 ] unsigned int 
  1733 ;; Registers used:
  1734 ;;		wreg, status,2, status,0
  1735 ;; Tracked objects:
  1736 ;;		On entry : 100/0
  1737 ;;		On exit  : 100/0
  1738 ;;		Unchanged: 0/0
  1739 ;; Data sizes:     COMMON   BANK0
  1740 ;;      Params:         0       4
  1741 ;;      Locals:         0       2
  1742 ;;      Temps:          0       0
  1743 ;;      Totals:         0       6
  1744 ;;Total ram usage:        6 bytes
  1745 ;; Hardware stack levels used: 1
  1746 ;; Hardware stack levels required when called: 2
  1747 ;; This function calls:
  1748 ;;		Nothing
  1749 ;; This function is called by:
  1750 ;;		_main
  1751 ;; This function uses a non-reentrant model
  1752 ;;
  1753                           
  1754     030D                     ___wmul:	
  1755                           ;psect for function ___wmul
  1756                           
  1757                           
  1758                           ;incstack = 0
  1759                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  1760     030D  01A0               	clrf	___wmul@product
  1761     030E  01A1               	clrf	___wmul@product+1
  1762     030F                     l1477:
  1763     030F  1C1C               	btfss	___wmul@multiplier,0
  1764     0310  2B17               	goto	l241
  1765     0311  081E               	movf	___wmul@multiplicand,w
  1766     0312  07A0               	addwf	___wmul@product,f
  1767     0313  1803               	skipnc
  1768     0314  0AA1               	incf	___wmul@product+1,f
  1769     0315  081F               	movf	___wmul@multiplicand+1,w
  1770     0316  07A1               	addwf	___wmul@product+1,f
  1771     0317                     l241:
  1772     0317  3001               	movlw	1
  1773     0318                     u775:
  1774     0318  1003               	clrc
  1775     0319  0D9E               	rlf	___wmul@multiplicand,f
  1776     031A  0D9F               	rlf	___wmul@multiplicand+1,f
  1777     031B  3EFF               	addlw	-1
  1778     031C  1D03               	skipz
  1779     031D  2B18               	goto	u775
  1780     031E  3001               	movlw	1
  1781     031F                     u785:
  1782     031F  1003               	clrc
  1783     0320  0C9D               	rrf	___wmul@multiplier+1,f
  1784     0321  0C9C               	rrf	___wmul@multiplier,f
  1785     0322  3EFF               	addlw	-1
  1786     0323  1D03               	skipz
  1787     0324  2B1F               	goto	u785
  1788     0325  081C               	movf	___wmul@multiplier,w
  1789     0326  041D               	iorwf	___wmul@multiplier+1,w
  1790     0327  1D03               	btfss	3,2
  1791     0328  2B0F               	goto	l1477
  1792     0329  0821               	movf	___wmul@product+1,w
  1793     032A  009D               	movwf	?___wmul+1
  1794     032B  0820               	movf	___wmul@product,w
  1795     032C  009C               	movwf	?___wmul
  1796     032D  0008               	return
  1797     032E                     __end_of___wmul:
  1798                           
  1799                           	psect	text10
  1800     03AD                     __ptext10:	
  1801 ;; *************** function _Lcd_Write_Int *****************
  1802 ;; Defined at:
  1803 ;;		line 121 in file "lcd.c"
  1804 ;; Parameters:    Size  Location     Type
  1805 ;;  a               2   24[BANK0 ] unsigned int 
  1806 ;; Auto vars:     Size  Location     Type
  1807 ;;  temp           16   26[BANK0 ] unsigned char [16]
  1808 ;; Return value:  Size  Location     Type
  1809 ;;                  1    wreg      void 
  1810 ;; Registers used:
  1811 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1812 ;; Tracked objects:
  1813 ;;		On entry : 100/0
  1814 ;;		On exit  : 900/0
  1815 ;;		Unchanged: 0/0
  1816 ;; Data sizes:     COMMON   BANK0
  1817 ;;      Params:         0       2
  1818 ;;      Locals:         0      16
  1819 ;;      Temps:          0       0
  1820 ;;      Totals:         0      18
  1821 ;;Total ram usage:       18 bytes
  1822 ;; Hardware stack levels used: 1
  1823 ;; Hardware stack levels required when called: 5
  1824 ;; This function calls:
  1825 ;;		_Lcd_Write_String
  1826 ;;		_utoa
  1827 ;; This function is called by:
  1828 ;;		_main
  1829 ;; This function uses a non-reentrant model
  1830 ;;
  1831                           
  1832     03AD                     _Lcd_Write_Int:	
  1833                           ;psect for function _Lcd_Write_Int
  1834                           
  1835                           
  1836                           ;lcd.c: 121: void Lcd_Write_Int(unsigned int a);lcd.c: 122: {;lcd.c: 123:     char temp[
      +                          16];;lcd.c: 124:     utoa((char*)temp, a, 10);
  1837                           
  1838                           ;incstack = 0
  1839                           ; Regs used in _Lcd_Write_Int: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1840     03AD  0825               	movf	Lcd_Write_Int@a+1,w
  1841     03AE  009D               	movwf	utoa@val+1
  1842     03AF  0824               	movf	Lcd_Write_Int@a,w
  1843     03B0  009C               	movwf	utoa@val
  1844     03B1  300A               	movlw	10
  1845     03B2  009E               	movwf	utoa@base
  1846     03B3  3000               	movlw	0
  1847     03B4  009F               	movwf	utoa@base+1
  1848     03B5  3026               	movlw	(low (Lcd_Write_Int@temp| 0))& (0+255)
  1849     03B6  2102               	fcall	_utoa
  1850                           
  1851                           ;lcd.c: 125:     Lcd_Write_String(temp);
  1852     03B7  3026               	movlw	(low (Lcd_Write_Int@temp| 0))& (0+255)
  1853     03B8  232E               	fcall	_Lcd_Write_String
  1854     03B9  0008               	return
  1855     03BA                     __end_of_Lcd_Write_Int:
  1856                           
  1857                           	psect	text11
  1858     0102                     __ptext11:	
  1859 ;; *************** function _utoa *****************
  1860 ;; Defined at:
  1861 ;;		line 17 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\itoa.c"
  1862 ;; Parameters:    Size  Location     Type
  1863 ;;  buf             1    wreg     PTR unsigned char 
  1864 ;;		 -> Lcd_Write_Int@temp(16), 
  1865 ;;  val             2   16[BANK0 ] unsigned int 
  1866 ;;  base            2   18[BANK0 ] int 
  1867 ;; Auto vars:     Size  Location     Type
  1868 ;;  buf             1   23[BANK0 ] PTR unsigned char 
  1869 ;;		 -> Lcd_Write_Int@temp(16), 
  1870 ;;  v               2   20[BANK0 ] unsigned int 
  1871 ;;  c               1   22[BANK0 ] unsigned char 
  1872 ;; Return value:  Size  Location     Type
  1873 ;;                  1    wreg      PTR unsigned char 
  1874 ;; Registers used:
  1875 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1876 ;; Tracked objects:
  1877 ;;		On entry : 100/0
  1878 ;;		On exit  : 900/0
  1879 ;;		Unchanged: 0/0
  1880 ;; Data sizes:     COMMON   BANK0
  1881 ;;      Params:         0       4
  1882 ;;      Locals:         0       4
  1883 ;;      Temps:          0       0
  1884 ;;      Totals:         0       8
  1885 ;;Total ram usage:        8 bytes
  1886 ;; Hardware stack levels used: 1
  1887 ;; Hardware stack levels required when called: 3
  1888 ;; This function calls:
  1889 ;;		___lwdiv
  1890 ;;		___lwmod
  1891 ;; This function is called by:
  1892 ;;		_Lcd_Write_Int
  1893 ;; This function uses a non-reentrant model
  1894 ;;
  1895                           
  1896     0102                     _utoa:	
  1897                           ;psect for function _utoa
  1898                           
  1899                           
  1900                           ;incstack = 0
  1901                           ; Regs used in _utoa: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1902                           ;utoa@buf stored from wreg
  1903     0102  00A3               	movwf	utoa@buf
  1904     0103  081D               	movf	utoa@val+1,w
  1905     0104  00A1               	movwf	utoa@v+1
  1906     0105  081C               	movf	utoa@val,w
  1907     0106  00A0               	movwf	utoa@v
  1908     0107                     l1311:
  1909     0107  081F               	movf	utoa@base+1,w
  1910     0108  0096               	movwf	___lwdiv@divisor+1
  1911     0109  081E               	movf	utoa@base,w
  1912     010A  0095               	movwf	___lwdiv@divisor
  1913     010B  0821               	movf	utoa@v+1,w
  1914     010C  0098               	movwf	___lwdiv@dividend+1
  1915     010D  0820               	movf	utoa@v,w
  1916     010E  0097               	movwf	___lwdiv@dividend
  1917     010F  21EC               	fcall	___lwdiv
  1918     0110  0816               	movf	?___lwdiv+1,w
  1919     0111  00A1               	movwf	utoa@v+1
  1920     0112  0815               	movf	?___lwdiv,w
  1921     0113  00A0               	movwf	utoa@v
  1922     0114  3001               	movlw	1
  1923     0115  00CF               	movwf	79
  1924     0116  084F               	movf	79,w
  1925     0117  07A3               	addwf	utoa@buf,f
  1926     0118  0820               	movf	utoa@v,w
  1927     0119  0421               	iorwf	utoa@v+1,w
  1928     011A  1D03               	btfss	3,2
  1929     011B  2907               	goto	l1311
  1930     011C  0823               	movf	utoa@buf,w
  1931     011D  0084               	movwf	4
  1932     011E  1383               	bcf	3,7	;select IRP bank0
  1933     011F  0180               	clrf	0
  1934     0120  3001               	movlw	1
  1935     0121  02A3               	subwf	utoa@buf,f
  1936     0122                     l1321:
  1937     0122  081F               	movf	utoa@base+1,w
  1938     0123  0091               	movwf	___lwmod@divisor+1
  1939     0124  081E               	movf	utoa@base,w
  1940     0125  0090               	movwf	___lwmod@divisor
  1941     0126  081D               	movf	utoa@val+1,w
  1942     0127  0093               	movwf	___lwmod@dividend+1
  1943     0128  081C               	movf	utoa@val,w
  1944     0129  0092               	movwf	___lwmod@dividend
  1945     012A  225A               	fcall	___lwmod
  1946     012B  0810               	movf	?___lwmod,w
  1947     012C  00A2               	movwf	utoa@c
  1948     012D  081F               	movf	utoa@base+1,w
  1949     012E  0096               	movwf	___lwdiv@divisor+1
  1950     012F  081E               	movf	utoa@base,w
  1951     0130  0095               	movwf	___lwdiv@divisor
  1952     0131  081D               	movf	utoa@val+1,w
  1953     0132  0098               	movwf	___lwdiv@dividend+1
  1954     0133  081C               	movf	utoa@val,w
  1955     0134  0097               	movwf	___lwdiv@dividend
  1956     0135  21EC               	fcall	___lwdiv
  1957     0136  0816               	movf	?___lwdiv+1,w
  1958     0137  009D               	movwf	utoa@val+1
  1959     0138  0815               	movf	?___lwdiv,w
  1960     0139  009C               	movwf	utoa@val
  1961     013A  300A               	movlw	10
  1962     013B  0222               	subwf	utoa@c,w
  1963     013C  1C03               	skipc
  1964     013D  2942               	goto	l701
  1965     013E  3007               	movlw	7
  1966     013F  00CF               	movwf	79
  1967     0140  084F               	movf	79,w
  1968     0141  07A2               	addwf	utoa@c,f
  1969     0142                     l701:
  1970     0142  3030               	movlw	48
  1971     0143  00CF               	movwf	79
  1972     0144  084F               	movf	79,w
  1973     0145  07A2               	addwf	utoa@c,f
  1974     0146  0823               	movf	utoa@buf,w
  1975     0147  0084               	movwf	4
  1976     0148  0822               	movf	utoa@c,w
  1977     0149  1383               	bcf	3,7	;select IRP bank0
  1978     014A  0080               	movwf	0
  1979     014B  3001               	movlw	1
  1980     014C  02A3               	subwf	utoa@buf,f
  1981     014D  081C               	movf	utoa@val,w
  1982     014E  041D               	iorwf	utoa@val+1,w
  1983     014F  1D03               	btfss	3,2
  1984     0150  2922               	goto	l1321
  1985                           
  1986                           ;	Return value of _utoa is never used
  1987     0151  3001               	movlw	1
  1988     0152  00CF               	movwf	79
  1989     0153  084F               	movf	79,w
  1990     0154  07A3               	addwf	utoa@buf,f
  1991     0155  0008               	return
  1992     0156                     __end_of_utoa:
  1993                           
  1994                           	psect	text12
  1995     025A                     __ptext12:	
  1996 ;; *************** function ___lwmod *****************
  1997 ;; Defined at:
  1998 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\lwmod.c"
  1999 ;; Parameters:    Size  Location     Type
  2000 ;;  divisor         2    4[BANK0 ] unsigned int 
  2001 ;;  dividend        2    6[BANK0 ] unsigned int 
  2002 ;; Auto vars:     Size  Location     Type
  2003 ;;  counter         1    8[BANK0 ] unsigned char 
  2004 ;; Return value:  Size  Location     Type
  2005 ;;                  2    4[BANK0 ] unsigned int 
  2006 ;; Registers used:
  2007 ;;		wreg, status,2, status,0, btemp+1
  2008 ;; Tracked objects:
  2009 ;;		On entry : 100/0
  2010 ;;		On exit  : 100/0
  2011 ;;		Unchanged: 0/0
  2012 ;; Data sizes:     COMMON   BANK0
  2013 ;;      Params:         0       4
  2014 ;;      Locals:         0       1
  2015 ;;      Temps:          0       0
  2016 ;;      Totals:         0       5
  2017 ;;Total ram usage:        5 bytes
  2018 ;; Hardware stack levels used: 1
  2019 ;; Hardware stack levels required when called: 2
  2020 ;; This function calls:
  2021 ;;		Nothing
  2022 ;; This function is called by:
  2023 ;;		_main
  2024 ;;		_utoa
  2025 ;; This function uses a non-reentrant model
  2026 ;;
  2027                           
  2028     025A                     ___lwmod:	
  2029                           ;psect for function ___lwmod
  2030                           
  2031                           
  2032                           ;incstack = 0
  2033                           ; Regs used in ___lwmod: [wreg+status,2+status,0+btemp+1]
  2034     025A  0810               	movf	___lwmod@divisor,w
  2035     025B  0411               	iorwf	___lwmod@divisor+1,w
  2036     025C  1903               	btfsc	3,2
  2037     025D  2A87               	goto	l1255
  2038     025E  0194               	clrf	___lwmod@counter
  2039     025F  0A94               	incf	___lwmod@counter,f
  2040     0260                     l1245:
  2041     0260  1B91               	btfsc	___lwmod@divisor+1,7
  2042     0261  2A6E               	goto	l1247
  2043     0262  3001               	movlw	1
  2044     0263                     u545:
  2045     0263  1003               	clrc
  2046     0264  0D90               	rlf	___lwmod@divisor,f
  2047     0265  0D91               	rlf	___lwmod@divisor+1,f
  2048     0266  3EFF               	addlw	-1
  2049     0267  1D03               	skipz
  2050     0268  2A63               	goto	u545
  2051     0269  3001               	movlw	1
  2052     026A  00CF               	movwf	79
  2053     026B  084F               	movf	79,w
  2054     026C  0794               	addwf	___lwmod@counter,f
  2055     026D  2A60               	goto	l1245
  2056     026E                     l1247:
  2057     026E  0811               	movf	___lwmod@divisor+1,w
  2058     026F  0213               	subwf	___lwmod@dividend+1,w
  2059     0270  1D03               	skipz
  2060     0271  2A74               	goto	u565
  2061     0272  0810               	movf	___lwmod@divisor,w
  2062     0273  0212               	subwf	___lwmod@dividend,w
  2063     0274                     u565:
  2064     0274  1C03               	skipc
  2065     0275  2A7C               	goto	l1251
  2066     0276  0810               	movf	___lwmod@divisor,w
  2067     0277  0292               	subwf	___lwmod@dividend,f
  2068     0278  0811               	movf	___lwmod@divisor+1,w
  2069     0279  1C03               	skipc
  2070     027A  0393               	decf	___lwmod@dividend+1,f
  2071     027B  0293               	subwf	___lwmod@dividend+1,f
  2072     027C                     l1251:
  2073     027C  3001               	movlw	1
  2074     027D                     u575:
  2075     027D  1003               	clrc
  2076     027E  0C91               	rrf	___lwmod@divisor+1,f
  2077     027F  0C90               	rrf	___lwmod@divisor,f
  2078     0280  3EFF               	addlw	-1
  2079     0281  1D03               	skipz
  2080     0282  2A7D               	goto	u575
  2081     0283  3001               	movlw	1
  2082     0284  0294               	subwf	___lwmod@counter,f
  2083     0285  1D03               	btfss	3,2
  2084     0286  2A6E               	goto	l1247
  2085     0287                     l1255:
  2086     0287  0813               	movf	___lwmod@dividend+1,w
  2087     0288  0091               	movwf	?___lwmod+1
  2088     0289  0812               	movf	___lwmod@dividend,w
  2089     028A  0090               	movwf	?___lwmod
  2090     028B  0008               	return
  2091     028C                     __end_of___lwmod:
  2092                           
  2093                           	psect	text13
  2094     01EC                     __ptext13:	
  2095 ;; *************** function ___lwdiv *****************
  2096 ;; Defined at:
  2097 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\lwdiv.c"
  2098 ;; Parameters:    Size  Location     Type
  2099 ;;  divisor         2    9[BANK0 ] unsigned int 
  2100 ;;  dividend        2   11[BANK0 ] unsigned int 
  2101 ;; Auto vars:     Size  Location     Type
  2102 ;;  quotient        2   13[BANK0 ] unsigned int 
  2103 ;;  counter         1   15[BANK0 ] unsigned char 
  2104 ;; Return value:  Size  Location     Type
  2105 ;;                  2    9[BANK0 ] unsigned int 
  2106 ;; Registers used:
  2107 ;;		wreg, status,2, status,0, btemp+1
  2108 ;; Tracked objects:
  2109 ;;		On entry : 100/0
  2110 ;;		On exit  : 100/0
  2111 ;;		Unchanged: 0/0
  2112 ;; Data sizes:     COMMON   BANK0
  2113 ;;      Params:         0       4
  2114 ;;      Locals:         0       3
  2115 ;;      Temps:          0       0
  2116 ;;      Totals:         0       7
  2117 ;;Total ram usage:        7 bytes
  2118 ;; Hardware stack levels used: 1
  2119 ;; Hardware stack levels required when called: 2
  2120 ;; This function calls:
  2121 ;;		Nothing
  2122 ;; This function is called by:
  2123 ;;		_main
  2124 ;;		_utoa
  2125 ;; This function uses a non-reentrant model
  2126 ;;
  2127                           
  2128     01EC                     ___lwdiv:	
  2129                           ;psect for function ___lwdiv
  2130                           
  2131                           
  2132                           ;incstack = 0
  2133                           ; Regs used in ___lwdiv: [wreg+status,2+status,0+btemp+1]
  2134     01EC  0199               	clrf	___lwdiv@quotient
  2135     01ED  019A               	clrf	___lwdiv@quotient+1
  2136     01EE  0815               	movf	___lwdiv@divisor,w
  2137     01EF  0416               	iorwf	___lwdiv@divisor+1,w
  2138     01F0  1903               	btfsc	3,2
  2139     01F1  2A23               	goto	l1233
  2140     01F2  019B               	clrf	___lwdiv@counter
  2141     01F3  0A9B               	incf	___lwdiv@counter,f
  2142     01F4                     l1221:
  2143     01F4  1B96               	btfsc	___lwdiv@divisor+1,7
  2144     01F5  2A02               	goto	l1223
  2145     01F6  3001               	movlw	1
  2146     01F7                     u475:
  2147     01F7  1003               	clrc
  2148     01F8  0D95               	rlf	___lwdiv@divisor,f
  2149     01F9  0D96               	rlf	___lwdiv@divisor+1,f
  2150     01FA  3EFF               	addlw	-1
  2151     01FB  1D03               	skipz
  2152     01FC  29F7               	goto	u475
  2153     01FD  3001               	movlw	1
  2154     01FE  00CF               	movwf	79
  2155     01FF  084F               	movf	79,w
  2156     0200  079B               	addwf	___lwdiv@counter,f
  2157     0201  29F4               	goto	l1221
  2158     0202                     l1223:
  2159     0202  3001               	movlw	1
  2160     0203                     u495:
  2161     0203  1003               	clrc
  2162     0204  0D99               	rlf	___lwdiv@quotient,f
  2163     0205  0D9A               	rlf	___lwdiv@quotient+1,f
  2164     0206  3EFF               	addlw	-1
  2165     0207  1D03               	skipz
  2166     0208  2A03               	goto	u495
  2167     0209  0816               	movf	___lwdiv@divisor+1,w
  2168     020A  0218               	subwf	___lwdiv@dividend+1,w
  2169     020B  1D03               	skipz
  2170     020C  2A0F               	goto	u505
  2171     020D  0815               	movf	___lwdiv@divisor,w
  2172     020E  0217               	subwf	___lwdiv@dividend,w
  2173     020F                     u505:
  2174     020F  1C03               	skipc
  2175     0210  2A18               	goto	l1229
  2176     0211  0815               	movf	___lwdiv@divisor,w
  2177     0212  0297               	subwf	___lwdiv@dividend,f
  2178     0213  0816               	movf	___lwdiv@divisor+1,w
  2179     0214  1C03               	skipc
  2180     0215  0398               	decf	___lwdiv@dividend+1,f
  2181     0216  0298               	subwf	___lwdiv@dividend+1,f
  2182     0217  1419               	bsf	___lwdiv@quotient,0
  2183     0218                     l1229:
  2184     0218  3001               	movlw	1
  2185     0219                     u515:
  2186     0219  1003               	clrc
  2187     021A  0C96               	rrf	___lwdiv@divisor+1,f
  2188     021B  0C95               	rrf	___lwdiv@divisor,f
  2189     021C  3EFF               	addlw	-1
  2190     021D  1D03               	skipz
  2191     021E  2A19               	goto	u515
  2192     021F  3001               	movlw	1
  2193     0220  029B               	subwf	___lwdiv@counter,f
  2194     0221  1D03               	btfss	3,2
  2195     0222  2A02               	goto	l1223
  2196     0223                     l1233:
  2197     0223  081A               	movf	___lwdiv@quotient+1,w
  2198     0224  0096               	movwf	?___lwdiv+1
  2199     0225  0819               	movf	___lwdiv@quotient,w
  2200     0226  0095               	movwf	?___lwdiv
  2201     0227  0008               	return
  2202     0228                     __end_of___lwdiv:
  2203                           
  2204                           	psect	text14
  2205     032E                     __ptext14:	
  2206 ;; *************** function _Lcd_Write_String *****************
  2207 ;; Defined at:
  2208 ;;		line 111 in file "lcd.c"
  2209 ;; Parameters:    Size  Location     Type
  2210 ;;  a               1    wreg     PTR unsigned char 
  2211 ;;		 -> Lcd_Write_Int@temp(16), welcomeMessage@msg(8), 
  2212 ;; Auto vars:     Size  Location     Type
  2213 ;;  a               1   12[BANK0 ] PTR unsigned char 
  2214 ;;		 -> Lcd_Write_Int@temp(16), welcomeMessage@msg(8), 
  2215 ;;  i               2   10[BANK0 ] int 
  2216 ;; Return value:  Size  Location     Type
  2217 ;;                  1    wreg      void 
  2218 ;; Registers used:
  2219 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2220 ;; Tracked objects:
  2221 ;;		On entry : 100/0
  2222 ;;		On exit  : 900/0
  2223 ;;		Unchanged: 0/0
  2224 ;; Data sizes:     COMMON   BANK0
  2225 ;;      Params:         0       0
  2226 ;;      Locals:         0       3
  2227 ;;      Temps:          0       1
  2228 ;;      Totals:         0       4
  2229 ;;Total ram usage:        4 bytes
  2230 ;; Hardware stack levels used: 1
  2231 ;; Hardware stack levels required when called: 4
  2232 ;; This function calls:
  2233 ;;		_Lcd_Write_Char
  2234 ;; This function is called by:
  2235 ;;		_welcomeMessage
  2236 ;;		_Lcd_Write_Int
  2237 ;; This function uses a non-reentrant model
  2238 ;;
  2239                           
  2240     032E                     _Lcd_Write_String:	
  2241                           ;psect for function _Lcd_Write_String
  2242                           
  2243                           
  2244                           ;incstack = 0
  2245                           ; Regs used in _Lcd_Write_String: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2246                           ;Lcd_Write_String@a stored from wreg
  2247     032E  0098               	movwf	Lcd_Write_String@a
  2248                           
  2249                           ;lcd.c: 111: void Lcd_Write_String(char *a);lcd.c: 112: {;lcd.c: 113:  int i;;lcd.c: 114
      +                          :  for(i=0;a[i]!='\0';i++)
  2250     032F  0196               	clrf	Lcd_Write_String@i
  2251     0330  0197               	clrf	Lcd_Write_String@i+1
  2252     0331                     l1301:
  2253     0331  0816               	movf	Lcd_Write_String@i,w
  2254     0332  0718               	addwf	Lcd_Write_String@a,w
  2255     0333  0095               	movwf	??_Lcd_Write_String
  2256     0334  0815               	movf	??_Lcd_Write_String,w
  2257     0335  0084               	movwf	4
  2258     0336  1383               	bcf	3,7	;select IRP bank0
  2259     0337  0800               	movf	0,w
  2260     0338  1903               	btfsc	3,2
  2261     0339  0008               	return
  2262                           
  2263                           ;lcd.c: 115:     {;lcd.c: 116:         Lcd_Write_Char(a[i]);
  2264     033A  0816               	movf	Lcd_Write_String@i,w
  2265     033B  0718               	addwf	Lcd_Write_String@a,w
  2266     033C  0095               	movwf	??_Lcd_Write_String
  2267     033D  0815               	movf	??_Lcd_Write_String,w
  2268     033E  0084               	movwf	4
  2269     033F  0800               	movf	0,w
  2270     0340  22EA               	fcall	_Lcd_Write_Char
  2271                           
  2272                           ;lcd.c: 117:     }
  2273     0341  3001               	movlw	1
  2274     0342  0796               	addwf	Lcd_Write_String@i,f
  2275     0343  1803               	skipnc
  2276     0344  0A97               	incf	Lcd_Write_String@i+1,f
  2277     0345  3000               	movlw	0
  2278     0346  0797               	addwf	Lcd_Write_String@i+1,f
  2279     0347  2B31               	goto	l1301
  2280     0348                     __end_of_Lcd_Write_String:
  2281                           
  2282                           	psect	text15
  2283     02EA                     __ptext15:	
  2284 ;; *************** function _Lcd_Write_Char *****************
  2285 ;; Defined at:
  2286 ;;		line 94 in file "lcd.c"
  2287 ;; Parameters:    Size  Location     Type
  2288 ;;  a               1    wreg     unsigned char 
  2289 ;; Auto vars:     Size  Location     Type
  2290 ;;  a               1    8[BANK0 ] unsigned char 
  2291 ;;  y               1    7[BANK0 ] unsigned char 
  2292 ;;  temp            1    6[BANK0 ] unsigned char 
  2293 ;; Return value:  Size  Location     Type
  2294 ;;                  1    wreg      void 
  2295 ;; Registers used:
  2296 ;;		wreg, status,2, status,0, pclath, cstack
  2297 ;; Tracked objects:
  2298 ;;		On entry : 100/0
  2299 ;;		On exit  : 100/0
  2300 ;;		Unchanged: 0/0
  2301 ;; Data sizes:     COMMON   BANK0
  2302 ;;      Params:         0       0
  2303 ;;      Locals:         0       3
  2304 ;;      Temps:          0       1
  2305 ;;      Totals:         0       4
  2306 ;;Total ram usage:        4 bytes
  2307 ;; Hardware stack levels used: 1
  2308 ;; Hardware stack levels required when called: 3
  2309 ;; This function calls:
  2310 ;;		_Lcd_Port
  2311 ;; This function is called by:
  2312 ;;		_main
  2313 ;;		_Lcd_Write_String
  2314 ;; This function uses a non-reentrant model
  2315 ;;
  2316                           
  2317     02EA                     _Lcd_Write_Char:	
  2318                           ;psect for function _Lcd_Write_Char
  2319                           
  2320                           
  2321                           ;incstack = 0
  2322                           ; Regs used in _Lcd_Write_Char: [wreg+status,2+status,0+pclath+cstack]
  2323                           ;Lcd_Write_Char@a stored from wreg
  2324     02EA  0094               	movwf	Lcd_Write_Char@a
  2325                           
  2326                           ;lcd.c: 94: void Lcd_Write_Char(char a);lcd.c: 95: {;lcd.c: 96:    char temp,y;;lcd.c: 9
      +                          7:    temp = a&0x0F;
  2327     02EB  0814               	movf	Lcd_Write_Char@a,w
  2328     02EC  390F               	andlw	15
  2329     02ED  0092               	movwf	Lcd_Write_Char@temp
  2330                           
  2331                           ;lcd.c: 98:    y = a&0xF0;
  2332     02EE  0814               	movf	Lcd_Write_Char@a,w
  2333     02EF  39F0               	andlw	240
  2334     02F0  0093               	movwf	Lcd_Write_Char@y
  2335                           
  2336                           ;lcd.c: 99:    RA0 = 1;
  2337     02F1  1405               	bsf	5,0	;volatile
  2338                           
  2339                           ;lcd.c: 100:    Lcd_Port(y>>4);
  2340     02F2  0813               	movf	Lcd_Write_Char@y,w
  2341     02F3  0091               	movwf	??_Lcd_Write_Char
  2342     02F4  3004               	movlw	4
  2343     02F5                     u455:
  2344     02F5  1003               	clrc
  2345     02F6  0C91               	rrf	??_Lcd_Write_Char,f
  2346     02F7  3EFF               	addlw	-1
  2347     02F8  1D03               	skipz
  2348     02F9  2AF5               	goto	u455
  2349     02FA  0811               	movf	??_Lcd_Write_Char,w
  2350     02FB  2360               	fcall	_Lcd_Port
  2351                           
  2352                           ;lcd.c: 101:    RA2 = 1;
  2353     02FC  1505               	bsf	5,2	;volatile
  2354                           
  2355                           ;lcd.c: 102:    _delay((unsigned long)((40)*(4000000/4000000.0)));
  2356     02FD  300D               	movlw	13
  2357     02FE  0091               	movwf	??_Lcd_Write_Char
  2358     02FF                     u917:
  2359     02FF  0B91               	decfsz	??_Lcd_Write_Char,f
  2360     0300  2AFF               	goto	u917
  2361                           
  2362                           ;lcd.c: 103:    RA2 = 0;
  2363     0301  1283               	bcf	3,5	;RP0=0, select bank0
  2364     0302  1105               	bcf	5,2	;volatile
  2365                           
  2366                           ;lcd.c: 104:    Lcd_Port(temp);
  2367     0303  0812               	movf	Lcd_Write_Char@temp,w
  2368     0304  2360               	fcall	_Lcd_Port
  2369                           
  2370                           ;lcd.c: 105:    RA2 = 1;
  2371     0305  1505               	bsf	5,2	;volatile
  2372                           
  2373                           ;lcd.c: 106:    _delay((unsigned long)((40)*(4000000/4000000.0)));
  2374     0306  300D               	movlw	13
  2375     0307  0091               	movwf	??_Lcd_Write_Char
  2376     0308                     u927:
  2377     0308  0B91               	decfsz	??_Lcd_Write_Char,f
  2378     0309  2B08               	goto	u927
  2379                           
  2380                           ;lcd.c: 107:    RA2 = 0;
  2381     030A  1283               	bcf	3,5	;RP0=0, select bank0
  2382     030B  1105               	bcf	5,2	;volatile
  2383     030C  0008               	return
  2384     030D                     __end_of_Lcd_Write_Char:
  2385                           
  2386                           	psect	text16
  2387     028C                     __ptext16:	
  2388 ;; *************** function _Lcd_Init *****************
  2389 ;; Defined at:
  2390 ;;		line 74 in file "lcd.c"
  2391 ;; Parameters:    Size  Location     Type
  2392 ;;		None
  2393 ;; Auto vars:     Size  Location     Type
  2394 ;;		None
  2395 ;; Return value:  Size  Location     Type
  2396 ;;                  1    wreg      void 
  2397 ;; Registers used:
  2398 ;;		wreg, status,2, status,0, pclath, cstack
  2399 ;; Tracked objects:
  2400 ;;		On entry : B00/100
  2401 ;;		On exit  : 100/0
  2402 ;;		Unchanged: 0/0
  2403 ;; Data sizes:     COMMON   BANK0
  2404 ;;      Params:         0       0
  2405 ;;      Locals:         0       0
  2406 ;;      Temps:          0       2
  2407 ;;      Totals:         0       2
  2408 ;;Total ram usage:        2 bytes
  2409 ;; Hardware stack levels used: 1
  2410 ;; Hardware stack levels required when called: 4
  2411 ;; This function calls:
  2412 ;;		_Lcd_Cmd
  2413 ;;		_Lcd_Port
  2414 ;; This function is called by:
  2415 ;;		_main
  2416 ;; This function uses a non-reentrant model
  2417 ;;
  2418                           
  2419     028C                     _Lcd_Init:	
  2420                           ;psect for function _Lcd_Init
  2421                           
  2422                           
  2423                           ;lcd.c: 76:   Lcd_Port(0x00);
  2424                           
  2425                           ;incstack = 0
  2426                           ; Regs used in _Lcd_Init: [wreg+status,2+status,0+pclath+cstack]
  2427     028C  3000               	movlw	0
  2428     028D  2360               	fcall	_Lcd_Port
  2429                           
  2430                           ;lcd.c: 77:    _delay((unsigned long)((20)*(4000000/4000.0)));
  2431     028E  301A               	movlw	26
  2432     028F  0095               	movwf	??_Lcd_Init+1
  2433     0290  30F8               	movlw	248
  2434     0291  0094               	movwf	??_Lcd_Init
  2435     0292                     u937:
  2436     0292  0B94               	decfsz	??_Lcd_Init,f
  2437     0293  2A92               	goto	u937
  2438     0294  0B95               	decfsz	??_Lcd_Init+1,f
  2439     0295  2A92               	goto	u937
  2440     0296  0000               	nop
  2441                           
  2442                           ;lcd.c: 78:   Lcd_Cmd(0x03);
  2443     0297  3003               	movlw	3
  2444     0298  238D               	fcall	_Lcd_Cmd
  2445                           
  2446                           ;lcd.c: 79:  _delay((unsigned long)((5)*(4000000/4000.0)));
  2447     0299  3007               	movlw	7
  2448     029A  0095               	movwf	??_Lcd_Init+1
  2449     029B  307D               	movlw	125
  2450     029C  0094               	movwf	??_Lcd_Init
  2451     029D                     u947:
  2452     029D  0B94               	decfsz	??_Lcd_Init,f
  2453     029E  2A9D               	goto	u947
  2454     029F  0B95               	decfsz	??_Lcd_Init+1,f
  2455     02A0  2A9D               	goto	u947
  2456                           
  2457                           ;lcd.c: 80:   Lcd_Cmd(0x03);
  2458     02A1  3003               	movlw	3
  2459     02A2  238D               	fcall	_Lcd_Cmd
  2460                           
  2461                           ;lcd.c: 81:  _delay((unsigned long)((11)*(4000000/4000.0)));
  2462     02A3  300F               	movlw	15
  2463     02A4  0095               	movwf	??_Lcd_Init+1
  2464     02A5  3047               	movlw	71
  2465     02A6  0094               	movwf	??_Lcd_Init
  2466     02A7                     u957:
  2467     02A7  0B94               	decfsz	??_Lcd_Init,f
  2468     02A8  2AA7               	goto	u957
  2469     02A9  0B95               	decfsz	??_Lcd_Init+1,f
  2470     02AA  2AA7               	goto	u957
  2471     02AB  2AAC               	nop2
  2472                           
  2473                           ;lcd.c: 82:   Lcd_Cmd(0x03);
  2474     02AC  3003               	movlw	3
  2475     02AD  238D               	fcall	_Lcd_Cmd
  2476                           
  2477                           ;lcd.c: 84:   Lcd_Cmd(0x02);
  2478     02AE  3002               	movlw	2
  2479     02AF  238D               	fcall	_Lcd_Cmd
  2480                           
  2481                           ;lcd.c: 85:   Lcd_Cmd(0x02);
  2482     02B0  3002               	movlw	2
  2483     02B1  238D               	fcall	_Lcd_Cmd
  2484                           
  2485                           ;lcd.c: 86:   Lcd_Cmd(0x08);
  2486     02B2  3008               	movlw	8
  2487     02B3  238D               	fcall	_Lcd_Cmd
  2488                           
  2489                           ;lcd.c: 87:   Lcd_Cmd(0x00);
  2490     02B4  3000               	movlw	0
  2491     02B5  238D               	fcall	_Lcd_Cmd
  2492                           
  2493                           ;lcd.c: 88:   Lcd_Cmd(0x0C);
  2494     02B6  300C               	movlw	12
  2495     02B7  238D               	fcall	_Lcd_Cmd
  2496                           
  2497                           ;lcd.c: 89:   Lcd_Cmd(0x00);
  2498     02B8  3000               	movlw	0
  2499     02B9  238D               	fcall	_Lcd_Cmd
  2500                           
  2501                           ;lcd.c: 90:   Lcd_Cmd(0x06);
  2502     02BA  3006               	movlw	6
  2503     02BB  238D               	fcall	_Lcd_Cmd
  2504     02BC  0008               	return
  2505     02BD                     __end_of_Lcd_Init:
  2506                           
  2507                           	psect	text17
  2508     038D                     __ptext17:	
  2509 ;; *************** function _Lcd_Cmd *****************
  2510 ;; Defined at:
  2511 ;;		line 31 in file "lcd.c"
  2512 ;; Parameters:    Size  Location     Type
  2513 ;;  a               1    wreg     unsigned char 
  2514 ;; Auto vars:     Size  Location     Type
  2515 ;;  a               1    7[BANK0 ] unsigned char 
  2516 ;; Return value:  Size  Location     Type
  2517 ;;                  1    wreg      void 
  2518 ;; Registers used:
  2519 ;;		wreg, status,2, status,0, pclath, cstack
  2520 ;; Tracked objects:
  2521 ;;		On entry : 0/0
  2522 ;;		On exit  : 100/0
  2523 ;;		Unchanged: 0/0
  2524 ;; Data sizes:     COMMON   BANK0
  2525 ;;      Params:         0       0
  2526 ;;      Locals:         0       1
  2527 ;;      Temps:          0       2
  2528 ;;      Totals:         0       3
  2529 ;;Total ram usage:        3 bytes
  2530 ;; Hardware stack levels used: 1
  2531 ;; Hardware stack levels required when called: 3
  2532 ;; This function calls:
  2533 ;;		_Lcd_Port
  2534 ;; This function is called by:
  2535 ;;		_Lcd_Clear
  2536 ;;		_Lcd_Set_Cursor
  2537 ;;		_Lcd_Init
  2538 ;; This function uses a non-reentrant model
  2539 ;;
  2540                           
  2541     038D                     _Lcd_Cmd:	
  2542                           ;psect for function _Lcd_Cmd
  2543                           
  2544                           
  2545                           ;incstack = 0
  2546                           ; Regs used in _Lcd_Cmd: [wreg+status,2+status,0+pclath+cstack]
  2547                           ;Lcd_Cmd@a stored from wreg
  2548     038D  1283               	bcf	3,5	;RP0=0, select bank0
  2549     038E  0093               	movwf	Lcd_Cmd@a
  2550                           
  2551                           ;lcd.c: 31: void Lcd_Cmd(char a);lcd.c: 32: {;lcd.c: 34:     RA0 = 0;
  2552     038F  1005               	bcf	5,0	;volatile
  2553                           
  2554                           ;lcd.c: 35:  Lcd_Port(a);
  2555     0390  0813               	movf	Lcd_Cmd@a,w
  2556     0391  2360               	fcall	_Lcd_Port
  2557                           
  2558                           ;lcd.c: 38:  RA2 = 1;
  2559     0392  1505               	bsf	5,2	;volatile
  2560                           
  2561                           ;lcd.c: 39:     _delay((unsigned long)((4)*(4000000/4000.0)));
  2562     0393  3006               	movlw	6
  2563     0394  0092               	movwf	??_Lcd_Cmd+1
  2564     0395  3030               	movlw	48
  2565     0396  0091               	movwf	??_Lcd_Cmd
  2566     0397                     u967:
  2567     0397  0B91               	decfsz	??_Lcd_Cmd,f
  2568     0398  2B97               	goto	u967
  2569     0399  0B92               	decfsz	??_Lcd_Cmd+1,f
  2570     039A  2B97               	goto	u967
  2571     039B  0000               	nop
  2572                           
  2573                           ;lcd.c: 40:     RA2 = 0;
  2574     039C  1283               	bcf	3,5	;RP0=0, select bank0
  2575     039D  1105               	bcf	5,2	;volatile
  2576     039E  0008               	return
  2577     039F                     __end_of_Lcd_Cmd:
  2578                           
  2579                           	psect	text18
  2580     0360                     __ptext18:	
  2581 ;; *************** function _Lcd_Port *****************
  2582 ;; Defined at:
  2583 ;;		line 7 in file "lcd.c"
  2584 ;; Parameters:    Size  Location     Type
  2585 ;;  a               1    wreg     unsigned char 
  2586 ;; Auto vars:     Size  Location     Type
  2587 ;;  a               1    4[BANK0 ] unsigned char 
  2588 ;; Return value:  Size  Location     Type
  2589 ;;                  1    wreg      void 
  2590 ;; Registers used:
  2591 ;;		wreg
  2592 ;; Tracked objects:
  2593 ;;		On entry : 0/0
  2594 ;;		On exit  : 100/0
  2595 ;;		Unchanged: 0/0
  2596 ;; Data sizes:     COMMON   BANK0
  2597 ;;      Params:         0       0
  2598 ;;      Locals:         0       1
  2599 ;;      Temps:          0       0
  2600 ;;      Totals:         0       1
  2601 ;;Total ram usage:        1 bytes
  2602 ;; Hardware stack levels used: 1
  2603 ;; Hardware stack levels required when called: 2
  2604 ;; This function calls:
  2605 ;;		Nothing
  2606 ;; This function is called by:
  2607 ;;		_Lcd_Cmd
  2608 ;;		_Lcd_Init
  2609 ;;		_Lcd_Write_Char
  2610 ;; This function uses a non-reentrant model
  2611 ;;
  2612                           
  2613     0360                     _Lcd_Port:	
  2614                           ;psect for function _Lcd_Port
  2615                           
  2616                           
  2617                           ;incstack = 0
  2618                           ; Regs used in _Lcd_Port: [wreg]
  2619                           ;Lcd_Port@a stored from wreg
  2620     0360  1283               	bcf	3,5	;RP0=0, select bank0
  2621     0361  0090               	movwf	Lcd_Port@a
  2622                           
  2623                           ;lcd.c: 7: void Lcd_Port(char a);lcd.c: 8: {;lcd.c: 9:  if(a & 1)
  2624     0362  1C10               	btfss	Lcd_Port@a,0
  2625     0363  2B66               	goto	l86
  2626                           
  2627                           ;lcd.c: 10:   RB1 = 1;
  2628     0364  1486               	bsf	6,1	;volatile
  2629     0365  2B67               	goto	l87
  2630     0366                     l86:	
  2631                           ;lcd.c: 11:  else
  2632                           
  2633                           
  2634                           ;lcd.c: 12:   RB1 = 0;
  2635     0366  1086               	bcf	6,1	;volatile
  2636     0367                     l87:
  2637                           
  2638                           ;lcd.c: 14:  if(a & 2)
  2639     0367  1C90               	btfss	Lcd_Port@a,1
  2640     0368  2B6B               	goto	l88
  2641                           
  2642                           ;lcd.c: 15:   RB2 = 1;
  2643     0369  1506               	bsf	6,2	;volatile
  2644     036A  2B6C               	goto	l89
  2645     036B                     l88:	
  2646                           ;lcd.c: 16:  else
  2647                           
  2648                           
  2649                           ;lcd.c: 17:   RB2 = 0;
  2650     036B  1106               	bcf	6,2	;volatile
  2651     036C                     l89:
  2652                           
  2653                           ;lcd.c: 19:  if(a & 4)
  2654     036C  1D10               	btfss	Lcd_Port@a,2
  2655     036D  2B70               	goto	l90
  2656                           
  2657                           ;lcd.c: 20:   RB3 = 1;
  2658     036E  1586               	bsf	6,3	;volatile
  2659     036F  2B71               	goto	l91
  2660     0370                     l90:	
  2661                           ;lcd.c: 21:  else
  2662                           
  2663                           
  2664                           ;lcd.c: 22:   RB3 = 0;
  2665     0370  1186               	bcf	6,3	;volatile
  2666     0371                     l91:
  2667                           
  2668                           ;lcd.c: 24:  if(a & 8)
  2669     0371  1D90               	btfss	Lcd_Port@a,3
  2670     0372  2B75               	goto	l92
  2671                           
  2672                           ;lcd.c: 25:   RB4 = 1;
  2673     0373  1606               	bsf	6,4	;volatile
  2674     0374  0008               	return
  2675     0375                     l92:	
  2676                           ;lcd.c: 26:  else
  2677                           
  2678                           
  2679                           ;lcd.c: 27:   RB4 = 0;
  2680     0375  1206               	bcf	6,4	;volatile
  2681     0376  0008               	return
  2682     0377                     __end_of_Lcd_Port:
  2683                           
  2684                           	psect	text19
  2685     03BA                     __ptext19:	
  2686 ;; *************** function _isr *****************
  2687 ;; Defined at:
  2688 ;;		line 38 in file "main.c"
  2689 ;; Parameters:    Size  Location     Type
  2690 ;;		None
  2691 ;; Auto vars:     Size  Location     Type
  2692 ;;		None
  2693 ;; Return value:  Size  Location     Type
  2694 ;;                  1    wreg      void 
  2695 ;; Registers used:
  2696 ;;		wreg, status,2, status,0, pclath, cstack
  2697 ;; Tracked objects:
  2698 ;;		On entry : 0/0
  2699 ;;		On exit  : 100/0
  2700 ;;		Unchanged: 0/0
  2701 ;; Data sizes:     COMMON   BANK0
  2702 ;;      Params:         0       0
  2703 ;;      Locals:         0       0
  2704 ;;      Temps:          0       2
  2705 ;;      Totals:         0       2
  2706 ;;Total ram usage:        2 bytes
  2707 ;; Hardware stack levels used: 1
  2708 ;; Hardware stack levels required when called: 1
  2709 ;; This function calls:
  2710 ;;		i1_delay_100ms
  2711 ;; This function is called by:
  2712 ;;		Interrupt level 1
  2713 ;; This function uses a non-reentrant model
  2714 ;;
  2715                           
  2716     03BA                     _isr:	
  2717                           ;psect for function _isr
  2718                           
  2719                           
  2720                           ;main.c: 40:     INTCONbits.INTF = 0;
  2721     03BA  108B               	bcf	11,1	;volatile
  2722                           
  2723                           ;main.c: 42:     toggleHold = ~toggleHold;
  2724     03BB  09C6               	comf	_toggleHold,f
  2725     03BC  09C7               	comf	_toggleHold+1,f
  2726                           
  2727                           ;main.c: 43:     delay_100ms();
  2728     03BD  23DC               	fcall	i1_delay_100ms
  2729     03BE  1283               	bcf	3,5	;RP0=0, select bank0
  2730     03BF  080F               	movf	??_isr+1,w
  2731     03C0  008A               	movwf	10
  2732     03C1  0E0E               	swapf	??_isr,w
  2733     03C2  0083               	movwf	3
  2734     03C3  0ECE               	swapf	78,f
  2735     03C4  0E4E               	swapf	78,w
  2736     03C5  0009               	retfie
  2737     03C6                     __end_of_isr:
  2738                           
  2739                           	psect	intentry
  2740     0004                     __pintentry:	
  2741                           ;incstack = 0
  2742                           ; Regs used in _isr: [wreg+status,2+status,0+pclath+cstack]
  2743                           
  2744     0004                     interrupt_function:
  2745     004E                     saved_w	set	btemp
  2746     0004  00CE               	movwf	btemp
  2747     0005  0E03               	swapf	3,w
  2748     0006  1283               	bcf	3,5	;RP0=0, select bank0
  2749     0007  008E               	movwf	??_isr
  2750     0008  080A               	movf	10,w
  2751     0009  008F               	movwf	??_isr+1
  2752     000A  2BBA               	ljmp	_isr
  2753                           
  2754                           	psect	text20
  2755     03DC                     __ptext20:	
  2756 ;; *************** function i1_delay_100ms *****************
  2757 ;; Defined at:
  2758 ;;		line 26 in file "main.c"
  2759 ;; Parameters:    Size  Location     Type
  2760 ;;		None
  2761 ;; Auto vars:     Size  Location     Type
  2762 ;;		None
  2763 ;; Return value:  Size  Location     Type
  2764 ;;                  1    wreg      void 
  2765 ;; Registers used:
  2766 ;;		wreg
  2767 ;; Tracked objects:
  2768 ;;		On entry : 100/0
  2769 ;;		On exit  : 0/0
  2770 ;;		Unchanged: 0/0
  2771 ;; Data sizes:     COMMON   BANK0
  2772 ;;      Params:         0       0
  2773 ;;      Locals:         0       0
  2774 ;;      Temps:          0       2
  2775 ;;      Totals:         0       2
  2776 ;;Total ram usage:        2 bytes
  2777 ;; Hardware stack levels used: 1
  2778 ;; This function calls:
  2779 ;;		Nothing
  2780 ;; This function is called by:
  2781 ;;		_isr
  2782 ;; This function uses a non-reentrant model
  2783 ;;
  2784                           
  2785     03DC                     i1_delay_100ms:	
  2786                           ;psect for function i1_delay_100ms
  2787                           
  2788                           
  2789                           ;main.c: 27:     _delay((unsigned long)((100)*(4000000/4000.0)));
  2790                           
  2791                           ;incstack = 0
  2792                           ; Regs used in i1_delay_100ms: [wreg]
  2793     03DC  3082               	movlw	130
  2794     03DD  008D               	movwf	??i1_delay_100ms+1
  2795     03DE  30DD               	movlw	221
  2796     03DF  008C               	movwf	??i1_delay_100ms
  2797     03E0                     u97_27:
  2798     03E0  0B8C               	decfsz	??i1_delay_100ms,f
  2799     03E1  2BE0               	goto	u97_27
  2800     03E2  0B8D               	decfsz	??i1_delay_100ms+1,f
  2801     03E3  2BE0               	goto	u97_27
  2802     03E4  2BE5               	nop2
  2803     03E5  0008               	return
  2804     03E6                     __end_ofi1_delay_100ms:
  2805     004E                     btemp	set	78	;btemp
  2806     004E                     wtemp0	set	78
  2807                           
  2808                           	psect	config
  2809                           
  2810                           ;Config register CONFIG @ 0x2007
  2811                           ;	Oscillator Selection bits
  2812                           ;	FOSC = XT, XT oscillator
  2813                           ;	Watchdog Timer
  2814                           ;	WDTE = OFF, WDT disabled
  2815                           ;	Power-up Timer Enable bit
  2816                           ;	PWRTE = ON, Power-up Timer is enabled
  2817                           ;	Code Protection bit
  2818                           ;	CP = OFF, Code protection disabled
  2819     2007                     	org	8199
  2820     2007  3FF1               	dw	16369

Data Sizes:
    Strings     5
    Constant    0
    Data        8
    BSS         4
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON            0      0       0
    BANK0            66     50      62

Pointer List with Targets:

    strcpy@from	PTR const unsigned char  size(1) Largest target is 5
		 -> STR_1(CODE[5]), 

    strcpy@to	PTR unsigned char  size(1) Largest target is 8
		 -> welcomeMessage@msg(BANK0[8]), 

    strcpy@cp	PTR unsigned char  size(1) Largest target is 8
		 -> welcomeMessage@msg(BANK0[8]), 

    utoa@buf	PTR unsigned char  size(1) Largest target is 16
		 -> Lcd_Write_Int@temp(BANK0[16]), 

    sp__itoa	PTR unsigned char  size(1) Largest target is 0

    sp__utoa	PTR unsigned char  size(1) Largest target is 16
		 -> Lcd_Write_Int@temp(BANK0[16]), 

    Lcd_Write_String@a	PTR unsigned char  size(1) Largest target is 16
		 -> Lcd_Write_Int@temp(BANK0[16]), welcomeMessage@msg(BANK0[8]), 

    sp__strcpy	PTR unsigned char  size(1) Largest target is 8
		 -> welcomeMessage@msg(BANK0[8]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _isr in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_Lcd_Write_Int
    _welcomeMessage->_Lcd_Set_Cursor
    _delay_1000ms->_delay_100ms
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Clear->_Lcd_Cmd
    ___wmul->___lwdiv
    _Lcd_Write_Int->_utoa
    _utoa->___lwdiv
    ___lwdiv->___lwmod
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Init->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port

Critical Paths under _isr in BANK0

    _isr->i1_delay_100ms

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 8     8      0   10313
                                             42 BANK0      8     8      0
                          _Lcd_Clear
                           _Lcd_Init
                     _Lcd_Set_Cursor
                     _Lcd_Write_Char
                      _Lcd_Write_Int
                            ___lwdiv
                            ___lwmod
                             ___wmul
                        _delay_100ms
                           _readADC1
                           _readADC2
                     _welcomeMessage
 ---------------------------------------------------------------------------------
 (1) _welcomeMessage                                      12    12      0    2222
                                             14 BANK0     12    12      0
                          _Lcd_Clear
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
                       _delay_1000ms
                             _strcpy
 ---------------------------------------------------------------------------------
 (2) _strcpy                                               3     2      1     184
                                              4 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (2) _delay_1000ms                                         2     2      0      46
                                              6 BANK0      2     2      0
                        _delay_100ms
 ---------------------------------------------------------------------------------
 (3) _delay_100ms                                          2     2      0       0
                                              4 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _Lcd_Set_Cursor                                       6     5      1    1444
                                              8 BANK0      6     5      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Clear                                            2     2      0     110
                                              8 BANK0      2     2      0
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _readADC2                                             8     6      2     208
                                              4 BANK0      8     6      2
 ---------------------------------------------------------------------------------
 (1) _readADC1                                             8     6      2     208
                                              4 BANK0      8     6      2
 ---------------------------------------------------------------------------------
 (1) ___wmul                                               6     2      4     396
                                             16 BANK0      6     2      4
                            ___lwdiv (ARG)
                            ___lwmod (ARG)
 ---------------------------------------------------------------------------------
 (1) _Lcd_Write_Int                                       18    16      2    3458
                                             24 BANK0     18    16      2
                   _Lcd_Write_String
                               _utoa
 ---------------------------------------------------------------------------------
 (2) _utoa                                                 8     4      4    2335
                                             16 BANK0      8     4      4
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (1) ___lwmod                                              5     1      4     615
                                              4 BANK0      5     1      4
 ---------------------------------------------------------------------------------
 (1) ___lwdiv                                              7     3      4    1074
                                              9 BANK0      7     3      4
                            ___lwmod (ARG)
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_String                                     4     4      0     367
                                              9 BANK0      4     4      0
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (3) _Lcd_Write_Char                                       4     4      0     178
                                              5 BANK0      4     4      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             2     2      0     198
                                              8 BANK0      2     2      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (3) _Lcd_Cmd                                              3     3      0     110
                                              5 BANK0      3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (4) _Lcd_Port                                             1     1      0      88
                                              4 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _isr                                                  2     2      0       0
                                              2 BANK0      2     2      0
                      i1_delay_100ms
 ---------------------------------------------------------------------------------
 (6) i1_delay_100ms                                        2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Lcd_Clear
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Init
     _Lcd_Cmd
     _Lcd_Port
   _Lcd_Set_Cursor
     _Lcd_Cmd
   _Lcd_Write_Char
     _Lcd_Port
   _Lcd_Write_Int
     _Lcd_Write_String
       _Lcd_Write_Char
     _utoa
       ___lwdiv
         ___lwmod (ARG)
       ___lwmod
   ___lwdiv
   ___lwmod
   ___wmul
     ___lwdiv (ARG)
     ___lwmod (ARG)
   _delay_100ms
   _readADC1
   _readADC2
   _welcomeMessage
     _Lcd_Clear
     _Lcd_Set_Cursor
     _Lcd_Write_String
     _delay_1000ms
       _delay_100ms
     _strcpy

 _isr (ROOT)
   i1_delay_100ms

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               42     32      3E       3       93.9%
BITBANK0            42      0       0       5        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               0      0       0       1        0.0%
BITCOMMON            0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      3E       6        0.0%
ABS                  0      0      3E       4        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA              40      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.41 build 20230208172133 
Symbol Table                                                                                   Tue May 02 16:09:36 2023

                       pc 0002                        l90 0370                        l91 0371  
                      l92 0375                        l86 0366                        l87 0367  
                      l88 036B                        l89 036C                        fsr 0004  
     ___wmul@multiplicand 001E                       l241 0317                       l701 0142  
                     _RA0 0028                       _RA1 0029                       _RA2 002A  
                     _RB1 0031                       _RA3 002B                       _RB2 0032  
                     _RB3 0033                       _RB4 0034                       _RB5 0035  
                     _RB6 0036                       _RB7 0037                       u505 020F  
                     u515 0219                       u455 02F5                       u615 0232  
                     u545 0263                       u475 01F7                       u635 024B  
                     u565 0274                       u495 0203                       u575 027D  
                     u817 03D6                       u690 02C5                       u907 01CD  
                     u827 03A7                       u595 038A                       u917 02FF  
                     u837 015B                       u927 0308                       u775 0318  
                     u847 0161                       u937 0292                       u785 031F  
                     u857 0170                       u947 029D                       u867 0182  
                     u957 02A7                       u877 01A6                       u967 0397  
                     u887 01AC                       u897 01BB                       _isr 03BA  
                     fsr0 0004                       indf 0000      __end_of_delay_1000ms 038D  
                    l1301 0331                      l1221 01F4                      l1223 0202  
                    l1311 0107                      l1233 0223                      l1321 0122  
                    l1251 027C                      l1307 034B                      l1229 0218  
                    l1245 0260                      l1247 026E                      l1255 0287  
                    l1409 01C8                      l1433 0159                      l1265 0379  
                    l1285 0241                      l1383 01A4                      l1535 0031  
                    l1449 016E                      l1537 006C                      l1459 017D  
                    l1477 030F                      l1399 01B9                      ?_isr 000C  
                    STR_1 03CC         ?_Lcd_Write_String 000C                      _main 0022  
                    btemp 004E                      _utoa 0102                      start 000B  
      ??_Lcd_Write_String 0015           __end_of_Lcd_Cmd 039F                     ??_isr 000E  
                   ?_main 000C                     ?_utoa 001C           __end_of___lwdiv 0228  
         __end_of___lwmod 028C                     _TRISA 0085                     _TRISB 0086  
                   u97_27 03E0                     pclath 000A                     utoa@c 0022  
                   utoa@v 0020                     status 0003                     wtemp0 004E  
        __end_of_Lcd_Init 02BD          __end_of_Lcd_Port 0377           __initialization 000C  
            __end_of_main 0102              __end_of_utoa 0156                    ??_main 0000  
                  ??_utoa 0000             i1_delay_100ms 03DC                 ??_Lcd_Cmd 0011  
            readADC1@bits 0016              readADC2@bits 0016              readADC1@volt 0014  
            readADC2@volt 0014          ??_welcomeMessage 001A                    _adcVal 0048  
        __end_of_readADC1 01EC          __end_of_readADC2 01A1                    ___wmul 030D  
               ??___lwdiv 0000                 ??___lwmod 0000                    main@d1 0036  
                  main@d2 0038                    main@d3 003A                    main@d4 003C  
                  _strcpy 0348     __end_of_Lcd_Write_Int 03BA                    saved_w 004E  
          ?i1_delay_100ms 000C           Lcd_Set_Cursor@a 0016           Lcd_Set_Cursor@b 0014  
         Lcd_Set_Cursor@y 0018           Lcd_Set_Cursor@z 0017   __end_of__initialization 0020  
       __end_of_Lcd_Clear 03AD              _delay_1000ms 0377            __pcstackCOMMON 0000  
            __pidataBANK0 03E6            _Lcd_Set_Cursor 0228            _OPTION_REGbits 0081  
               ?_Lcd_Init 000C                 ?_Lcd_Port 000C            Lcd_Write_Int@a 0024  
              __pbssBANK0 0046             delay_1000ms@i 0012                __pmaintext 0022  
                 ?___wmul 001C                __pintentry 0004    __end_of_Lcd_Set_Cursor 025A  
                 ?_strcpy 0010           ??i1_delay_100ms 000C                ??_Lcd_Init 0014  
              ??_Lcd_Port 0000                __stringtab 03C6                 ?_readADC1 0010  
               ?_readADC2 0010            _Lcd_Write_Char 02EA                   _Lcd_Cmd 038D  
                 ___lwdiv 01EC                   ___lwmod 025A           ?_Lcd_Set_Cursor 0014  
                 __ptext1 02BD                   __ptext2 0348                   __ptext3 0377  
                 __ptext4 03D1                   __ptext5 0228                   __ptext6 039F  
                 __ptext7 0156                   __ptext8 01A1                   __ptext9 030D  
           ??_delay_100ms 0010    __end_of_Lcd_Write_Char 030D      end_of_initialization 0020  
              ??_readADC1 0012                ??_readADC2 0012                 Lcd_Port@a 0010  
                 utoa@buf 0023         Lcd_Write_Int@temp 0026                   utoa@val 001C  
              _toggleHold 0046         welcomeMessage@msg 001E           ?_Lcd_Write_Char 000C  
       Lcd_Write_String@a 0018         Lcd_Write_String@i 0016       __end_of_delay_100ms 03DC  
               _Lcd_Clear 039F            __end_of___wmul 032E          _Lcd_Write_String 032E  
          __end_of_strcpy 0360       start_initialization 000C               __end_of_isr 03C6  
              ?_Lcd_Clear 000C                  ??___wmul 0000               __pdataBANK0 003E  
         Lcd_Write_Char@a 0014           Lcd_Write_Char@y 0013                  ??_strcpy 0000  
               ___latbits 0000             __pcstackBANK0 000C               _delay_100ms 03D1  
                ?_Lcd_Cmd 000C          ___lwdiv@dividend 0017          ??_Lcd_Set_Cursor 0015  
                ?___lwdiv 0015                  ?___lwmod 0010                 __pstrings 03C6  
           _Lcd_Write_Int 03AD     __end_ofi1_delay_100ms 03E6          ___lwdiv@quotient 0019  
       interrupt_function 0004            ___wmul@product 0020                  Lcd_Cmd@a 0013  
             ??_Lcd_Clear 0014            readADC1@rxData 0017               __stringbase 03CB  
       ___wmul@multiplier 001C            readADC2@rxData 0017            ?_Lcd_Write_Int 0024  
        ??_Lcd_Write_Char 0011                  _Lcd_Init 028C                  _Lcd_Port 0360  
__end_of_Lcd_Write_String 0348             ?_delay_1000ms 000C        __end_of__stringtab 03CC  
          _welcomeMessage 02BD           ___lwdiv@divisor 0015           ___lwdiv@counter 001B  
                __ptext10 03AD                  __ptext11 0102                  __ptext20 03DC  
                __ptext12 025A                  __ptext13 01EC                  __ptext14 032E  
                __ptext15 02EA                  __ptext16 028C                  __ptext17 038D  
                __ptext18 0360                  __ptext19 03BA                  _readADC1 01A1  
                _readADC2 0156                strcpy@from 0010            ??_delay_1000ms 0000  
         ??_Lcd_Write_Int 0000    __end_of_welcomeMessage 02EA                _INTCONbits 000B  
            ?_delay_100ms 000C        Lcd_Write_Char@temp 0012                  intlevel1 0000  
        ___lwmod@dividend 0012                 stringcode 03C6        Lcd_Set_Cursor@temp 0019  
         ?_welcomeMessage 000C                  utoa@base 001E           ___lwmod@divisor 0010  
                strcpy@cp 0012                  strcpy@to 0011           ___lwmod@counter 0014  
                stringdir 03C6                  stringtab 03C6        welcomeMessage@F331 003E  
